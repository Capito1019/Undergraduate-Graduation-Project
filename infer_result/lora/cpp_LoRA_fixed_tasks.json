[
    [
        "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n    if (numbers[i]-numbers[j]<threshold)\n        return true;\n\n    return false;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n\n    int i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (numbers[i]-numbers[j]<threshold)\n    return true;\n\n    return false;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n\nint i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (numbers[i]-numbers[j]<threshold)\n    return true;\n\n    return false;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n\nint i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (fabs(numbers[i]-numbers[j]) < threshold)\n    return true;\n\n    return false;\n}\n",
        "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n\n    for (int i=0;i<numbers.size();i++)\n        for (int j=i+1;j<numbers.size();j++)\n            if (fabs(numbers[i]-numbers[j]) < threshold)\n                return true;\n\n    return false;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j])<threshold)\n    return true;\n\n    return false;\n}\n",
        "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n\nint i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (numbers[i]-numbers[j]<threshold)\n    return true;\n\n    return false;\n}\n",
        "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n\nint i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (abs(numbers[i]-numbers[j]) < threshold)\n    return true;\n\n    return false;\n}\n",
        "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (numbers[i] - numbers[j] < threshold) {\n                return true;\n            }\n        }\n    }\n\n    return false;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool has_close_elements(vector<float> numbers, float threshold){\n\nint i,j;\n    \n    for (i=0;i<numbers.size();i++)\n    for (j=i+1;j<numbers.size();j++)\n    if (fabs(numbers[i]-numbers[j]) < threshold)\n    return true;\n\n    return false;\n}\n"
    ],
    [
        "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> separate_paren_groups(string paren_string) {\n    vector<string> all_parens;\n    string current_paren;\n    int level = 0;\n    char chr;\n    int i;\n\n    for (i = 0; i < paren_string.length(); i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level += 1;\n            current_paren += chr;\n        }\n        if (chr == ')') {\n            level -= 1;\n            current_paren += chr;\n            if (level < 0) {\n                all_parens.push_back(current_paren);\n                current_paren = \"\";\n            }\n        }\n    }\n\n    return all_parens;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n\n    vector<string> all_parens;\n    string current_paren;\n    int level = 0;\n    char chr;\n    int i;\n    for (i = 0; i < paren_string.length(); i++)\n    {\n        chr = paren_string[i];\n        if (chr == '(')\n        {\n            level += 1;\n            current_paren += chr;\n        }\n        if (chr == ')')\n        {\n            level -= 1;\n            current_paren += chr;\n            if (level == 0)\n            {\n                all_parens.push_back(current_paren);\n                current_paren = \"\";\n            }\n        }\n    }\n    return all_parens;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n\nvector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n\nvector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n\nvector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n\nvector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0)\n            {\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n\nvector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level<0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> separate_paren_groups(string paren_string){\n\n    vector<string> all_parens;\n    string current_paren;\n    int level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_parens.push_back(current_paren);\n                current_paren=\"\";\n            }\n        }\n    }\n    return all_parens;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return number - floor(number);\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n\nreturn number-int(number);\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n\nreturn (number - int(number)) * 100;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n\nreturn fmod(number, 1.0);\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n\nreturn number-int(number);\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n\nreturn number-int(number);\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n\nreturn number-int(number);\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n\nreturn number-int(number);\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n\nreturn number-int(number);\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat truncate_number(float number){\n    return fmod(number, 1.0);\n}"
    ],
    [
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n\n    int num = 0;\n    for (int i = 0; i < operations.size(); i++)\n    {\n        num += operations[i];\n        if (num < 0) return true;\n    }\n    return false;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n\n    int num = 0;\n    for (int i = 0; i < operations.size(); i++)\n    {\n        num += operations[i];\n        if (num < 0) return true;\n    }\n    return false;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n\n    int num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n\nint num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n\n    int num = 0;\n    for (int i = 0; i < operations.size(); i++)\n    {\n        num += operations[i];\n        if (num < 0) return true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool below_zero(vector<int> operations){\n\nint num=0;\n    for (int i=0;i<operations.size();i++)\n    {\n        num+=operations[i];\n        if (num<0) return true;\n    }\n    return false;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/avg;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n\nfloat sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/avg;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/numbers.size();\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/avg;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/avg;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n\nfloat sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/avg;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n\n    float sum=0;\n    float avg, msum, mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/avg;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n\n    float sum=0;\n    float avg,msum,mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/avg;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat mean_absolute_deviation(vector<float> numbers){\n\n    float sum=0;\n    float avg, msum, mavg;\n    int i=0;\n    for (i=0;i<numbers.size();i++)\n        sum+=numbers[i];\n    avg=sum/numbers.size();\n    msum=0;\n    for (i=0;i<numbers.size();i++)\n        msum+=abs(numbers[i]-avg);\n    return msum/avg;\n}"
    ],
    [
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){\n\nvector<int> out={};\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(numbers[i-1]);\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){\n\nvector<int> out={};\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(numbers[i-1]);\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){\n\n    vector<int> out;\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(numbers[i-1]);\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){\n\n    vector<int> out={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        out.push_back(numbers[i]);\n        if (i != numbers.size()-1) {\n            out.push_back(delimeter);\n        }\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){\n    vector<int> out;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (i == 0) {\n            out.push_back(numbers[0]);\n        } else {\n            out.push_back(delimeter);\n            out.push_back(numbers[i]);\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){\n\nvector<int> out={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (i != 0) {\n            out.push_back(delimeter);\n        }\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){\n\nvector<int> out={};\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(numbers[i-1]);\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){\n\n    vector<int> out;\n    for (int i=1;i<numbers.size();i++)\n    {\n        out.push_back(numbers[i-1]);\n        out.push_back(delimeter);\n        out.push_back(numbers[i]);\n\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){\n\nvector<int> out={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        out.push_back(numbers[i]);\n        if (i < numbers.size()-1) {\n            out.push_back(delimeter);\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> intersperse(vector<int> numbers, int delimeter){\n\n    vector<int> out;\n    for (int i=0; i<numbers.size(); i++) {\n        if (i != 0) {\n            out.push_back(delimeter);\n        }\n        out.push_back(numbers[i]);\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            if (level>max_level) max_level=level;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            max_level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            if (level>max_level) max_level=level;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            max_level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level",
        "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<int> parse_nested_parens(string paren_string) {\n    vector<int> all_levels;\n    string current_paren;\n    int level = 0, max_level = 0;\n    char chr;\n    int i;\n\n    for (i = 0; i < paren_string.length(); i++) {\n        chr = paren_string[i];\n        if (chr == '(') {\n            level++;\n            if (level > max_level) max_level = level;\n            current_paren += chr;\n        }\n\n        if (chr == ')') {\n            max_level--;\n            current_paren += chr;\n            if (level == 0) {\n                all_levels.push_back(max_level);\n                current_paren = \"\";\n                max_level = 0;\n            }\n        }\n    }\n\n    return all_levels;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            if (level>max_level) max_level=level;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            max_level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n\nvector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n        level+=1;\n        if (level>max_level) max_level=level;\n        current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            max_level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level=",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            if (level>max_level) max_level=level;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            max_level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            if (level>max_level) max_level=level;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            max_level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            if (level>max_level) max_level=level;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            max_level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            if (level>max_level) max_level=level;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            max_level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> parse_nested_parens(string paren_string){\n\n    vector<int> all_levels;\n    string current_paren;\n    int level=0,max_level=0;\n    char chr;\n    int i;\n    for (i=0;i<paren_string.length();i++)\n    {\n        chr=paren_string[i];\n        if (chr=='(')\n        {\n            level+=1;\n            if (level>max_level) max_level=level;\n            current_paren+=chr;\n        }\n        if (chr==')')\n        {\n            max_level-=1;\n            current_paren+=chr;\n            if (level==0){\n                all_levels.push_back(max_level);\n                current_paren=\"\";\n                max_level"
    ],
    [
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n            out.push_back(strings[i]);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\nvector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring) != string::npos)\n            out.push_back(strings[i]);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\nvector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\nvector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n            out.push_back(strings[i]);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (substring.find(strings[i])!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\nvector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring) != string::npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> filter_by_substring(vector<string> strings, string substring){\n\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].find(substring)!=strings[i].npos)\n        out.push_back(strings[i]);\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    if (numbers.size() == 0) {\n        return {0, 1};\n    }\n\n    int sum = 0;\n    int product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n\nint sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}",
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> sum_product(vector<int> numbers) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return {sum, product};\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n    if (numbers.size() == 0) {\n        return {0, 1};\n    }\n    \n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n\n    int sum=0,product=1;\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}\n",
        "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> sum_product(vector<int> numbers) {\n    int sum = 0, product = 1;\n    for (int i = 0; i < numbers.size(); i++) {\n        sum += numbers[i];\n        product *= numbers[i];\n    }\n    return { sum, product };\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> sum_product(vector<int> numbers){\n\n    int sum=0,product=1; // Initialize sum with 0 and product with 1\n    for (int i=0;i<numbers.size();i++)\n    {\n        sum+=numbers[i];\n        product*=numbers[i];\n    }\n    return {sum,product};\n}"
    ],
    [
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n\nvector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n\nvector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n\n    vector<int> out;\n    int max = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n\n    vector<int> out;\n    int max = 0;\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] > max) max = numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n\nvector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> rolling_max(vector<int> numbers){\n\n    vector<int> out;\n    int max=0;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]>max) max=numbers[i];\n        out.push_back(max);\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n\n    int i;\n    for (i=0;i<str.length();i++)\n    {\n        if (is_palindrome(str))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n    }\n    string n2str(str.rbegin(),str.rend());\n    return str+n2str;\n}",
        "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\nusing namespace std;\n\nbool is_palindrome(string str) {\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(string str) {\n    int i;\n    for (i = 0; i < str.length(); i++) {\n        if (is_palindrome(str.substr(i, str.length() - i))) {\n            string nstr = str.substr(0, i);\n            string n2str(nstr.rbegin(), nstr.rend());\n            return str + n2str;\n        }\n    }\n    string n2str(str.rbegin(), str.rend());\n    return str + n2str;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n\nint i;\n   for (i=0;i<str.length();i++)\n   {\n        if (is_palindrome(str.substr(0, i)))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}\n",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n\nint i;\n   for (i=0;i<str.length();i++)\n   {\n        if (is_palindrome(str))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n   }\n   string n2str(str.rbegin(),str.rend());\n   return str+n2str;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    int i;\n    for (i=0;i<str.length();i++) {\n        if (is_palindrome(str)) {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n    }\n    string n2str(str.rbegin(),str.rend());\n    return str+n2str;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n\n    int i;\n    for (i=0;i<str.length();i++)\n    {\n        if (is_palindrome(str))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n    }\n    string n2str(str.rbegin(),str.rend());\n    return str+n2str;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n\n    int i;\n    for (i=0;i<str.length();i++)\n    {\n        if (is_palindrome(str.substr(0, i)))\n        {\n            string nstr = str.substr(0, i);\n            string n2str(nstr.rbegin(), nstr.rend());\n            return str + n2str;\n        }\n    }\n    string n2str(str.rbegin(), str.rend());\n    return str + n2str;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    if (is_palindrome(str))\n        return str;\n    \n    int i;\n    for (i=0;i<str.length();i++)\n    {\n        if (is_palindrome(str.substr(0,i)))\n        {\n            string nstr;\n            nstr=str.substr(0,i);\n            string n2str(nstr.rbegin(),nstr.rend());\n            return str+n2str;\n        }\n    }\n    \n    string n2str(str.rbegin(),str.rend());\n    return str+n2str;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool is_palindrome(string str){\n    string s(str.rbegin(),str.rend());\n    return s==str;\n}\nstring make_palindrome(string str){\n    int i;\n    for (i=0;i<str.length();i++)\n    {\n        if (is_palindrome(str.substr(i, str.length() - i)))\n        {\n            string nstr = str.substr(0, i);\n            string n2str(nstr.rbegin(), nstr.rend());\n            return str + n2str;\n        }\n    }\n    string n2str(str.rbegin(), str.rend());\n    return str + n2str;\n}",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool is_palindrome(string str) {\n    string s(str.rbegin(), str.rend());\n    return s == str;\n}\n\nstring make_palindrome(string str) {\n    int i;\n    for (i = 0; i < str.length(); i++) {\n        if (is_palindrome(str)) {\n            string nstr;\n            nstr = str.substr(0, i);\n            string n2str(nstr.rbegin(), nstr.rend());\n            return str + n2str;\n        }\n    }\n    string n2str(str.rbegin(), str.rend());\n    return str + n2str;\n}\n\nint main() {\n    string str = \"cat\";\n    cout << make_palindrome(str) << endl;\n    return 0;\n}"
    ],
    [
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n\nstring output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='1';\n            }  \n            else output+='0';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n\nstring output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='1';\n            }  \n            else output+='0';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n",
        "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\n\nstring string_xor(string a, string b) {\n    string output = \"\";\n    for (int i = 0; i < a.length() and i < b.length(); i++) {\n        if (i < a.length() and i < b.length()) {\n            if (a[i] == b[i]) {\n                output += '1';\n            } else {\n                output += '0';\n            }\n        } else {\n            if (i >= a.length()) {\n                output += b[i];\n            } else {\n                output += a[i];\n            }\n        }\n    }\n    return output;\n}\n",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n\nstring output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='1';\n            }  \n            else output+='0';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}\n",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a, string b) {\n    string output = \"\";\n    for (int i = 0; (i < a.length() && i < b.length()); i++) {\n        if (i < a.length() && i < b.length()) {\n            if (a[i] == b[i]) {\n                output += '1';\n            } else {\n                output += '0';\n            }\n        } else {\n            if (i >= a.length()) {\n                output += b[i];\n            } else {\n                output += a[i];\n            }\n        }\n    }\n    return output;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n\nstring output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='1';\n            }  \n            else output+='0';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n    string output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='1';\n            }  \n            else output+='0';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n                output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring string_xor(string a, string b) {\n    string output = \"\";\n    for (int i = 0; i < a.length() || i < b.length(); i++) {\n        if (i < a.length() && i < b.length()) {\n            if (a[i] == b[i]) {\n                output += '1';\n            } else {\n                output += '0';\n            }\n        } else {\n            if (i >= a.length()) {\n                output += b[i];\n            } else {\n                output += a[i];\n            }\n        }\n    }\n    return output;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a,string b){\n\nstring output=\"\";\n    for (int i=0;(i<a.length() and i<b.length());i++)\n    {\n        if (i<a.length() and i<b.length())\n        {\n            if (a[i]== b[i]) \n            {\n                output+='1';\n            }  \n            else output+='0';\n        }\n        else\n        {\n            if (i>=a.length()) \n            {\n            output+=b[i];\n            }\n            else output+=a[i];\n        }\n    }\n    return output;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_xor(string a, string b) {\n    string output = \"\";\n    for (int i = 0; (i < a.length() and i < b.length()); i++) {\n        if (i < a.length() and i < b.length()) {\n            if (a[i] == b[i]) {\n                output += '1';\n            } else {\n                output += '0';\n            }\n        } else {\n            if (i >= a.length()) {\n                output += b[i];\n            } else {\n                output += a[i];\n            }\n        }\n    }\n    return output;\n}"
    ],
    [
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n\n    if (strings.size() == 0) return NULL;\n\n    string out = strings[0];\n\n    for (int i=1;i<strings.size();i++)\n    {\n        if (strings[i].length() > out.length())\n        {\n            out = strings[i];\n        }\n    }\n\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    if (strings.size() == 0) return \"\";\n    string out = strings[0];\n    for (int i = 1; i < strings.size(); i++) {\n        if (strings[i].length() > out.length()) {\n            out = strings[i];\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    string out;\n    if (strings.empty())\n        return out;\n    else {\n        sort(strings.begin(), strings.end(), [](const string &a, const string &b) { return a.length() < b.length(); });\n        out = strings[0];\n        for (int i=1; i<strings.size(); i++)\n            if (strings[i].length() == out.length())\n                out = strings[i];\n        return out;\n    }\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    if (strings.empty()) return \"\"; // Return empty string if the input vector is empty\n    string out = strings[0]; // Initialize with the first string\n    for (int i=1; i<strings.size(); i++) {\n        if (strings[i].length() > out.length()) {\n            out = strings[i];\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n\nstring out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n\n    string out;\n    if (strings.size() == 0) return NULL;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length() > out.length())\n        {\n            out = strings[i];\n        }\n    }\n    return out;\n}\n",
        "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring longest(const vector<string>& strings) {\n    if (strings.empty()) return \"\";\n\n    auto longest_it = max_element(strings.begin(), strings.end(), [](const string& a, const string& b) {\n        return a.length() < b.length();\n    });\n\n    return *longest_it;\n}",
        "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nstring longest(vector<string> strings) {\n    if (strings.empty()) {\n        return \"\";\n    }\n    \n    string longest_string = strings[0];\n    for (int i = 1; i < strings.size(); i++) {\n        if (strings[i].length() > longest_string.length()) {\n            longest_string = strings[i];\n        }\n    }\n    \n    return longest_string;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n\nstring out;\n    for (int i=0;i<strings.size();i++)\n    {\n        if (strings[i].length()>out.length()) out=strings[i];\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring longest(vector<string> strings){\n    if (strings.empty()) return string();\n    string out = strings[0];\n    for (int i = 1; i < strings.size(); i++) {\n        if (strings[i].length() > out.length()) {\n            out = strings[i];\n        }\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n\n    int out, m;\n    while (true){\n        if (a < b){\n            m = a;\n            a = b;\n            b = m;\n        }\n        a = a % b;\n        if (a == 0)\n            return a;\n    }\n}",
        "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n\n    int out, m;\n    while (true){\n        if (a < b) {\n            m = a;\n            a = b;\n            b = m;\n        }\n        a = a % b;\n        if (a == 0) return a;\n    }\n}",
        "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return a;\n    }\n}",
        "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n\nint out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b;\n    }\n}",
        "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return a;\n    }\n}",
        "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n\nint out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return a;\n    }\n}",
        "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n\n    int out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return a;\n    }\n}",
        "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n\nint out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return a;\n    }\n}\n",
        "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n\nint out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return a;\n    }\n}\n",
        "#include<stdio.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint greatest_common_divisor(int a, int b){\n\nint out,m;\n    while (true){\n        if (a<b) \n        {\n            m=a;a=b;b=m;\n        }\n        a=a%b;\n        if (a==0) return b; // Fixed return statement to return b instead of a\n    }\n}"
    ],
    [
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    out.push_back(current);\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n\nvector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    out.push_back(current);\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n\nvector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    out.push_back(current);\n    return out;\n}\n",
        "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n\nvector<string> all_prefixes(string str) {\n    vector<string> out;\n    string current = \"\";\n    for (int i = 0; i < str.length(); i++) {\n        current = current + str[i];\n        out.push_back(current);\n    }\n    out.push_back(current);\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n#include <string>\nusing namespace std;\n#include <algorithm>\n#include <cmath>\n#include <cstdlib>\n\nvector<string> all_prefixes(string str) {\n    vector<string> out;\n    string current = \"\";\n    for (int i = 0; i < str.length(); i++) {\n        current = current + str[i];\n        out.push_back(current);\n    }\n    out.push_back(current);\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n\nvector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n\nvector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    out.push_back(current);\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    out.push_back(current);\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n\n    vector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    out.push_back(current);\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<string> all_prefixes(string str){\n\nvector<string> out;\n    string current=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        current=current+str[i];\n        out.push_back(current);\n    }\n    out.push_back(current);\n    return out;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n\nstring out=\"0\";\n    for (int i=1;i<=n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n\n    string out=\"0\";\n    for (int i=1;i<n;i++)\n        out=out+\" \"+to_string(i);\n    return out;\n}",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring string_sequence(int n) {\n    string out = \"0\";\n    for (int i = 1; i < n; i++)\n        out = out + \" \" + to_string(i);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<n;i++)\n        out=out+\" \"+to_string(i);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"0\";\n    for (int i=1;i<n;i++)\n        out=out+\" \"+to_string(i);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n\nstring out=\"0\";\n    for (int i=1;i<n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n    string out=\"\";\n    for (int i=0;i<n;i++)\n        out=out+\" \"+to_string(i);\n    return out;\n}",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring string_sequence(int n) {\n    string out = \"0\";\n    for (int i = 1; i < n; i++) {\n        out = out + \" \" + to_string(i);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n\n    string out=\"0\";\n    for (int i=1;i<n;i++)\n        out=out+\" \"+to_string(i);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring string_sequence(int n){\n\nstring out=\"0\";\n    for (int i=1;i<n;i++)\n    out=out+\" \"+to_string(i);\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){\n\n    vector<char> distinct;\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n        {\n            if (tolower(distinct[j]) == tolower(str[i]))\n                isin = true;\n        }\n        if (isin == false)\n        {\n            distinct.push_back(str[i]);\n        }\n    }\n    return distinct.size();\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){\n\nvector<char> distinct={};\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (tolower(distinct[j])==tolower(str[i]))\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){\n\n    vector<char> distinct;\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n        {\n            if (distinct[j]==str[i] || tolower(distinct[j])==tolower(str[i]))\n                isin=true;\n        }\n        if (isin==false) distinct.push_back(str[i]);\n    }\n    return distinct.size();\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){\n\nvector<char> distinct={};\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (tolower(distinct[j])==tolower(str[i]))\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){\n    vector<char> distinct;\n    for (int i=0;i<str.size();i++) {\n        bool isin = false;\n        for (int j=0;j<distinct.size();j++) {\n            if (tolower(distinct[j])==tolower(str[i])) {\n                isin = true;\n                break;\n            }\n        }\n        if (!isin) {\n            distinct.push_back(str[i]);\n        }\n    }\n    return distinct.size();\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){\n\n    vector<char> distinct;\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i] || tolower(distinct[j])==tolower(str[i]))\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){\n\nvector<char> distinct={};\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (tolower(distinct[j])==tolower(str[i]))\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){\n\n    vector<char> distinct;\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (distinct[j]==str[i])\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){\n\nvector<char> distinct;\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin=false;\n        for (int j=0;j<distinct.size();j++)\n            if (tolower(distinct[j])==tolower(str[i]))\n                isin=true;\n        if (isin==false) distinct.push_back(str[i]);\n\n    }\n    return distinct.size();\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_distinct_characters(string str){\n\n    vector<char> distinct;\n    for (int i=0;i<str.size();i++)\n    {\n        bool isin = false;\n        for (int j=0;j<distinct.size();j++)\n            if (tolower(distinct[j]) == tolower(str[i]))\n                isin = true;\n        if (isin == false) distinct.push_back(str[i]);\n    }\n    return distinct.size();\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){\n\n    vector<int> out;\n    string current;\n    if (music_string.length() > 0)\n        music_string += ' ';\n    for (int i = 0; i < music_string.length(); i++)\n    {\n        if (music_string[i] == ' ')\n        {\n            if (current == \"o\") out.push_back(4);\n            if (current == \"o|\") out.push_back(2);\n            if (current == \".|\") out.push_back(1);\n            current = \"\";\n        }\n        else\n            current += music_string[i];\n    }\n    return out;\n}\n",
        "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    string current = \"\";\n    vector<int> out;\n\n    if (music_string.length() > 0) {\n        music_string += ' ';\n    }\n\n    for (int i = 0; i < music_string.length(); i++) {\n        if (music_string[i] == ' ') {\n            if (current == \"o\") {\n                out.push_back(4);\n            } else if (current == \"o|\") {\n                out.push_back(2);\n            } else if (current == \".|\") {\n                out.push_back(1);\n            }\n            current = \"\";\n        } else {\n            current += music_string[i];\n        }\n    }\n\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){\n\nstring current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){\n\nstring current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){\n\n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}",
        "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<int> parse_music(string music_string) {\n    vector<int> out;\n    string current = \"\";\n    if (music_string.length() > 0)\n        music_string = music_string + ' ';\n    for (int i = 0; i < music_string.length(); i++) {\n        if (music_string[i] == ' ') {\n            if (current == \"o\") out.push_back(4);\n            if (current == \"o|\") out.push_back(2);\n            if (current == \".|\") out.push_back(1);\n            current = \"\";\n        } else {\n            current += music_string[i];\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){\n\n    vector<int> out = {};\n    if (music_string.length() > 0)\n        music_string = music_string + ' ';\n    for (int i = 0; i < music_string.length(); i++) {\n        if (music_string[i] == ' ') {\n            if (current == \"o\") out.push_back(4);\n            if (current == \"o|\") out.push_back(2);\n            if (current == \".|\") out.push_back(1);\n            current = \"\";\n        }\n        else current += music_string[i];\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){\n\nstring current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}",
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <stdlib.h>\n\nvector<int> parse_music(string music_string) {\n    string current = \"\";\n    vector<int> out = {};\n    if (music_string.length() > 0)\n        music_string = music_string + ' ';\n    for (int i = 0; i < music_string.length(); i++) {\n        if (music_string[i] == ' ') {\n            if (current == \"o\") out.push_back(4);\n            if (current == \"o|\") out.push_back(2);\n            if (current == \".|\") out.push_back(1);\n            current = \"\";\n        } else {\n            current += music_string[i];\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> parse_music(string music_string){\n\n    string current=\"\";\n    vector<int> out={};\n    if (music_string.length()>0)\n        music_string=music_string+' ';\n    for (int i=0;i<music_string.length();i++)\n    {\n        if (music_string[i]==' ')\n        {\n            if (current==\"o\") out.push_back(4);\n            if (current==\"o|\") out.push_back(2);\n            if (current==\".|\") out.push_back(1);\n            current=\"\";\n        }\n        else current+=music_string[i];\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<str.length()-substring.length();i++)\n        if (str.substr(i,substring.length())==substring)\n            out+=1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str, string substring){\n\n    int out = 0;\n    if (str.length() == 0) return 0;\n    for (int i = 0; i < str.length() - substring.length(); i++)\n        if (str.substr(i, substring.length()) == substring)\n            out += 1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n\nint out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out++;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str, string substring){\n\n    int out = 0;\n    if (str.length() == 0) return 0;\n    for (int i = 0; i < str.length() - substring.length(); i++)\n        if (str.substr(i, substring.length()) == substring)\n            out += 1;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<str.length()-substring.length();i++)\n        if (str.substr(i,substring.length())==substring)\n            out+=1;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str, string substring){\n\n    int out = 0;\n    if (str.length() == 0) return 0;\n    for (int i = 0; i < str.length() - substring.length(); i++)\n        if (str.substr(i, substring.length()) == substring)\n            out += 1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n\n    int out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str, string substring){\n    int out = 0;\n    if (str.length() == 0) return 0;\n    for (int i = 0; i < str.length() - substring.length(); i++)\n        if (str.substr(i, substring.length()) == substring)\n            out += 1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint how_many_times(string str,string substring){\n\nint out=0;\n    if (str.length()==0) return 0;\n    for (int i=0;i<str.length()-substring.length();i++)\n    if (str.substr(i,substring.length())==substring)\n        out+=1;\n    return out;\n}"
    ],
    [
        "#include <iostream>\n#include <string>\n#include <map>\n\nusing namespace std;\n\nstring sort_numbers(string numbers) {\n    map<string, int> tonum = {\n        {\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}\n    };\n    map<int, string> numto = {\n        {0, \"zero\"}, {1, \"one\"}, {2, \"two\"}, {3, \"three\"}, {4, \"four\"}, {5, \"five\"}, {6, \"six\"}, {7, \"seven\"}, {8, \"eight\"}, {9, \"nine\"}\n    };\n    int count[10] = {0};\n    for (int i = 0; i < 10; i++)\n        count[i] = 0;\n    string out = \"\", current = \"\";\n    if (numbers.length() >",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n\nmap<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n\nmap<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n\nmap<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n\nmap<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n\nmap<string,int> tonum = {{\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\nmap<int, string> numto = {{0, \"zero\"}, {1, \"one\"}, {2, \"two\"}, {3, \"three\"}, {4, \"four\"}, {5, \"five\"}, {6, \"six\"}, {7, \"seven\"}, {8, \"eight\"}, {9, \"nine\"}};\nint count[10];\nfor (int i = 0; i < 10; i++)\n    count[i] = 0;\nstring out = \"\", current = \"\";\nif (",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n\nmap<string,int> tonum = {\n    {\"zero\", 0},\n    {\"one\", 1},\n    {\"two\", 2},\n    {\"three\", 3},\n    {\"four\", 4},\n    {\"five\", 5},\n    {\"six\", 6},\n    {\"seven\", 7},\n    {\"eight\", 8},\n    {\"nine\", 9}\n};\n\nmap<int, string> numto = {\n    {0, \"zero\"},\n    {1, \"one\"},\n    {2, \"two\"},\n    {3, \"three\"},\n    {4, \"four\"},\n    {5, \"five\"},\n    {6, \"six\"},\n    {7, \"seven\"},\n    {8, \"eight\"},\n    {9, \"nine\"}\n};",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n\nmap<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n\n    map<string,int> tonum = {{\"zero\", 0}, {\"one\", 1}, {\"two\", 2}, {\"three\", 3}, {\"four\", 4}, {\"five\", 5}, {\"six\", 6}, {\"seven\", 7}, {\"eight\", 8}, {\"nine\", 9}};\n    map<int, string> numto = { {0, \"zero\"}, {1, \"one\"}, {2, \"two\"}, {3, \"three\"}, {4, \"four\"}, {5, \"five\"}, {6, \"six\"}, {7, \"seven\"}, {8, \"eight\"}, {9, \"nine\"} };\n    int count[10];\n    for (int i = 0; i < 10; i++)\n        count[i] = 0;\n    string out = \"\", current",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring sort_numbers(string numbers){\n\nmap<string,int> tonum={{\"zero\",0},{\"one\",1},{\"two\",2},{\"three\",3},{\"four\",4},{\"five\",5},{\"six\",6},{\"seven\",7},{\"eight\",8},{\"nine\",9}};\n    map<int,string> numto={{0,\"zero\"},{1,\"one\"},{2,\"two\"},{3,\"three\"},{4,\"four\"},{5,\"five\"},{6,\"six\"},{7,\"seven\"},{8,\"eight\"},{9,\"nine\"}};\n    int count[10];\n    for (int i=0;i<10;i++)\n        count[i]=0;\n    string out=\"\",current=\"\";\n    if (numbers.length()>0) numbers=numbers+' ';\n    for (int i=0;"
    ],
    [
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<float> find_closest_elements(vector<float> numbers) {\n    vector<float> out;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (out.size() == 0 || abs(numbers[i] - numbers[j]) > abs(out[0] - out[1])) {\n                out = {numbers[i], numbers[j]};\n            }\n        }\n    }\n    if (out[0] > out[1]) {\n        out = {out[1], out[0]};\n    }\n    return out;\n}\n\nint main() {\n    vector<float> numbers = {1.0, 2.0, 3.0, 4.0, 5.0, 2.2};\n    vector<float> closest = find_closest_elements(numbers);\n    cout",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n\nvector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}\n",
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n#include <algorithm>\n#include <stdlib.h>\n\nvector<float> find_closest_elements(vector<float> numbers) {\n    vector<float> out = {};\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (out.size() == 0 || abs(numbers[i] - numbers[j]) > abs(out[0] - out[1])) {\n                out = {numbers[i], numbers[j]};\n            }\n        }\n    }\n    if (out[0] > out[1]) {\n        out = {out[1], out[0]};\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n\n    vector<float> out = {};\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (out.size() == 0 || abs(numbers[i] - numbers[j]) > abs(out[0] - out[1])) {\n                out = {numbers[i], numbers[j]};\n            }\n        }\n    }\n    if (out[0] > out[1]) {\n        out = {out[1], out[0]};\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n\n    vector<float> out;\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 || abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}",
        "#include <cmath>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<float> find_closest_elements(vector<float> numbers) {\n    vector<float> out;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (out.size() == 0 || abs(numbers[i] - numbers[j]) > abs(out[0] - out[1])) {\n                out = {numbers[i], numbers[j]};\n            }\n        }\n    }\n    if (out[0] > out[1]) {\n        out = {out[1], out[0]};\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n\nvector<float> out={};\n    for (int i=0;i<numbers.size();i++)\n    for (int j=i+1;j<numbers.size();j++)\n        if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n            out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nvector<float> find_closest_elements(vector<float> numbers) {\n    vector<float> out;\n    for (int i = 0; i < numbers.size(); i++) {\n        for (int j = i + 1; j < numbers.size(); j++) {\n            if (out.empty() || abs(numbers[i] - numbers[j]) > abs(out[0] - out[1])) {\n                out = {numbers[i], numbers[j]};\n            }\n        }\n    }\n    if (out[0] > out[1]) {\n        out = {out[1], out[0]};\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n\n    vector<float> out;\n    for (int i = 0; i < numbers.size(); i++)\n        for (int j = i + 1; j < numbers.size(); j++)\n            if (out.empty() || abs(numbers[i] - numbers[j]) > abs(out[0] - out[1]))\n                out = {numbers[i], numbers[j]};\n    if (out[0] > out[1])\n        out = {out[1], out[0]};\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> find_closest_elements(vector<float> numbers){\n    vector<float> out;\n    for (int i=0;i<numbers.size();i++)\n        for (int j=i+1;j<numbers.size();j++)\n            if (out.size()==0 or abs(numbers[i]-numbers[j])<abs(out[0]-out[1]))\n                out={numbers[i],numbers[j]};\n    if (out[0]>out[1])\n        out={out[1],out[0]};\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){\n\n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]<min) min=numbers[i];\n        if (numbers[i]>max) max=numbers[i];\n    }\n    for (int i=0;i<numbers.size();i++)\n    {\n        numbers[i]=(numbers[i]-min)/(max-min); // Fixed: Corrected the division operation\n    }\n    return numbers;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){\n\n    float min = numeric_limits<float>::max(), max = numeric_limits<float>::min();\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){\n\nfloat min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min); // Fixed division by max+min to max-min\n    return numbers;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){\n\nfloat min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min); // Fixed the division to correct the range\n    return numbers;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){\n\n    float min = numeric_limits<float>::max(), max = numeric_limits<float>::min();\n    for (int i = 0; i < numbers.size(); i++) {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] > max) max = numbers[i];\n    }\n    for (int i = 0; i < numbers.size(); i++) {\n        numbers[i] = (numbers[i] - min) / (max - min);\n    }\n    return numbers;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){\n\n    float min = *min_element(numbers.begin(), numbers.end());\n    float max = *max_element(numbers.begin(), numbers.end());\n\n    for (int i = 0; i < numbers.size(); i++)\n        numbers[i] = (numbers[i] - min) / (max - min);\n\n    return numbers;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){\n\n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]<min) min=numbers[i];\n        if (numbers[i]>max) max=numbers[i];\n    }\n    for (int i=0;i<numbers.size();i++)\n    {\n        numbers[i]=(numbers[i]-min)/(max-min);\n    }\n    return numbers;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){\n\n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (numbers[i]<min) min=numbers[i];\n        if (numbers[i]>max) max=numbers[i];\n    }\n    for (int i=0;i<numbers.size();i++)\n    {\n        numbers[i]=(numbers[i]-min)/(max-min);\n    }\n    return numbers;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){\n\n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min); // Fixed the division to be correct\n    return numbers;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> rescale_to_unit(vector<float> numbers){\n\n    float min=100000,max=-100000;\n    for (int i=0;i<numbers.size();i++)\n        {\n            if (numbers[i]<min) min=numbers[i];\n            if (numbers[i]>max) max=numbers[i];\n        }\n    for (int i=0;i<numbers.size();i++)\n        numbers[i]=(numbers[i]-min)/(max-min); // Fixed the operator misuse\n    return numbers;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n        anyone=*it;\n        if(anyone.type() == typeid(int))\n            out.push_back(boost::any_cast<int>(anyone));\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n        anyone = *it;\n        if(anyone.type() == typeid(int))\n            out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n        anyone = *it;\n        if(anyone.type() == typeid(int))\n            out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( boost::any_cast<int>(anyone) != boost::any_cast<int>(anyone) )\n           out.push_back(boost::any_cast<int>(anyone));\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n\nlist_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( boost::any_cast<int>(&anyone) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n        anyone=*it;\n        if( anyone.type() == typeid(int) )\n            out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n\nlist_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( anyone.type() == typeid(int) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n        anyone=*it;\n        if( anyone.type() == typeid(int) )\n            out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n\nlist_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n         anyone=*it;\n        if( boost::any_cast<int>(&anyone) )\n           out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<boost/any.hpp>\n#include<list>\ntypedef std::list<boost::any> list_any;\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> filter_integers(list_any values){\n\n    list_any::iterator it;\n    boost::any anyone;\n    vector<int> out;\n    for (it=values.begin();it!=values.end();it++)\n    {\n        anyone=*it;\n        if(anyone.type() == typeid(int))\n            out.push_back(boost::any_cast<int>(*it));\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n\nreturn str.length();\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n\nreturn str.length();\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n\nreturn str.length();\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n\nreturn str.length();\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n\nreturn str.length();\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n    return str.length();\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n\nreturn str.length();\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n\nreturn str.length();\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n\nreturn str.length();\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint strlen(string str){\n\nreturn str.length();\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n\n    int i=2;\n    while (i*i<=n)\n        if (n-i==0) return  n/i;\n        else i++;\n    return 1;\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n\n    for (int i=2;i*i<=n;i++)\n        if (n-i==0) return  n/i;\n    return 1;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n\nfor (int i=2;i*i<=n;i++)\n        if (n-i==0) return  n/i;\n    return 1;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n\n    int i = 2;\n    while (i * i <= n) {\n        if (n - i == 0) return n / i;\n        i++;\n    }\n    return 1;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n\nfor (int i=2;i*i<=n;i++)\n        if (n%i==0) return  n/i;\n    return 1;\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n\n    int i=2;\n    while (i*i<=n) {\n        if (n-i==0) return  n/i;\n        i++;\n    }\n    return 1;\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n\n    for (int i=2;i*i<=n;i++)\n        if (n-i==0) return  n/i;\n    return 1;\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n\n    for (int i=2;i*i<=n;i++)\n        if (n-i==0) return  n/i;\n    return 1;\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n\n    for (int i=2;i*i<=n;i++)\n        if (n-i==0) return  n/i;\n    return 1;\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_divisor(int n){\n\n    for (int i=2;i*i<=n;i++)\n        if (n-i==0) return  n/i;\n    return 1;\n\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n\n    vector<int> out = {};\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0)\n        {\n            n = n / i;\n            out.push_back(i);\n            i--;\n        }\n    out.push_back(n);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n\n    vector<int> out = {};\n    int i = 2;\n    while (n > 1) {\n        if (n % i == 0) {\n            n /= i;\n            out.push_back(i);\n        } else {\n            i++;\n        }\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n\n    vector<int> out = {};\n    int i = 2;\n    while (i * i <= n) {\n        if (n % i == 0) {\n            n /= i;\n            out.push_back(i);\n            i -= 1;\n        }\n        else {\n            i++;\n        }\n    }\n    if (n > 1) {\n        out.push_back(n);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n\nvector<int> out={};\n    for (int i=0;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n\nvector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n\nvector<int> out={};\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i-=1;\n        }\n    out.push_back(n);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n\n    vector<int> out={};\n    for (int i=0;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i--;\n        }\n    out.push_back(n);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n\n    vector<int> out;\n    for (int i=2;i*i<=n;i++)\n        if (n%i==0)\n        {\n            n=n/i;\n            out.push_back(i);\n            i--;\n        }\n    out.push_back(n);\n    return out;\n}",
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n#include <algorithm>\n#include <stdlib.h>\nvector<int> factorize(int n) {\n    vector<int> out;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) {\n            n /= i;\n            out.push_back(i);\n            i--;\n        }\n    out.push_back(n);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> factorize(int n){\n    vector<int> out;\n    int i = 2;\n    while (n > 1) {\n        if (n % i == 0) {\n            n /= i;\n            out.push_back(i);\n        } else {\n            i++;\n        }\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n\nvector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])!=has2.end())\n        out.push_back(numbers[i]);",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n\nvector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])!=has2.end())\n        out.push_back(numbers[i]);",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n\n    vector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])!=has2.end())\n        out.push_back(numbers[i]);",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n\nvector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])!=has2.end())\n        out.push_back(numbers[i]);",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> remove_duplicates(vector<int> numbers) {\n    vector<int> out;\n    vector<int> has1;\n    vector<int> has2;\n\n    for (int i = 0; i < numbers.size(); i++) {\n        if (find(has2.begin(), has2.end(), numbers[i]) != has2.end()) continue;\n        if (find(has1.begin(), has1.end(), numbers[i]) != has1.end()) {\n            has2.push_back(numbers[i]);\n        } else {\n            has1.push_back(numbers[i]);\n        }\n    }\n\n    for (int i = 0; i < numbers.size(); i++) {\n        if (find(has2.begin(), has2.end(), numbers[i]) != has2.end()) {\n            out.push_back(numbers[i]);\n        }\n    }\n\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n\nvector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])!=has2.end())\n        out.push_back(numbers[i]);",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n\n    vector<int> out;\n    vector<int> has1;\n    vector<int> has2;\n    for (int i=0;i<numbers.size();i++) {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end()) {\n            has2.push_back(numbers[i]);\n        } else {\n            has1.push_back(numbers[i]);\n        }\n    }\n    for (int i=0;i<numbers.size();i++) {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) {\n            out.push_back(numbers[i]);",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n\n    vector<int> out;\n    vector<int> has1;\n    vector<int> has2;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])!=has2.end())\n        out.push_back(numbers[i]);\n    return",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n\nvector<int> out={};\n    vector<int> has1={};\n    vector<int> has2={};\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])!=has2.end())\n        out.push_back(numbers[i]);",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> remove_duplicates(vector<int> numbers){\n\n    vector<int> out;\n    vector<int> has1;\n    vector<int> has2;\n    for (int i=0;i<numbers.size();i++)\n    {\n        if (find(has2.begin(),has2.end(),numbers[i])!=has2.end()) continue;\n        if (find(has1.begin(),has1.end(),numbers[i])!=has1.end())\n        {\n\n            has2.push_back(numbers[i]);\n        }\n        else has1.push_back(numbers[i]);\n    }\n    for (int i=0;i<numbers.size();i++)\n    if (find(has2.begin(),has2.end(),numbers[i])!=has2.end())\n        out.push_back(numbers[i]);"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring flip_case(string str){\n\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w+=32;}\n        else\n            if (w>=65 and w<=90){ w-=32;}\n        out=out+w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring flip_case(string str){\n\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w+=32;}\n        else\n            if (w>=65 and w<=90){ w-=32;}\n        out+=w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring flip_case(string str){\n\nstring out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (islower(w)) {w=toupper(w);}\n        else\n            if (isupper(w)) {w=tolower(w);}\n        out=out+w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring flip_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w+=32;}\n        else\n            if (w>=65 and w<=90){ w-=32;}\n        out=out+w;\n    }\n    return out;\n}",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring flip_case(string str) {\n    string out = \"\";\n    for (int i = 0; i < str.length(); i++) {\n        char w = str[i];\n        if (w >= 'a' && w <= 'z') {\n            w = w - 'a' + 'A';\n        } else if (w >= 'A' && w <= 'Z') {\n            w = w - 'A' + 'a';\n        }\n        out += w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring flip_case(string str){\n\nstring out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (islower(w)) {w=toupper(w);}\n        else\n            if (isupper(w)) {w=tolower(w);}\n        out=out+w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring flip_case(string str){\n\nstring out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (islower(w)) {w=toupper(w);}\n        else\n            if (isupper(w)) {w=tolower(w);}\n        out=out+w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring flip_case(string str){\n\nstring out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (islower(w)) {w=toupper(w);}\n        else\n            if (isupper(w)) {w=tolower(w);}\n        out=out+w;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring flip_case(string str){\n\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w+=32;}\n        else\n            if (w>=65 and w<=90){ w-=32;}\n        out=out+w;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring flip_case(string str){\n    string out=\"\";\n    for (int i=0;i<str.length();i++)\n    {\n        char w=str[i];\n        if (w>=97 and w<=122) {w+=32;}\n        else if (w>=65 and w<=90) { w-=32;}\n        out=out+w;\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out+=strings[i];\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n",
        "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nstring concatenate(vector<string> strings) {\n    string out;\n    for (int i = 0; i < strings.size(); i++) {\n        out += strings[i];\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out;\n    for (int i=0;i<strings.size();i++)\n        out+=strings[i];\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n    string out=\"\";\n    for (int i=0;i<strings.size();i++)\n        out+=strings[i];\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n\nstring out=\" \";\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring concatenate(vector<string> strings){\n\n    string out;\n    for (int i=0;i<strings.size();i++)\n        out=out+strings[i];\n    return out;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\nvector<string> out={};\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].compare(0, prefix.length(), prefix) != 0) out.push_back(strings[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())!=prefix) out.push_back(strings[i]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())!=prefix) out.push_back(strings[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\nvector<string> out;\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())!=prefix) out.push_back(strings[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())!=prefix) out.push_back(strings[i]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())!=prefix) out.push_back(strings[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())!=prefix) out.push_back(strings[i]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\nvector<string> out;\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())!=prefix) out.push_back(strings[i]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())!=prefix) out.push_back(strings[i]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> filter_by_prefix(vector<string> strings, string prefix){\n\n    vector<string> out;\n    for (int i=0;i<strings.size();i++)\n        if (strings[i].substr(0,prefix.length())!=prefix) out.push_back(strings[i]);\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n\n    vector<float> out;\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=0) out.push_back(l[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n\nvector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n\n    vector<float> out;\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=0) out.push_back(l[i]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n\nvector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=0) out.push_back(l[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n\nvector<float> out;\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=0) out.push_back(l[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n\nvector<float> out={};\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<float> get_positive(vector<float> l) {\n    vector<float> out;\n    copy_if(l.begin(), l.end(), back_inserter(out), [](float x) { return x >= 0; });\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n\n    vector<float> out;\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=0) out.push_back(l[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n\nvector<float> out;\n    for (int i=0;i<l.size();i++)\n        if (l[i]>0) out.push_back(l[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> get_positive(vector<float> l){\n\n    vector<float> out;\n    for (int i=0;i<l.size();i++)\n        if (l[i]>=0) out.push_back(l[i]);\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n\nif (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n\nif (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n\nif (n<1) return false;\n    for (long long i=1;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n\nif (n<1) return false;\n    for (long long i=1;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n\nif (n<1) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n\n    if (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n\nif (n < 2) return false; // Corrected condition to check for n < 2\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n\nif (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n\nif (n<2) return false;\n    for (long long i=2;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_prime(long long n){\n\nif (n<1) return false;\n    for (long long i=1;i*i<=n;i++)\n        if (n%i==0) return false;\n    return true;\n}"
    ],
    [
        "#include <cmath>\n#include <vector>\n\nusing namespace std;\n\ndouble poly(vector<double> xs, double x) {\n    double sum = 0;\n    int i;\n    for (i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs) {\n    double ans = 0;\n    double value;\n    value = poly(xs, ans);\n    while (abs(value) > 1e-6) {\n        double driv = 0;\n        for (int i = 1; i < xs.size(); i++) {\n            driv += xs[i] * pow(ans, i - 1) * i;\n        }\n        ans = value - ans / driv;\n        value = poly(xs, ans);\n    }\n    return ans;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\n\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n\n    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=value-ans/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\n\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n\n    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=value-ans/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n",
        "#include <iostream>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\ndouble poly(vector<double> xs, double x){\n    double sum = 0;\n    for (int i = 0; i < xs.size(); i++) {\n        sum += xs[i] * pow(x, i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n    double ans = 0;\n    double value = poly(xs, ans);\n    while (abs(value) > 1e-6) {\n        double driv = 0;\n        for (int i = 1; i < xs.size(); i++) {\n            driv += xs[i] * pow(ans, i - 1) * i;\n        }\n        ans = value - ans / driv;\n        value = poly(xs, ans);\n    }\n    return ans;\n}\n\nint main(){\n    vector<double> xs;\n    xs.push_back(1);\n    xs.push_back(2);",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\n\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n\n    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=value-ans/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\n\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n\n    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=value-ans/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n\n    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=value-ans/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n\n    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=value-ans/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n\n    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=value-ans/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\ndouble poly(vector<double> xs, double x){\n    double sum=0;\n    int i;\n    for (i=0;i<xs.size();i++)\n    {\n        sum+=xs[i]*pow(x,i);\n    }\n    return sum;\n}\n\ndouble find_zero(vector<double> xs){\n\n    double ans=0;\n    double value;\n    value=poly(xs,ans);\n    while (abs(value)>1e-6)\n    {\n        double driv=0;\n        for (int i=1;i<xs.size();i++)\n        {\n            driv+=xs[i]*pow(ans,i-1)*i;\n        }\n        ans=value-ans/driv;\n        value=poly(xs,ans);\n    }\n    return ans;\n\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n\n    vector<int> third;\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n\n    vector<int> out;\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n\nvector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n\nvector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_third(vector<int> l){\n\n    vector<int> third={};\n    int i;\n    for (i=0;i*3<l.size();i++)\n        third.push_back(l[i*3]);\n\n    vector<int> out={};\n    for (i=0;i<l.size();i++)\n    {\n        if (i%3==0) {out.push_back(third[i/3]);}\n        else out.push_back(l[i]);\n    }\n    return out;\n\n}",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> sort_third(vector<int> l) {\n    vector<int> third;\n    for (int i = 0; i * 3 < l.size(); i++)\n        third.push_back(l[i * 3]);\n\n    vector<int> out;\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 3 == 0)\n            out.push_back(third[i / 3]);\n        else\n            out.push_back(l[i]);\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n    sort(l.begin(), l.end());\n    vector<int>::iterator it;\n    it = unique(l.begin(), l.end());\n    l.resize(it - l.begin());\n    return l;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n\nsort(l.begin(),l.end());\n    vector<int>::iterator it;\n    it = unique(l.begin(), l.end());\n    l.resize(it - l.begin());\n    return l;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n\nsort(l.begin(),l.end());\nvector<int> temp;\nfor(int i=0; i<l.size(); i++){\nif(i==0 || l[i]!=l[i-1]){\ntemp.push_back(l[i]);\n}\n}\nreturn temp;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n\nsort(l.begin(),l.end());\nvector<int>::iterator it = unique(l.begin(), l.end());\nl.resize(it - l.begin());\nreturn l;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n\nsort(l.begin(),l.end());\nvector<int>::iterator it = unique(l.begin(), l.end());\nl.erase(it, l.end());\nreturn l;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n\nsort(l.begin(),l.end());\nvector<int>::iterator it = unique(l.begin(), l.end());\nl.erase(it, l.end());\nreturn l;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n\nsort(l.begin(),l.end());\n    vector<int>::iterator it = unique(l.begin(), l.end());\n    l.erase(it, l.end());\n    return l;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n    sort(l.begin(), l.end());\n    vector<int>::iterator it = unique(l.begin(), l.end());\n    l.erase(it, l.end());\n    return l;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n\nsort(l.begin(),l.end());\nvector<int>::iterator it;\nfor(it = l.begin(); it != l.end() - 1; it++){\n    if(*it == *(it + 1)){\n        l.erase(it + 1);\n    }\n}\nreturn l;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique(vector<int> l){\n\n    sort(l.begin(),l.end());\n    l.erase(unique(l.begin(), l.end()), l.end());\n    return l;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n\nfloat max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n\nfloat max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n    if (max<l[i]) max=l[i];\n  return max;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i];\n  return max;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n    if (max<l[i]) max=l[i];\n  return max;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n\nfloat max=-10000;\n  for (int i=0;i<l.size();i++)\n  if (max<l[i]) max=l[i]; // Fixed the comparison operator to check for minimum\n  return max;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n    if (max<l[i]) max=l[i];\n  return max;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat max_element(vector<float> l){\n\n  float max=-10000;\n  for (int i=0;i<l.size();i++)\n    if (max<l[i]) max=l[i];\n  return max;\n\n}\n",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nfloat max_element(vector<float> l){\n    return *max_element(l.begin(), l.end());\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n\nint count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 or i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n\nint count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 and i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count++;\n            q=q/10;\n        }\n    } \n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n\nint count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 and i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count++;\n            q/=10;\n        }\n    } \n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n\nint count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 and i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count++;\n            q/=10;\n        }\n    } \n    return count;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n\nint count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 and i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count++;\n            q/=10;\n        }\n    } \n    return count;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n\nint count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 and i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count++;\n            q/=10;\n        }\n    } \n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n\nint count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 and i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n\nint count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 and i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n\nint count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 and i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count++;\n            q=q/10;\n        }\n    } \n    return count;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fizz_buzz(int n){\n\nint count=0;\n    for (int i=0;i<n;i++)\n    if (i%11==0 and i%13==0)\n    {\n        int q=i;\n        while (q>0)\n        {\n            if (q%10==7) count+=1;\n            q=q/10;\n        }\n    } \n    return count;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n\nvector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(l.begin(),l.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n\nvector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(l.begin(),l.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n\n    vector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(l.begin(),l.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<float> sort_even(vector<float> l) {\n    vector<float> out;\n    vector<float> even;\n\n    for (int i = 0; i < l.size(); i++) {\n        if (i % 2 == 0) {\n            even.push_back(l[i]);\n        } else {\n            out.push_back(l[i]);\n        }\n    }\n\n    sort(even.begin(), even.end());\n\n    for (int i = 0; i < even.size(); i++) {\n        out.push_back(even[i]);\n    }\n\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n\n    vector<float> out;\n    vector<float> even;\n    for (int i=0; i*2<l.size(); i++)\n        even.push_back(l[i*2]);\n    sort(l.begin(), l.end());\n    for (int i=0; i<l.size(); i++) {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n\n    vector<float> out;\n    vector<float> even;\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(l.begin(),l.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n\nvector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(l.begin(),l.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n\nvector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(), even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n\nvector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(), even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<float> sort_even(vector<float> l){\n\nvector<float> out={};\n    vector<float> even={};\n    for (int i=0;i*2<l.size();i++)\n        even.push_back(l[i*2]);\n    sort(even.begin(), even.end());\n    for (int i=0;i<l.size();i++)\n    {\n        if (i%2==0) out.push_back(even[i/2]);\n        if (i%2==1) out.push_back(l[i]);\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\n\nstring encode_cyclic(string s){\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s){\n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        output=output+x;\n    }\n    return output;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        output=output+x;\n    }\n    return output;",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        output=output+x;\n    }\n    return output;",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\n\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        output=output+x;\n    }\n    return output",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring encode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++) {\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x.substr(1) + x[0];\n        output = output + x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++) {\n        x = s.substr(i * 3, 3);\n        output = output + x;\n    }\n    return output;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        output=output+x;\n    }\n    return output;",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n   int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr(1)+x[0];\n        output=output+x;\n    }\n    return output;\n}\n\n\nstring decode_cyclic(string s){ \n    int l=s.length();\n    int num=(l+2)/3;\n    string x,output;\n    int i;\n    for (i=0;i*3<l;i++)\n    {\n        x=s.substr(i*3,3);\n        if (x.length()==3) x=x.substr",
        "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring encode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++) {\n        x = s.substr(i * 3, 3);\n        if (x.length() == 3) x = x.substr(1) + x[0];\n        output += x;\n    }\n    return output;\n}\n\nstring decode_cyclic(string s) {\n    int l = s.length();\n    int num = (l + 2) / 3;\n    string x, output;\n    int i;\n    for (i = 0; i * 3 < l; i++) {\n        x = s.substr(i * 3, 3);\n        output += x;\n    }\n    return output;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n\n    int f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=1;w*w<f1;w++)\n            if (f1%w==0)\n            {\n                isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n\nint f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=1;w*w<f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n\nint f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=1;w*w<f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n\n    int f1, f2, m;\n    f1 = 1; f2 = 2;\n    int count = 0;\n    while (count < n)\n    {\n        f1 = f1 + f2;\n        m = f1; f1 = f2; f2 = m;\n        bool isprime = true;\n        for (int w = 1; w * w < f1; w++)\n        {\n            if (f1 % w == 0)\n            {\n                isprime = false;\n                break;\n            }\n        }\n        if (isprime)\n            count++;\n        if (count == n)\n            return f1;\n    }\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n\nint f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=1;w*w<f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n\nint f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=1;w*w<f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n\nint f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=1;w*w<f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n\nint f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=1;w*w<f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n\nint f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=1;w*w<f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint prime_fib(int n){\n\nint f1,f2,m;\n    f1=1;f2=2;\n    int count=0;\n    while (count<n)\n    {\n        f1=f1+f2;\n        m=f1;f1=f2;f2=m;\n        bool isprime=true;\n        for (int w=1;w*w<f1;w++)\n            if (f1%w==0)\n            {\n             isprime=false; break;\n            }\n        if (isprime) count+=1;\n        if (count==n) return f1;\n    }\n\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n\n    for (int i=0;i<l.size()-1;i++)\n        for (int j=i+1;j<l.size();j++)\n            for (int k=j+1;k<l.size();k++)\n                if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n\nfor (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        for (int j=i+1;j<l.size();j++)\n            for (int k=j+1;k<l.size();k++)\n                if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n\nfor (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n\nfor (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n\n    for (int i=0; i < l.size() - 2; i++) {\n        for (int j=i+1; j < l.size() - 1; j++) {\n            for (int k=j+1; k < l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) return true;\n            }\n        }\n    }\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n\n    for (int i=0; i<l.size(); i++) {\n        for (int j=i+1; j<l.size(); j++) {\n            for (int k=j+1; k<l.size(); k++) {\n                if (l[i]+l[j]+l[k] == 0) return true;\n            }\n        }\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n\n    for (int i=0;i<l.size();i++)\n        for (int j=i+1;j<l.size();j++)\n            for (int k=j+1;k<l.size();k++)\n                if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n\n    for (int i=0; i<l.size()-2; i++) {\n        for (int j=i+1; j<l.size()-1; j++) {\n            for (int k=j+1; k<l.size(); k++) {\n                if (l[i] + l[j] + l[k] == 0) {\n                    return true;\n                }\n            }\n        }\n    }\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool triples_sum_to_zero(vector<int> l){\n\nfor (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    for (int k=j+1;k<l.size();k++)\n        if (l[i]+l[j]+l[k]==0) return true;\n    return false;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n\nreturn 0;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n\nreturn n*n;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n\nreturn 0;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    int i, j, k, count = 0;\n    int cars[n][2];\n\n    for (i = 0; i < n; i++) {\n        cars[i][0] = 0;\n        cars[i][1] = 0;\n    }\n\n    for (i = 0; i < n; i++) {\n        cars[i][0] = rand() % 100;\n        cars[i][1] = rand() % 100;\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = i + 1; j < n; j++) {\n            int dx = abs(cars[i][0] - cars[j][0]);\n            int dy = abs(cars[i][1] - cars[j][1]);\n            int d = sqrt",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n\nreturn n*n;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    int i, j, k, count = 0;\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            if (i != j) {\n                for (k = 0; k < n; k++) {\n                    if (k != i && k != j) {\n                        if (i < j) {\n                            if (k > i && k < j) {\n                                count++;\n                            }\n                        } else {\n                            if (k > j && k < i) {\n                                count++;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    return n*n*n;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n\nreturn n*n;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n    int i, j, k, l, m, nc;\n    nc = 0;\n    for (i = 1; i <= n; i++) {\n        for (j = i + 1; j <= n; j++) {\n            for (k = j + 1; k <= n; k++) {\n                for (l = k + 1; l <= n; l++) {\n                    for (m = l + 1; m <= n; m++) {\n                        if (i < j && j < k && k < l && l < m) {\n                            nc++;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return nc;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint car_race_collision(int n){\n\nreturn 0;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_vector(vector<int> v){\n    for (int i=0;i<v.size();i++)\n        v[i]++;\n    return v;\n}\n",
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n#include <algorithm>\n#include <stdlib.h>\n\nvector<int> incr_vector(vector<int> l) {\n    for (int i = 0; i < l.size(); i++)\n        l[i]++;\n    return l;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_vector(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]++;\n    return l;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_vector(vector<int> v){\n    for (int i=0;i<v.size();i++)\n        v[i]++;\n    return v;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_vector(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]++;\n    return l;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_vector(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]++;\n    return l;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n\n    for (int i=0;i<l.size();i++)\n        l[i]++;\n    return l;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_list(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        l[i]++;\n    return l;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_vector(vector<int> l){\n\nfor (int i=0;i<l.size();i++)\n        l[i]++;\n    return l;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> incr_vector(vector<int> l){\n\nfor (int i=0;i<l.size();i++)\n        l[i]++;\n    return l;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n\nfor (int i=0;i<l.size();i++)\n    for (int j=i+1;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n\n    for (int i=0;i<l.size();i++)\n        for (int j=i;j<l.size();j++)\n            if (l[i]+l[j]==0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n\n    for (int i=0;i<l.size();i++)\n        for (int j=i;j<l.size();j++)\n            if (l[i]+l[j]==0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n\nfor (int i=0;i<l.size();i++)\n    for (int j=i;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}",
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nbool pairs_sum_to_zero(vector<int> l) {\n    for (int i = 0; i < l.size(); i++) {\n        for (int j = i + 1; j < l.size(); j++) {\n            if (l[i] + l[j] == 0) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n\n    for (int i=0;i<l.size();i++)\n        for (int j=i;j<l.size();j++)\n            if (l[i]+l[j]==0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n    for (int i=0;i<l.size();i++)\n        for (int j=i;j<l.size();j++)\n            if (l[i]+l[j]==0) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n\nfor (int i=0;i<l.size();i++)\n    for (int j=i;j<l.size();j++)\n    if (l[i]+l[j]==0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool pairs_sum_to_zero(vector<int> l){\n\n    for (int i=0;i<l.size();i++)\n        for (int j=i;j<l.size();j++)\n            if (l[i]+l[j]==0) return true;\n    return false;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n\nstring out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n\nstring out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x-base;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x-base;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x-base;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x, int base) {\n    string out = \"\";\n    while (x > 0) {\n        out = to_string(x % base) + out;\n        x = x - base;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n\nstring out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x-base;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x-base;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base; // Fix: Divide x by base instead of subtracting base\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n    string out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x-base;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring change_base(int x,int base){\n\nstring out=\"\";\n    while (x>0)\n    {\n        out=to_string(x%base)+out;\n        x=x/base;\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n\nreturn sqrt(3) * (a*h);\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n\nreturn sqrt(a*a+h*h);\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n\nreturn (a*h)/2;\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a, float h) {\n    return (a * h) / 2;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n\nreturn (a*h)/2;\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a, float h){\n    return (a*h)*2;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n\nreturn sqrt(a*a + h*h);\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n\nreturn (a*h)/2;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float h){\n\nreturn (a*h)/2;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a, float h){\n\nreturn sqrt(a*a + h*h);\n\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n\nint f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n\nint f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-2];\n    }\n    return f[n];\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-2];\n    }\n    return f[n];\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n\nint f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-2];\n    }\n    return f[n];\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib4(int n){\n\n    int f[100];\n    f[0]=0;\n    f[1]=0;\n    f[2]=2;\n    f[3]=0;\n    for (int i=4;i<=n;i++)\n    {\n        f[i]=f[i-1]+f[i-2]+f[i-3]+f[i-4];\n    }\n    return f[n];\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n\nsort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()-1/2]);\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n\nsort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()-1/2]);\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n\nsort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()-1/2]);\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n\nsort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()-1/2]);\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    if (l.size() % 2 == 1) return l[l.size() / 2];\n    return 0.5 * (l[l.size() / 2] + l[l.size() - 1 / 2]);\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()-1/2]);\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n\n    sort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()-1/2]);\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n\nsort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()-1/2]);\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n    sort(l.begin(), l.end());\n    if (l.size() % 2 == 1) return l[l.size() / 2];\n    return 0.5 * (l[l.size() / 2] + l[l.size() - 1 / 2]);\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nfloat median(vector<float> l){\n\nsort(l.begin(),l.end());\n    if (l.size()%2==1) return l[l.size()/2];\n    return 0.5*(l[l.size()/2]+l[l.size()-1/2]);\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    string pr(text);\n    reverse(pr.begin(), pr.end());\n    return text == pr;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    return equal(text.begin(), text.end(), text.rbegin());\n}",
        "#include <iostream>\n#include <string>\nusing namespace std;\n\nbool is_palindrome(string text) {\n    string pr(text.rbegin(), text.rend());\n    return pr == text;\n}\n\nint main() {\n    cout << boolalpha;\n    cout << is_palindrome(\"\") << endl;\n    cout << is_palindrome(\"aba\") << endl;\n    cout << is_palindrome(\"aaaaa\") << endl;\n    cout << is_palindrome(\"zbcd\") << endl;\n    return 0;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n    return equal(text.begin(), text.end(), text.rbegin());\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n\n    string pr(text.rbegin(), text.rend());\n    return pr == text;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n\n    string pr(text.rbegin(), text.rend());\n    return pr == text;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n\n    string pr(text.rbegin(), text.rend());\n    return pr == text;\n}\n",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool is_palindrome(string text){\n    string pr(text.rbegin(), text.rend());\n    return pr == text;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n\n    return equal(text.begin(), text.end(), text.rbegin());\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_palindrome(string text){\n\nstring pr(text.rbegin(),text.rend());\n    return pr==text;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n\n    int out=0;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n\nint out=0;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n\nint out=0;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=0;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n\nint out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n, int p) {\n    int out = 1;\n    for (int i = 0; i < n; i++) {\n        out = (out * 2) % p;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n    int out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint modp(int n,int p){\n\nint out=1;\n    for (int i=0;i<n;i++)\n        out=(out*2)%p;\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)s[i];   \n        out=out+(char)w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n\nstring out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring encode_shift(string s) {\n    string out;\n    for (int i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 5 - (int)'a') % 26 + (int)'a';\n        out += (char)w;\n    }\n    return out;\n}\n\nstring decode_shift(string s) {\n    string out;\n    for (int i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 21 - (int)'a') % 26 + (int)s[i];\n        out += (char)w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)s[i];   \n        out=out+(char)w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)s[i];   \n        out=out+(char)w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n\nstring out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)s[i];   \n        out=out+(char)w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)s[i];   \n        out=out+(char)w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)s[i];   \n        out=out+(char)w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+5-(int)'a')%26+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\nstring decode_shift(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+21-(int)'a')%26+(int)s[i];   \n        out=out+(char)w;\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n\nstring out=\"\";\n    string vowels=\"AEIOUWYaeiouwy\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n\nstring out=\"\";\n    string vowels=\"AEIOUWYaeiouwy\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out+=text[i]; // Fixed: Added '+' operator to concatenate characters\n    return out;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n\nstring out=\"\";\n    string vowels=\"AEIOUWYaeiouwy\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n\nstring out=\"\";\n    string vowels=\"AEIOUWYaeiouwy\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out+=text[i];\n    return out;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n\n    string out=\"\";\n    string vowels=\"AEIOUWYaeiouwy\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n\n    string out=\"\";\n    string vowels=\"AEIOUWYaeiouwy\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n\n    string out=\"\";\n    string vowels=\"AEIOUWYaeiouwy\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out+=text[i];\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n\nstring out=\"\";\n    string vowels=\"AEIOUWYaeiouwy\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out+=text[i]; // Fixed bug: Added += operator to append the character to the output string\n    return out;\n\n}",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring remove_vowels(string text) {\n    string vowels = \"AEIOUWYaeiouwy\";\n    string out = \"\";\n    for (int i = 0; i < text.length(); i++) {\n        if (find(vowels.begin(), vowels.end(), text[i]) == vowels.end()) {\n            out += text[i];\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring remove_vowels(string text){\n\nstring out=\"\";\n    string vowels=\"AEIOUWYaeiouwy\";\n    for (int i=0;i<text.length();i++)\n        if (find(vowels.begin(),vowels.end(),text[i])==vowels.end())\n            out=out+text[i];\n    return out;\n\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int> l, int t) {\n    return all_of(l.begin(), l.end(), [t](int x) { return x < t; });\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int> l, int t){\n    return all_of(l.begin(), l.end(), [t](int x) { return x < t; });\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int> l, int t){\n\n    for (int i = 0; i < l.size(); i++)\n        if (l[i] >= t)\n            return false;\n\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int>l, int t){\n\n    return all_of(l.begin(), l.end(), [t](int x){return x < t;});\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int> l, int t){\n    return all_of(l.begin(), l.end(), [t](int x) { return x < t; });\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int> l, int t){\n    return all_of(l.begin(), l.end(), [t](int x){return x < t;});\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int> l, int t){\n    return all_of(l.begin(), l.end(), [t](int x){ return x < t; });\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int> l, int t){\n\n    for (int i = 0; i < l.size(); i++)\n        if (l[i] >= t)\n            return false;\n\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int> l, int t) {\n    return all_of(l.begin(), l.end(), [t](int x) { return x < t; });\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool below_threshold(vector<int> l, int t){\n\n    for (int i = 0; i < l.size(); i++)\n        if (l[i] >= t) return false;\n\n    return true;\n}"
    ],
    [
        "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n\nreturn x+y;\n}\n",
        "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n\nreturn x+y;\n}",
        "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n    return x+y+y+x;\n}",
        "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n\nreturn x+y;\n}\n",
        "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n\nreturn x+y;\n}\n",
        "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n\nreturn x+y;\n}\n",
        "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n\nreturn x+y;\n}",
        "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n\nreturn x+y;\n}\n",
        "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n\nreturn x+y;\n}",
        "#include<stdio.h>\n#include<stdlib.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\nint add(int x,int y){\n\nreturn x+y;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0, string s1) {\n    return equal(s0.begin(), s0.end(), s1.begin());\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    int count = 0;\n    for (int i=0;i<s0.length();i++) {\n        if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n            return false;\n        count++;\n    }\n    return count == s0.length();\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0, string s1) {\n    if (s0.length() != s1.length())\n        return false;\n    for (int i = 0; i < s0.length(); i++) {\n        if (s0[i] != s1[i])\n            return false;\n    }\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n\nfor (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    return true;   \n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n    if (s0.length() != s1.length())\n        return false;\n    for (int i=0;i<s0.length();i++)\n        if (s0[i] != s1[i])\n            return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0, string s1){\n    int count = 0;\n    for (int i=0;i<s0.length();i++)\n        if (find(s1.begin(), s1.end(), s0[i]) != s1.end())\n            count++;\n    if (count == s0.length())\n        return true;\n    else\n        return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n\nfor (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    return true;   \n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0,string s1){\n\nfor (int i=0;i<s0.length();i++)\n    if (find(s1.begin(),s1.end(),s0[i])==s1.end())\n        return false;\n    return true;   \n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0, string s1) {\n    int i = 0;\n    while (i < s0.length()) {\n        if (find(s1.begin(), s1.end(), s0[i]) == s1.end()) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool same_chars(string s0, string s1) {\n    int i = 0;\n    int j = 0;\n    while (i < s0.length() && j < s1.length()) {\n        if (s0[i] != s1[j])\n            return false;\n        i++;\n        j++;\n    }\n    return true;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;f[2]=2;\n    for (int i=3;i<=n; i++)\n        f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n    int f[1000];\n    f[0]=0;f[1]=1;f[2]=2;\n    for (int i=3;i<=n; i++)\n        f[i]=f[i-1]+f[i-2];\n    return f[n];\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n\n    int f[1000];\n    f[0]=0;f[1]=1;f[2]=2;\n    for (int i=3;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n\nint f[1000];\n    f[0]=0;f[1]=1;f[2]=2;\n    for (int i=3;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n\n    int f[1000];\n    f[0]=0;f[1]=1;f[2]=2;\n    for (int i=3;i<=n; i++)\n        f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n\n    int f[1000];\n    f[0]=0;f[1]=1;f[2]=2;\n    for (int i=3;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n\n    int f[1000];\n    f[0]=0;f[1]=1;f[2]=2;\n    for (int i=3;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n\n    int f[1000];\n    f[0]=0;f[1]=1;f[2]=2;\n    for (int i=3;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n\n    int f[1000];\n    f[0]=0;f[1]=1;f[2]=2;\n    for (int i=3;i<=n; i++)\n        f[i]=f[i-1]+f[i-2];\n    return f[n];\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fib(int n){\n\n    int f[1000];\n    f[0]=0;f[1]=1;f[2]=2;\n    for (int i=3;i<=n; i++)\n    f[i]=f[i-1]+f[i-2];\n    return f[n];\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='>') level++;\n        if (brackets[i]=='<') level--;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool correct_bracketing(const string& brackets) {\n    int level = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '>') level += 1;\n        if (brackets[i] == '<') level -= 1;\n        if (level < 0) return false;\n    }\n    if (level != 0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level = 0;\n    for (int i = 0; i < brackets.length(); i++) {\n        if (brackets[i] == '>') level++;\n        if (brackets[i] == '<') level--;\n        if (level < 0) return false;\n    }\n    if (level != 0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='>') level++;\n        if (brackets[i]=='<') level--;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='>') level+=1;\n        if (brackets[i]=='<') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='>') level++;\n        if (brackets[i]=='<') level--;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='>') level++;\n        if (brackets[i]=='<') level--;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='>') level+=1;\n        if (brackets[i]=='<') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='>') level+=1;\n        if (brackets[i]=='<') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='>') level+=1;\n        if (brackets[i]=='<') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n\n    int incr, decr;\n    incr = 0;\n    decr = 0;\n    for (int i = 1; i < l.size(); i++)\n    {\n        if (l[i] > l[i - 1]) incr++;\n        if (l[i] < l[i - 1]) decr++;\n    }\n    if (incr + decr == 2) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n\n    int incr, decr;\n    incr = 0;\n    decr = 0;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1]) incr++;\n        if (l[i] < l[i - 1]) decr++;\n    }\n    if (incr + decr == 2) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr++;\n        if (l[i]<l[i-1]) decr++;\n    }\n    if (incr+decr==2) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n\nint incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr++;\n        if (l[i]<l[i-1]) decr++;\n    }\n    if (incr+decr==2) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr++;\n        if (l[i]<l[i-1]) decr++;\n    }\n    if (incr+decr==1) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n\n    int incr, decr;\n    incr = 0; decr = 0;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1]) incr++;\n        if (l[i] < l[i - 1]) decr++;\n    }\n    if (incr + decr == 2) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n\nint incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==1) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n\n    int incr,decr;\n    incr=0;decr=0;\n    for (int i=1;i<l.size();i++)\n    {\n        if (l[i]>l[i-1]) incr=1;\n        if (l[i]<l[i-1]) decr=1;\n    }\n    if (incr+decr==2) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n\n    int incr, decr;\n    incr = 0; decr = 0;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool monotonic(vector<float> l){\n\n    int incr, decr;\n    incr = 0;\n    decr = 0;\n    for (int i = 1; i < l.size(); i++) {\n        if (l[i] > l[i - 1]) incr = 1;\n        if (l[i] < l[i - 1]) decr = 1;\n    }\n    if (incr + decr == 2) return true;\n    return false;\n}"
    ],
    [
        "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<int> common(vector<int> l1, vector<int> l2) {\n    vector<int> out;\n    for (int i = 0; i < l1.size(); i++) {\n        if (find(out.begin(), out.end(), l1[i]) == out.end()) {\n            out.push_back(l1[i]);\n        }\n    }\n    sort(out.begin(), out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1, vector<int> l2) {\n    vector<int> out;\n    for (int i = 0; i < l1.size(); i++) {\n        if (find(out.begin(), out.end(), l1[i]) == out.end()) {\n            out.push_back(l1[i]);\n        }\n    }\n    sort(out.begin(), out.end());\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n\n    vector<int> out;\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n\nvector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1, vector<int> l2) {\n\n    vector<int> out;\n    for (int i = 0; i < l1.size(); i++) {\n        if (find(out.begin(), out.end(), l1[i]) == out.end()) {\n            out.push_back(l1[i]);\n        }\n    }\n    sort(out.begin(), out.end());\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1, vector<int> l2) {\n    vector<int> out;\n    for (int i = 0; i < l1.size(); i++) {\n        if (find(out.begin(), out.end(), l1[i]) == out.end()) {\n            out.push_back(l1[i]);\n        }\n    }\n    sort(out.begin(), out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1, vector<int> l2) {\n    vector<int> out;\n    for (int i = 0; i < l1.size(); i++) {\n        if (find(out.begin(), out.end(), l1[i]) == out.end()) {\n            out.push_back(l1[i]);\n        }\n    }\n    sort(out.begin(), out.end());\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n\n    vector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1,vector<int> l2){\n\nvector<int> out={};\n    for (int i=0;i<l1.size();i++)\n        if (find(out.begin(),out.end(),l1[i])==out.end())\n            out.push_back(l1[i]);\n    sort(out.begin(),out.end());\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> common(vector<int> l1, vector<int> l2) {\n    vector<int> out = {};\n    for (int i = 0; i < l1.size(); i++) {\n        if (find(out.begin(), out.end(), l1[i]) == out.end()) {\n            out.push_back(l1[i]);\n        }\n    }\n    sort(out.begin(), out.end());\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n\nfor (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=i/n;\n    return n;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n\n    for (int i=2;i*i<=n;i++)\n        while (n%i==0 and n>i)  n=i/n;\n    return n;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n\n    for (int i=2;i*i<=n;i++)\n        while (n%i==0 and n>i)  n=i/n;\n    return n;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n\n    if (n == 1)\n        return 1;\n\n    for (int i=2;i*i<=n;i++)\n        while (n%i==0 and n>i)  n=i/n;\n\n    return n;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n\nfor (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=i/n;\n    return n;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n\n    if (n == 1) return 1;\n\n    for (int i=2;i*i<=n;i++)\n        while (n%i==0 and n>i)  n=i/n;\n    return n;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n\nfor (int i=2;i*i<=n;i++)\n    while (n%i==0 and n>i)  n=i/n;\n    return n;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n\n    for (int i=2; i*i<=n; i++) {\n        while (n % i == 0 and n > i) {\n            n = i / n;\n        }\n    }\n    return n;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n\n    for (int i=2;i*i<=n;i++)\n        while (n%i==0 and n>i)  n=i/n;\n        return n;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_factor(int n){\n\n    if (n == 1) return 1; // Handle the case where n is 1\n\n    for (int i=2;i*i<=n;i++)\n        while (n%i==0 and n>i)  n=i/n;\n\n    return n;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n\nreturn (n*(n+1))/2;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n\nreturn n*(n+1)/2;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n\nreturn n*(n+1)/2;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n\nreturn (n*(n+1))/2;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    int sum = 0;\n    for(int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n\nreturn n*(n+1)/2;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n\nreturn (n*(n+1))/2;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n    int sum = 0;\n    for (int i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n\nreturn n*(n+1)/2;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint sum_to_n(int n){\n\nreturn (n*(n+1))/2;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level++;\n        if (brackets[i]==')') level--;\n        if (level<0) return true;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level++;\n        if (brackets[i]==')') level--;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level++;\n        if (brackets[i]==')') level--;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\nint level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level++;\n        if (brackets[i]==')') level--;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level++;\n        if (brackets[i]==')') level--;\n        if (level<0) return true;\n    }\n    if (level!=0) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\nint level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return true;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return true;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\n    int level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool correct_bracketing(string brackets){\n\nint level=0;\n    for (int i=0;i<brackets.length();i++)\n    {\n        if (brackets[i]=='(') level+=1;\n        if (brackets[i]==')') level-=1;\n        if (level<0) return false;\n    }\n    if (level!=0) return false;\n    return true;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n\nvector<float> out={};\n    for (int i=0;i<xs.size();i++)\n        out.push_back(xs[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n\n    vector<float> out;\n    for (int i=0;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n\n    vector<float> out = {};\n    for (int i = 0; i < xs.size(); i++)\n        out.push_back(xs[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n\n    vector<float> out={};\n    for (int i=0;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n\n    vector<float> out={};\n    for (int i=0;i<xs.size();i++)\n        out.push_back(xs[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n\nvector<float> out={};\n    for (int i=0;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n\nvector<float> out={};\n    for (int i=0;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n\n    vector<float> out={};\n    for (int i=0;i<xs.size();i++)\n        out.push_back(xs[i]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n\n    vector<float> out={};\n    for (int i=0;i<xs.size();i++)\n        out.push_back(xs[i]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<float> derivative(vector<float> xs){\n    vector<float> out={};\n    for (int i=0;i<xs.size();i++)\n        out.push_back(i*xs[i]);\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n\nint ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n\n    int ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n\n    int ff[100];\n    ff[0]=0;\n    ff[1]=1;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n\nint ff[100];\n    ff[0]=0;\n    ff[1]=1;\n    ff[2]=2;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n\nint ff[100];\n    ff[0]=0;\n    ff[1]=1;\n    ff[2]=2;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n\n    int ff[100];\n    ff[0]=0;\n    ff[1]=1;\n    ff[2]=2;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n\nint ff[100];\n    ff[0]=0;\n    ff[1]=1;\n    ff[2]=2;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n\n    int ff[100];\n    ff[0]=0;\n    ff[1]=1;\n    ff[2]=2;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n\nint ff[100];\n    ff[0]=0;\n    ff[1]=0;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fibfib(int n){\n\nint ff[100];\n    ff[0]=0;\n    ff[1]=1;\n    ff[2]=1;\n    for (int i=3;i<=n;i++)\n        ff[i]=ff[i-1]+ff[i-2]+ff[i-3];\n    return ff[n];\n\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouyAEIOUY\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n        if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end() || (s[i]=='y' && i==s.length()-1))\n            count+=1;\n    return count;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n\nstring vowels=\"aeiouyAEIOUY\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    return count;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n\nstring vowels=\"aeiouyAEIOUY\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n\nstring vowels=\"aeiouyAEIOUY\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end() || (s[i]=='y' && i==s.length()-1))\n        count+=1;\n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n\n    string vowels=\"aeiouyAEIOUY\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    return count;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n\n    string vowels=\"aeiouyAEIOUY\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n        if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n            count+=1;\n    return count;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouyAEIOUY\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n        if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n            count+=1;\n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n    string vowels=\"aeiouyAEIOUY\";\n    int count=0;\n    for (int i=0;i<s.length();i++) {\n        if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end()) {\n            if (i==s.length()-1 || !(find(vowels.begin(),vowels.end(),s[i+1])!=vowels.end())) {\n                count++;\n            }\n        }\n    }\n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n\nstring vowels=\"aeiouyAEIOUY\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n    if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n        count+=1;\n    return count;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint vowels_count(string s){\n\n    string vowels=\"aeiouyAEIOUY\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n        if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end())\n            count+=1;\n    return count;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(0,xs.length()-shift)+xs.substr(xs.length()-shift);\n    return xs;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n\n    string xs = to_string(x);\n    if (xs.length() < shift) {\n        string s(xs.rbegin(), xs.rend());\n        return s;\n    }\n    xs = xs.substr(0, xs.length() - shift) + xs.substr(xs.length() - shift);\n    return xs;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(0,xs.length()-shift)+xs.substr(xs.length()-shift);\n    return xs;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x, int shift){\n\n    string xs;\n    xs = to_string(x);\n    if (xs.length() < shift)\n    {\n        string s(xs.rbegin(), xs.rend());\n        return s;\n    }\n    xs = xs.substr(0, xs.length() - shift) + xs.substr(xs.length() - shift);\n    return xs;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x, int shift) {\n    string xs;\n    xs = to_string(x);\n    if (xs.length() < shift) {\n        string s(xs.rbegin(), xs.rend());\n        return s;\n    }\n    xs = xs.substr(0, xs.length() - shift) + xs.substr(xs.length() - shift);\n    return xs;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x, int shift){\n    string xs;\n    xs = to_string(x);\n    if (xs.length() < shift) {\n        string s(xs.rbegin(), xs.rend());\n        return s;\n    }\n    xs = xs.substr(0, xs.length() - shift) + xs.substr(xs.length() - shift);\n    return xs;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x, int shift){\n\n    string xs;\n    xs = to_string(x);\n    if (xs.length() < shift)\n    {\n        string s(xs.rbegin(), xs.rend());\n        return s;\n    }\n    xs = xs.substr(0, xs.length() - shift) + xs.substr(xs.length() - shift);\n    return xs;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x, int shift) {\n\n    string xs;\n    xs = to_string(x);\n    if (xs.length() < shift) {\n        string s(xs.rbegin(), xs.rend());\n        return s;\n    }\n    xs = xs.substr(0, xs.length() - shift) + xs.substr(xs.length() - shift);\n    return xs;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(0,xs.length()-shift)+xs.substr(xs.length()-shift);\n    return xs;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring circular_shift(int x,int shift){\n\n    string xs;\n    xs=to_string(x);\n    if (xs.length()<shift)\n    {\n        string s(xs.rbegin(),xs.rend());\n        return s;\n    }\n    xs=xs.substr(0,xs.length()-shift)+xs.substr(xs.length()-shift);\n    return xs;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n\nint sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>='A' && s[i]<='Z')\n            sum+=s[i];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n\nint sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>='A' and s[i]<='Z')\n            sum+=s[i];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>='A' and s[i]<='Z')\n            sum+=s[i];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90) // corrected condition to check for uppercase characters\n            sum+=s[i];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n\nint sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>='A' && s[i]<='Z')\n            sum+=s[i];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n\n    int sum=0;\n    for (int i=0;i<s.length();i++)\n        if (s[i]>=65 and s[i]<=90)\n            sum+=s[i];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n\n    int sum = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] >= 'A' and s[i] <= 'Z') {\n            sum += s[i];\n        }\n    }\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint digitSum(string s){\n\n    int sum = 0;\n    for (int i = 0; i < s.length(); i++)\n        if (s[i] >= 'A' && s[i] <= 'Z')\n            sum += s[i];\n    return sum;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s, int n) {\n\n    string num1 = \"\", num2 = \"\";\n    int is12;\n    is12 = 0;\n    for (int i = 0; i < s.size(); i++)\n\n        if (s[i] >= 48 and s[i] <= 57) {\n            if (is12 == 0) num1 = num1 + s[i];\n            if (is12 == 1) num2 = num2 + s[i];\n        }\n        else\n            if (is12 == 0 and num1.length() > 0) is12 = 1;\n    return n - atoi(num1.c_str()) - atoi(num2.c_str());\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s,int n){\n\nstring num1=\"\",num2=\"\";\n    int is12;\n    is12=0;\n    for (int i=0;i<s.size();i++)\n        \n        if (s[i]>=48 and s[i]<=57)\n        {\n            if (is12==0) num1=num1+s[i];\n            if (is12==1) num2=num2+s[i];\n        }\n        else\n          if (is12==0 and num1.length()>0) is12=1;\n    return n-1-stoi(num1)-stoi(num2);\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s, int n) {\n\n    string num1 = \"\", num2 = \"\";\n    int is12 = 0;\n    is12 = 0;\n    for (int i = 0; i < s.size(); i++) {\n        \n        if (s[i] >= '0' && s[i] <= '9') {\n            if (is12 == 0) num1 = num1 + s[i];\n            if (is12 == 1) num2 = num2 + s[i];\n        }\n        else {\n            if (is12 == 0 && num1.length() > 0) is12 = 1;\n        }\n    }\n    return n - 1 - atoi(num1.c_str()) - atoi(num2.c_str());\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s, int n) {\n    string num1 = \"\", num2 = \"\";\n    int is12 = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 48 and s[i] <= 57) {\n            if (is12 == 0) num1 = num1 + s[i];\n            if (is12 == 1) num2 = num2 + s[i];\n        } else {\n            if (is12 == 0 and num1.length() > 0) is12 = 1;\n        }\n    }\n    return n - 1 - atoi(num1.c_str()) - atoi(num2.c_str());\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s, int n) {\n    string num1 = \"\", num2 = \"\";\n    int is12 = 0;\n    is12 = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= '0' && s[i] <= '9') {\n            if (is12 == 0) num1 = num1 + s[i];\n            if (is12 == 1) num2 = num2 + s[i];\n        } else {\n            if (is12 == 0 && num1.length() > 0) is12 = 1;\n        }\n    }\n    return n - atoi(num1.c_str()) - atoi(num2.c_str());\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s, int n) {\n    string num1 = \"\", num2 = \"\";\n    int is12 = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 48 && s[i] <= 57) {\n            if (is12 == 0) num1 = num1 + s[i];\n            if (is12 == 1) num2 = num2 + s[i];\n        } else {\n            if (is12 == 0 && num1.length() > 0) is12 = 1;\n        }\n    }\n    return n - atoi(num1.c_str()) - atoi(num2.c_str());\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s, int n) {\n    string num1 = \"\", num2 = \"\";\n    int is12 = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= '0' && s[i] <= '9') {\n            if (is12 == 0) num1 += s[i];\n            if (is12 == 1) num2 += s[i];\n        } else {\n            if (is12 == 0 && num1.length() > 0) is12 = 1;\n        }\n    }\n    return n - atoi(num1.c_str()) - atoi(num2.c_str());\n}",
        "#include <stdio.h>\n#include <math.h>\n#include <string>\nusing namespace std;\n#include <algorithm>\n#include <stdlib.h>\n\nint fruit_distribution(string s, int n) {\n    string num1 = \"\", num2 = \"\";\n    int is12 = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 48 and s[i] <= 57) {\n            if (is12 == 0) num1 = num1 + s[i];\n            if (is12 == 1) num2 = num2 + s[i];\n        } else {\n            if (is12 == 0 and num1.length() > 0) is12 = 1;\n        }\n    }\n    return n - atoi(num1.c_str()) - atoi(num2.c_str());\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint fruit_distribution(string s, int n) {\n    string num1 = \"\", num2 = \"\";\n    int is12 = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= 48 && s[i] <= 57) {\n            if (is12 == 0) num1 = num1 + s[i];\n            if (is12 == 1) num2 = num2 + s[i];\n        } else {\n            if (is12 == 0 && num1.length() > 0) is12 = 1;\n        }\n    }\n    return n - atoi(num1.c_str()) - atoi(num2.c_str());\n}",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint fruit_distribution(string s, int n) {\n    string num1 = \"\", num2 = \"\";\n    int is12 = 0;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] >= '0' && s[i] <= '9') {\n            if (is12 == 0) num1 += s[i];\n            if (is12 == 1) num2 += s[i];\n        } else {\n            if (is12 == 0 && num1.length() > 0) is12 = 1;\n        }\n    }\n    return n - atoi(num1.c_str()) - atoi(num2.c_str());\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n        if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n            out={i,arr[i]};\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n\nvector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={i,arr[i]};\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n\nvector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={i,arr[i]};\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n\nvector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={i,arr[i]};\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n\n    vector<int> out;\n    int minEven = INT_MAX;\n    int minEvenIndex = -1;\n    for (int i=0; i<arr.size(); i++) {\n        if (arr[i] % 2 == 0 && arr[i] < minEven) {\n            minEven = arr[i];\n            minEvenIndex = i;\n        }\n    }\n    if (minEvenIndex != -1) {\n        out.push_back(minEven);\n        out.push_back(minEvenIndex);\n    }\n    return out;\n}",
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n#include <algorithm>\n#include <stdlib.h>\n\nvector<int> pluck(vector<int> arr) {\n    vector<int> out = {};\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0 and (out.size() == 0 or arr[i] < out[0])) {\n            out = {i, arr[i]};\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={i,arr[i]};\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n\n    vector<int> out={};\n    for (int i=0;i<arr.size();i++)\n        if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n            out={i,arr[i]};\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n\n    vector<int> out;\n    int min_even = INT_MAX;\n    int min_even_index = -1;\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] % 2 == 0) {\n            if (arr[i] < min_even) {\n                min_even = arr[i];\n                min_even_index = i;\n            }\n        }\n    }\n    if (min_even_index != -1) {\n        out.push_back(min_even);\n        out.push_back(min_even_index);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> pluck(vector<int> arr){\n\nvector<int> out={};\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]%2==0 and (out.size()==0 or arr[i]<out[0]))\n        out={i,arr[i]};\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n\n    vector<vector<int>> freq={};\n    int max=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n                freq[j][1]++;\n                has=true;\n                if (freq[j][1]>=freq[j][0] && freq[j][0]>max) max=freq[j][0];\n            }\n        if (!has) \n        {\n            freq.push_back({lst[i], 1});\n            if (max == -1 && lst[i] == 1) max = 1;\n        }\n    }\n    return max",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n\n    vector<vector<int>> freq = {};\n    int max = 0;\n    for (int i = 0; i < lst.size(); i++)\n    {\n        bool has = false;\n        for (int j = 0; j < freq.size(); j++)\n            if (lst[i] == freq[j][0])\n            {\n                freq[j][1] += 1;\n                has = true;\n                if (freq[j][1] >= freq[j][0] && freq[j][0] > max)\n                    max = freq[j][0];\n            }\n        if (!has)\n        {\n            freq.push_back({lst[i], 1});\n            if (max == -1 && lst[i] == 1)\n                max = 1;",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n\nvector<vector<int>> freq={};\n    int max=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n\n    vector<vector<int>> freq={};\n    int max=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n                freq[j][1]+=1;\n                has=true;\n                if (freq[j][1]>=freq[j][0] && freq[j][0]>max) max=freq[j][0];\n            }\n        if (!has) \n        {\n            freq.push_back({lst[i], 1});\n            if (max == -1 && lst[i] == 1) max = 1;\n        }\n    }",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n\nvector<vector<int>> freq={};\n    int max=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max",
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint search(vector<int> lst) {\n    int max = -1;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > 0) {\n            int count = 0;\n            for (int j = 0; j < lst.size(); j++) {\n                if (lst[i] == lst[j]) {\n                    count++;\n                }\n            }\n            if (count >= lst[i] && lst[i] > max) {\n                max = lst[i];\n            }\n        }\n    }\n    return max;\n}",
        "#include <iostream>\n#include <vector>\n\nint search(const std::vector<int>& lst) {\n    std::vector<std::vector<int>> freq;\n    int max = -1;\n\n    for (int i = 0; i < lst.size(); ++i) {\n        bool has = false;\n        for (int j = 0; j < freq.size(); ++j) {\n            if (lst[i] == freq[j][0]) {\n                freq[j][1]++;\n                has = true;\n                if (freq[j][1] >= freq[j][0] && freq[j][0] > max) max = freq[j][0];\n            }\n        }\n\n        if (!has) {\n            freq.push_back({lst[i], 1});\n            if (max == -1 && lst[i] == 1) max = 1;\n        }\n    }\n\n    return max;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n\nvector<vector<int>> freq={};\n    int max=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n\nvector<vector<int>> freq={};\n    int max=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        bool has=false;\n        for (int j=0;j<freq.size();j++)\n            if (lst[i]==freq[j][0]) \n            {\n            freq[j][1]+=1;\n            has=true;\n            if (freq[j][1]>=freq[j][0] and freq[j][0]>max) max=freq[j][0];\n            }\n        if (not(has)) \n        {\n        freq.push_back({lst[i],1});\n        if (max==-1 and lst[i]==1) max=1;\n        }\n    }\n    return max",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint search(vector<int> lst){\n\n    vector<vector<int>> freq;\n    int max = -1;\n    for (int i = 0; i < lst.size(); i++) {\n        bool has = false;\n        for (int j = 0; j < freq.size(); j++) {\n            if (lst[i] == freq[j][0]) {\n                freq[j][1] += 1;\n                has = true;\n                if (freq[j][1] >= freq[j][0] && freq[j][0] > max) max = freq[j][0];\n            }\n        }\n        if (!has) {\n            freq.push_back({lst[i], 1});\n            if (max == -1 && lst[i] == 1) max = 1;\n        }\n    }\n    return"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n\nvector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=2;\n        out.push_back(lst[r]);\n        r-=2;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=2;\n        out.push_back(lst[r]);\n        r-=2;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n\nvector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=2;\n        out.push_back(lst[r]);\n        r-=2;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n\n    vector<int> out;\n    sort(lst.begin(), lst.end());\n    int l = 0, r = lst.size() - 1;\n    while (l < r) {\n        out.push_back(lst[l]);\n        l += 2;\n        out.push_back(lst[r]);\n        r -= 2;\n    }\n    if (l == r) out.push_back(lst[l]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n\n    vector<int> out = {};\n    sort(lst.begin(), lst.end());\n    int l = 0, r = lst.size() - 1;\n    while (l < r) {\n        out.push_back(lst[l]);\n        l += 2;\n        out.push_back(lst[r]);\n        r -= 2;\n    }\n    if (l == r)\n        out.push_back(lst[l]);\n    return out;\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n\nvector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=2;\n        out.push_back(lst[r]);\n        r-=2;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=2;\n        out.push_back(lst[r]);\n        r-=2;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=2;\n        out.push_back(lst[r]);\n        r-=2;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n\nvector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=2;\n        out.push_back(lst[r]);\n        r-=2;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> strange_sort_list(vector<int> lst){\n\n    vector<int> out={};\n    sort(lst.begin(),lst.end());\n    int l=0,r=lst.size()-1;\n    while (l<r)\n    {\n        out.push_back(lst[l]);\n        l+=2;\n        out.push_back(lst[r]);\n        r-=2;\n    }\n    if (l==r) out.push_back(lst[l]);\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n\nif (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c);\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n\nif (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c);\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a, float b, float c) {\n\n    if (a + b <= c || a + c <= b || b + c <= a) return -1;\n    float h = (a + b + c);\n    float area;\n    area = pow(h * (h - a) * (h - b) * (h - c), 0.5);\n    return area;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n\nif (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c);\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a, float b, float c) {\n    if (a + b <= c || a + c <= b || b + c <= a) return -1;\n    float h = (a + b + c);\n    float area;\n    area = pow(h * (h - a) * (h - b) * (h - c), 0.5);\n    return area;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n\nif (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c);\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n\nif (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c);\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n\nif (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c);\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a,float b,float c){\n\nif (a+b<=c or a+c<=b or b+c<=a) return -1;\n    float h=(a+b+c);\n    float area;\n    area=pow(h*(h-a)*(h-b)*(h-c),0.5);\n    return area;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nfloat triangle_area(float a, float b, float c) {\n    if (a + b <= c || a + c <= b || b + c <= a) return -1;\n    float h = (a + b + c) / 2;\n    float s = (a + b + c) / 2;\n    float area = sqrt(s * (s - a) * (s - b) * (s - c));\n    return area;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]==q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q, int w){\n    int sum = 0;\n    for (int i = 0; i < q.size(); i++) {\n        if (q[i] == q[q.size() - 1 - i]) return false;\n        sum += q[i];\n    }\n    if (sum > w) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]==q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.size(); i++) {\n        if (q[i] == q[q.size() - 1 - i]) return false;\n        sum += q[i];\n    }\n    if (sum > w) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.size(); i++) {\n        if (q[i] != q[q.size() - 1 - i]) return false;\n        sum += q[i];\n    }\n    if (sum > w) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]==q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q, int w){\n\n    int sum = 0;\n    for (int i = 0; i < q.size(); i++) {\n        sum += q[i];\n    }\n    if (sum > w) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q, int w) {\n    int sum = 0;\n    for (int i = 0; i < q.size(); i++) {\n        if (q[i] != q[q.size() - 1 - i]) return false;\n        sum += q[i];\n    }\n    if (sum > w) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n\n    int sum=0;\n    for (int i=0;i<q.size();i++) {\n        if (q[i]==q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool will_it_fly(vector<int> q,int w){\n\n    int sum=0;\n    for (int i=0;i<q.size();i++)\n    {\n        if (q[i]==q[q.size()-1-i]) return false;\n        sum+=q[i];\n    }\n    if (sum>w) return false;\n    return true;\n}"
    ],
    [
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int out = 0;\n    for (int i = 0; i < arr.size() - 1 - i; i++) {\n        if (out != arr[arr.size() - 1 - i]) {\n            out += 1;\n        }\n    }\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nint smallest_change(vector<int> arr) {\n    int out = 0;\n    for (int i = 0; i < arr.size() - 1 - i; i++) {\n        if (out != arr[arr.size() - 1 - i]) {\n            out += 1;\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (out!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n\n    int out = 0;\n    for (int i = 0; i < arr.size() - 1 - i; i++)\n        if (out != arr[arr.size() - 1 - i])\n            out += 1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n\nint out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (out!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (out!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n\nint out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (out!=arr[arr.size()-1-i])\n            out++; // Increment out instead of out+=1\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (out!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (out!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint smallest_change(vector<int> arr){\n\n    int out=0;\n    for (int i=0;i<arr.size()-1-i;i++)\n        if (out!=arr[arr.size()-1-i])\n            out+=1;\n    return out;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1, vector<string> lst2){\n\n    int num1, num2, i;\n    num1 = 0; num2 = 0;\n    for (i = 0; i < lst1.size(); i++)\n        num1 += lst1[i].length();\n    for (i = 0; i < lst2.size(); i++)\n        num2 += lst2[i].length();\n    if (num1 > num2) return lst1;\n    return lst2;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n\n    int num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1<num2) return lst1;\n    return lst2;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int num1 = 0, num2 = 0, i;\n    for (i = 0; i < lst1.size(); i++)\n        num1 += lst1[i].length();\n    for (i = 0; i < lst2.size(); i++)\n        num2 += lst2[i].length();\n    if (num1 < num2) return lst1;\n    return lst2;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1, num2, i;\n    num1 = 0;\n    num2 = 0;\n    for (i = 0; i < lst1.size(); i++) {\n        num1 += lst1[i].length();\n    }\n    for (i = 0; i < lst2.size(); i++) {\n        num2 += lst2[i].length();\n    }\n    if (num1 > num2) {\n        return lst1;\n    } else {\n        return lst2;\n    }\n}",
        "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int num1 = 0, num2 = 0;\n    for (int i = 0; i < lst1.size(); i++)\n        num1 += lst1[i].length();\n    for (int i = 0; i < lst2.size(); i++)\n        num2 += lst2[i].length();\n    if (num1 > num2)\n        return lst1;\n    return lst2;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n\nint num1,num2,i;\n    num1=0;num2=0;\n    for (i=0;i<lst1.size();i++)\n        num1+=lst1[i].length();\n    for (i=0;i<lst2.size();i++)\n        num2+=lst2[i].length();\n    if (num1<num2) return lst1;\n    return lst2;\n}\n",
        "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int num1 = 0, num2 = 0;\n    for (int i = 0; i < lst1.size(); i++)\n        num1 += lst1[i].length();\n    for (int i = 0; i < lst2.size(); i++)\n        num2 += lst2[i].length();\n    if (num1 > num2) return lst1;\n    return lst2;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n\n    int num1, num2, i;\n    num1 = 0; num2 = 0;\n    for (i = 0; i < lst1.size(); i++)\n        num1 += lst1[i].length();\n    for (i = 0; i < lst2.size(); i++)\n        num2 += lst2[i].length();\n    if (num1 > num2) return lst1;\n    return lst2;\n}\n",
        "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> total_match(vector<string> lst1, vector<string> lst2) {\n    int num1 = 0;\n    int num2 = 0;\n    for (int i = 0; i < lst1.size(); i++)\n        num1 += lst1[i].length();\n    for (int i = 0; i < lst2.size(); i++)\n        num2 += lst2[i].length();\n    if (num1 > num2) return lst1;\n    return lst2;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> total_match(vector<string> lst1,vector<string> lst2){\n    int num1, num2, i;\n    num1 = 0;\n    num2 = 0;\n    for (i = 0; i < lst1.size(); i++)\n        num1 += lst1[i].length();\n    for (i = 0; i < lst2.size(); i++)\n        num2 += lst2[i].length();\n    if (num1 > num2)\n        return lst1;\n    return lst2;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n\n    if (a < 100) {\n        return false;\n    }\n\n    int num = 0;\n    for (int i = 2; i * i <= a; i++) {\n        while (a % i == 0 and a > i) {\n            a = a / i;\n            num += 1;\n        }\n    }\n    if (num == 2) {\n        return true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n\n    int num=0;\n    for (int i=0;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n\nint num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n\nint num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n\n    int num=0;\n    for (int i=0;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n\nint num=0;\n    for (int i=0;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false; \n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_multiply_prime(int a){\n\n    int num=0;\n    for (int i=2;i*i<=a;i++)\n    while (a%i==0 and a>i)\n    {\n        a=a/i;\n        num+=1;\n    }\n    if (num==2) return true;\n    return false;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n\nint p=1,count=0;\n    while (p<=x)\n    {\n        if (p==x) return true;\n        count=p*n;\n        x=x+1;\n        p=p+1;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x, int n){\n\n    int p = 1, count = 0;\n    while (p <= x) {\n        if (p == x) return true;\n        count = p * n;\n        x += 1;\n        p += 1;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n\n    int p=1,count=0;\n    while (p<=x)\n    {\n        if (p==x) return true;\n        count=p*n;\n        if (count == x) return true;\n        x+=1;\n        p+=1;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x) {\n        if (p == x) return true;\n        count = p * n;\n        x += 1;\n        p += 1;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x, int n){\n    return (x == n * int(pow(n, int(log(x) / log(n)))));\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n\n    int p=1,count=0;\n    while (p<=x)\n    {\n        if (p==x) return true;\n        count=p*n;x+=1;p+=1;\n    }\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x, int n) {\n    int p = 1, count = 0;\n    while (p <= x) {\n        if (p == x) return true;\n        count = p * n;\n        x += 1;\n        p += 1;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n\nint p=1,count=0;\n    while (p<=x)\n    {\n        if (p==x) return true;\n        count=p*n;x+=1;p+=1;\n    }\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n\n    int p=1,count=0;\n    while (p<=x)\n    {\n        if (p==x) return true;\n        count=p*n;\n        x+=1;\n        p+=1;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_simple_power(int x,int n){\n\nint p=1,count=0;\n    while (p<=x)\n    {\n        if (p==x) return true;\n        count=p*n;p+=1;\n    }\n    return false;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscube(int a){\n\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i==abs(a)) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscube(int a){\n    return (abs(a) == pow(abs(a), 1.0/3.0));\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscube(int a){\n\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i==abs(a)) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscube(int a){\n    return (abs(a) == pow(abs(a), 1.0/3));\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscube(int a){\n\nfor (int i=0;i*i*i<=abs(a);i++)\n        if (i*i==abs(a)) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscube(int a){\n\nfor (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscube(int a){\n    int i = 1;\n    while (i*i*i <= abs(a))\n        i++;\n    return i*i*i == abs(a);\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscube(int a){\n    for (int i=0;i*i*i<=abs(a);i++)\n        if (i*i==abs(a)) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscube(int a){\n\nfor (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i==abs(a)) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool iscube(int a){\n\nfor (int i=0;i*i*i<=abs(a);i++)\n        if (i*i*i == abs(a)) return true;\n    return false;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n\nstring key=\"2357BD\";\n    int out=1;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),toupper(num[i]))!=key.end()) out+=1;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n\n    string key=\"2357BD\";\n    int out=1;\n    for (int i=0;i<num.length();i++)\n        if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}",
        "#include <iostream>\n#include <string>\n#include <algorithm>\n\nint hex_key(string num) {\n    string key = \"2357BD\";\n    int out = 1;\n    for (int i = 0; i < num.length(); i++)\n        if (find(key.begin(), key.end(), num[i]) != key.end())\n            out += 1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n\nstring key=\"2357BD\";\n    int out=1;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n\nstring key=\"2357BD\";\n    int out=1;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n\nstring key=\"2357BD\";\n    int out=1;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n    string key=\"2357BD\";\n    int out=1;\n    for (int i=0;i<num.length();i++)\n        if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n\nstring key=\"2357BD\";\n    int out=1;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n\nstring key=\"2357BD\";\n    int out=1;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint hex_key(string num){\n\nstring key=\"2357BD\";\n    int out=1;\n    for (int i=0;i<num.length();i++)\n    if (find(key.begin(),key.end(),num[i])!=key.end()) out+=1;\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n\nstring out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"d\";\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n\nstring out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"d\";\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n\nstring out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    string out = \"\";\n    if (decimal == 0) return \"db0db\";\n    while (decimal > 0) {\n        out = to_string(decimal % 2) + out;\n        decimal = decimal / 2;\n    }\n    out = \"db\" + out + \"d\";\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"d\";\n    return out;\n}",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring decimal_to_binary(int decimal) {\n    string out = \"\";\n    if (decimal == 0)\n        return \"db0db\";\n    while (decimal > 0) {\n        out = to_string(decimal % 2) + out;\n        decimal /= 2;\n    }\n    out = \"db\" + out + \"d\";\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n\nstring out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"d\";\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n\nstring out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"d\";\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n\nstring out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"db\";\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring decimal_to_binary(int decimal){\n\n    string out=\"\";\n    if (decimal==0) return \"db0db\";\n    while (decimal>0)\n    {\n        out=to_string(decimal%2)+out;\n        decimal=decimal/2;\n    }\n    out=\"db\"+out+\"d\";\n    return out;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n\nif (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] && s[i]==s[i-2]) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n\nif (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] and s[i]==s[i-2]) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n\nif (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] and s[i]==s[i-2]) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n\n    if (s.length() < 3) return false;\n    for (int i = 2; i < s.length(); i++)\n        if (s[i] == s[i - 1] && s[i] == s[i - 2]) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n\nif (s.length() < 3) return false;\n    for (int i = 2; i < s.length(); i++)\n    if (s[i] == s[i - 1] and s[i] == s[i - 2]) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n        if (s[i]==s[i-1] and s[i]==s[i-2]) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n\nif (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] and s[i]==s[i-2]) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n    if (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n        if (s[i]==s[i-1] and s[i]==s[i-2]) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n\nif (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] and s[i]==s[i-2]) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool is_happy(string s){\n\nif (s.length()<3) return false;\n    for (int i=2;i<s.length();i++)\n    if (s[i]==s[i-1] and s[i]==s[i-2]) return false;\n    return true;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n\nvector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.700",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n\nvector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.700",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n\nvector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=4.0) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<4.0) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.7001 and grades[i",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n\n    vector<string> out;\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.700",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n\n    vector<string> out;\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.700",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n\n    vector<string> out;\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        else if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        else if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        else if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        else if (grades[i]>2",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n\nvector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=4.0000) out.push_back(\"A+\");\n        if (grades[i]>3.7000 and grades[i]<4.0000) out.push_back(\"A\");\n        if (grades[i]>3.3000 and grades[i]<=3.7000) out.push_back(\"A-\");\n        if (grades[i]>3.0000 and grades[i]<=3.3000) out.push_back(\"B+\");\n        if (grades[i]>2.700",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n\nvector<string> out={};\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        if (grades[i]>3.7001 and grades[i]<3.9999) out.push_back(\"A\");\n        if (grades[i]>3.3001 and grades[i]<=3.7001) out.push_back(\"A-\");\n        if (grades[i]>3.0001 and grades[i]<=3.3001) out.push_back(\"B+\");\n        if (grades[i]>2.700",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n\n    vector<string> out;\n    for (int i=0;i<grades.size();i++)\n    {\n        if (grades[i]>=3.9999) out.push_back(\"A+\");\n        else if (grades[i]>3.7001) out.push_back(\"A\");\n        else if (grades[i]>3.3001) out.push_back(\"A-\");\n        else if (grades[i]>3.0001) out.push_back(\"B+\");\n        else if (grades[i]>2.7001) out.push_back(\"B\");\n        else if (grades[i]>2.3001) out.push_back(\"B",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> numerical_letter_grade(vector<float> grades){\n    vector<string> out = {};\n    for (int i = 0; i < grades.size(); i++) {\n        if (grades[i] >= 3.9999) out.push_back(\"A+\");\n        else if (grades[i] > 3.7001 && grades[i] < 3.9999) out.push_back(\"A\");\n        else if (grades[i] > 3.3001 && grades[i] <= 3.7001) out.push_back(\"A-\");\n        else if (grades[i] > 3.0001 && grades[i] <= 3."
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=3;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=3;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n\nint l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=3;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=3;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=3;i*i<=l;i++)\n        if (l%i==0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n\n    int l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=3;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n\nint l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=3;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n\nint l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=3;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n\nint l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=3;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool prime_length(string str){\n\nint l,i;\n    l=str.length();\n    if (l<2) return false;\n    for (i=3;i*i<=l;i++)\n    if (l%i==0) return false;\n    return true;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n\nif (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*i*10;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n\nif (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*i*10;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n\nif (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*i*10;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n\nif (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*i*10;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n\nif (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*i*10;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n\nif (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*i*10;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n\nif (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*i*10;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n\nif (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*i*10;\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n\nif (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*i*10;\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint starts_one_ends(int n){\n\nif (n<1) return 0;\n    if (n==1) return 1;\n    int out=18;\n    for (int i=2;i<n;i++)\n        out=out*i*10;\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str, bi = \"\";\n    str = to_string(N);\n    int i, sum = 0;\n    for (int i = 0; i < str.length(); i++)\n        sum = str[i] - 48;\n    while (sum > 0)\n    {\n        bi = to_string(sum % 2) + bi;\n        sum = sum / 2;\n    }\n    return bi;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n    string str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum=sum+str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n\nstring str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring solve(int N) {\n    string str, bi;\n    str = to_string(N);\n    int sum = 0;\n    for (int i = 0; i < str.length(); i++) {\n        sum += str[i] - '0'; // Corrected the calculation of sum\n    }\n    while (sum > 0) {\n        bi += to_string(sum % 2);\n        sum /= 2;\n    }\n    return bi;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n\nstring str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum/=2;\n    }\n    return bi;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n\nstring str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n",
        "#include <stdio.h>\n#include <math.h>\n#include <string>\nusing namespace std;\n#include <algorithm>\n#include <stdlib.h>\nstring solve(int N) {\n    string str, bi = \"\";\n    str = to_string(N);\n    int i, sum = 0;\n    for (int i = 0; i < str.length(); i++)\n        sum = str[i] - 48;\n    while (sum > 0) {\n        bi = to_string(sum % 2) + bi;\n        sum = sum / 2;\n    }\n    return bi;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n\n    string str, bi = \"\";\n    str = to_string(N);\n    int i, sum = 0;\n    for (int i = 0; i < str.length(); i++)\n        sum = str[i] - 48;\n    while (sum > 0)\n    {\n        bi = to_string(sum % 2) + bi;\n        sum = sum / 2;\n    }\n    return bi;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring solve(int N){\n\nstring str,bi=\"\";\n    str=to_string(N);\n    int i,sum=0;\n    for (int i=0;i<str.length();i++)\n        sum+=str[i]-48;\n    while (sum>0)\n    {\n        bi=to_string(sum%2)+bi;\n        sum=sum/2;\n    }\n    return bi;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n\nint sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==0) sum+=lst[i*2];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==0) sum+=lst[i*2];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==0) sum+=lst[i*2];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n\n    int sum = 0;\n    for (int i = 0; i * 2 < lst.size(); i++)\n        if (lst[i * 2] % 2 == 0)\n            sum += lst[i * 2];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n\nint sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==0) sum+=lst[i*2];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==0) sum+=lst[i*2];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==0) sum+=lst[i*2];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n\nint sum=0;\n    for (int i=0;i*2+1<lst.size();i++)\n        if (lst[i*2+1]%2==0) sum+=lst[i*2+1];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==0) sum+=lst[i*2];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add(vector<int> lst){\n\nint sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==0) sum+=lst[i*2];\n    return sum;\n}\n"
    ],
    [
        "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    string out = \"\";\n    string current = \"\";\n    s += ' ';\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            sort(current.begin(), current.end());\n            out += current;\n            current = \"\";\n        } else {\n            current += s[i];\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n\nstring out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}",
        "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    string out = \"\";\n    string current = \"\";\n    s = s + ' ';\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            sort(current.begin(), current.end());\n            out = out + current;\n            current = \"\";\n        } else {\n            current = current + s[i];\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n\nstring out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n\nstring out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}",
        "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    string out = \"\";\n    string current = \"\";\n    s = s + ' ';\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            sort(current.begin(), current.end());\n            out = out + current;\n            current = \"\";\n        } else {\n            current = current + s[i];\n        }\n    }\n    return out;\n}",
        "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring anti_shuffle(string s) {\n    string out = \"\";\n    string current = \"\";\n    s = s + ' ';\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            sort(current.begin(), current.end());\n            out = out + current;\n            current = \"\";\n        } else {\n            current = current + s[i];\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n\n    string out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring anti_shuffle(string s){\n\nstring out=\"\";\n    string current=\"\";\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    if (s[i]==' ')\n    {\n        sort(current.begin(),current.end());\n        out=out+current;\n        current=\"\";\n    }\n    else current=current+s[i];\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n\n    vector<vector<int>> out;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = lst[i].size() - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out.push_back({j, i});\n            }\n        }\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n\nvector<vector<int>> out;\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j--)\n    if (lst[i][j]==x) out.push_back({j,i});\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n\nvector<vector<int>> out;\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({j,i});\n    sort(out.begin(), out.end(), [](const vector<int> &a, const vector<int> &b){\n        return a[1] < b[1] || (a[1] == b[1] && a[0] > b[0]);\n    });\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> out;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = lst[i].size() - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out.push_back({j, i});\n            }\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n\n    vector<vector<int>> out;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = lst[i].size() - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out.push_back({j, i});\n            }\n        }\n    }\n    sort(out.begin(), out.end(), [](vector<int> a, vector<int> b) {\n        return a[1] < b[1];\n    });\n    sort(out.begin(), out.end(), [](vector<int> a, vector<int> b) {\n        return a[0] > b[0];\n    });\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n\nvector<vector<int>> out={};\n    for (int i=0;i<lst.size();i++)\n    for (int j=lst[i].size()-1;j>=0;j-=1)\n    if (lst[i][j]==x) out.push_back({j,i});\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<vector<int>> get_row(vector<vector<int>> lst, int x){\n\n    vector<vector<int>> out;\n    for (int i=0;i<lst.size();i++) {\n        for (int j=lst[i].size()-1;j>=0;j--) {\n            if (lst[i][j]==x) out.push_back({j,i});\n        }\n    }\n    sort(out.begin(), out.end(), [](vector<int> a, vector<int> b) {\n        if (a[1] == b[1]) return a[0] > b[0];\n        else return a[1] < b[1];\n    });\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> out;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = lst[i].size() - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out.push_back({j, i});\n            }\n        }\n    }\n    return out;\n}\n",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<vector<int>> get_row(const vector<vector<int>>& lst, int x) {\n    vector<vector<int>> out;\n\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = lst[i].size() - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out.push_back({j, i});\n            }\n        }\n    }\n\n    sort(out.begin(), out.end(), [](const vector<int>& a, const vector<int>& b) {\n        return a[0] < b[0];\n    });\n\n    for (auto& row : out) {\n        sort(row.begin(), row.end(), [](int a, int b) {\n            return a > b;\n        });\n    }\n\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<vector<int>> get_row(vector<vector<int>> lst, int x) {\n    vector<vector<int>> out;\n    for (int i = 0; i < lst.size(); i++) {\n        for (int j = lst[i].size() - 1; j >= 0; j--) {\n            if (lst[i][j] == x) {\n                out.push_back({j, i});\n            }\n        }\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2!=1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end(),greater<int>());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2!=1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end(),greater<int>());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n\nif (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2!=1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        vector<int> out(array.size());\n        for (int i=array.size()-1;i>=0;i-=1)\n            out[i] = array[i];\n        return out;\n    }\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_vector(vector<int> array){\n\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2!=1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n\nif (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2!=1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2!=1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2!=1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end());\n        vector<int> out;\n        for (int i=array.size()-1;i>=0;i--)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}",
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n#include <stdlib.h>\n\nvector<int> sort_array(vector<int> array) {\n\n    if (array.size() == 0) return {};\n\n    if ((array[0] + array[array.size() - 1]) % 2 != 1) {\n        sort(array.begin(), array.end());\n        return array;\n    } else {\n        sort(array.begin(), array.end());\n        vector<int> out;\n        for (int i = array.size() - 1; i >= 0; i--) {\n            out.push_back(array[i]);\n        }\n        return out;\n    }\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2!=1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        sort(array.begin(),array.end(),greater<int>());\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> array){\n\n    if (array.size()==0) return {};\n    if ((array[0]+array[array.size()-1]) %2!=1)\n    {\n        sort(array.begin(),array.end());\n        return array;\n    }\n    else\n    {\n        vector<int> out={};\n        for (int i=array.size()-1;i>=0;i-=1)\n            out.push_back(array[i]);\n        return out;\n    }\n\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n\nstring out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+2*(int)'a')%24+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%24+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%24+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n\nstring out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+2*(int)'a')%24+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+2*(int)'a')%24+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%24+(int)'a';\n        out=out+(char)w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n\nstring out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%24+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n\nstring out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%24+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}\n",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring encrypt(string s) {\n    string out;\n    int i;\n    for (i = 0; i < s.length(); i++) {\n        int w = ((int)s[i] + 4 - (int)'a') % 24 + (int)'a';\n        out = out + (char)w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring encrypt(string s){\n    string out;\n    int i;\n    for (i=0;i<s.length();i++)\n    {\n        int w=((int)s[i]+4-(int)'a')%24+(int)'a';   \n        out=out+(char)w;\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n\nsort(lst.begin(),lst.end());\n    for (int i=2;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n\nsort(lst.begin(),lst.end());\n    for (int i=2;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n\nsort(lst.begin(),lst.end());\n    for (int i=2;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n\n    sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size() - 1; i++)\n        if (lst[i] != lst[i - 1]) return lst[i];\n    return -1;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(),lst.end());\n    for (int i=2;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n    sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size() - 1; i++) {\n        if (lst[i] != lst[i - 1] && lst[i] != lst[i + 1]) return lst[i];\n    }\n    return -1;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n\nsort(lst.begin(),lst.end());\n    for (int i=2;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n\nsort(lst.begin(),lst.end());\n    for (int i=2;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n\nsort(lst.begin(),lst.end());\n    for (int i=1;i<lst.size();i++)\n        if (lst[i]!=lst[i-1]) return lst[i];\n    return -1;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint next_smallest(vector<int> lst){\n\n    sort(lst.begin(), lst.end());\n    for (int i = 1; i < lst.size() - 1; i++)\n        if (lst[i] != lst[i - 1] && lst[i] != lst[i + 1])\n            return lst[i];\n    return -1;\n}"
    ],
    [
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nint is_bored(string S){\n    bool isstart = true;\n    bool isi = false;\n    int sum = 0;\n\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I' && isi) {\n            isi = false;\n            sum += 1;\n        }\n\n        if (S[i] == ' ' && isstart) {\n            isi = true;\n        } else {\n            isi = false;\n        }\n\n        if (S[i] != ' ') {\n            isstart = false;\n        }\n\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = true;\n        }\n    }\n\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]=='I' && isi) {isi=false; sum+=1;}\n        if (S[i]==' ' && isstart) {isi=true;}\n        else isi=false;\n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' || S[i]=='?' || S[i]=='!') isstart=true;\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n\n    bool isstart = true;\n    bool isi = false;\n    int sum = 0;\n    for (int i = 0; i < S.length(); i++)\n    {\n        if (S[i] == 'I' && isi) { isi = false; sum += 1; }\n        if (S[i] == ' ' && isstart) { isi = true; }\n        else isi = false;\n        if (S[i] != ' ') { isstart = false; }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') isstart = true;\n    }\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n\n    bool isstart = true;\n    bool isi = false;\n    int sum = 0;\n    for (int i = 0; i < S.length(); i++) {\n        if (S[i] == 'I' && isi) {\n            isi = false;\n            sum += 1;\n        }\n        if (S[i] == ' ' && isstart) {\n            isi = true;\n        } else {\n            isi = false;\n        }\n        if (S[i] != ' ') {\n            isstart = false;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = true;\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]=='I' and isi) {isi=false; sum+=1;}\n        if (S[i]==' ' and isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' or S[i]=='?' or S[i]=='!') isstart=true;\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n\nbool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]=='I' && isi) { sum++; isi=false; }\n        if (S[i]==' ' && isstart) { isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' || S[i]=='?' || S[i]=='!') isstart=true;\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n\n    bool isstart = true;\n    bool isi = false;\n    int sum = 0;\n    for (int i = 0; i < S.length(); i++)\n    {\n        if (S[i] == 'I' && isi) {\n            isi = false;\n            sum += 1;\n        }\n        if (S[i] == ' ' && isstart) {\n            isi = true;\n        }\n        else {\n            isi = false;\n        }\n        if (S[i] != ' ') {\n            isstart = false;\n        }\n        if (S[i] == '.' || S[i] == '?' || S[i] == '!') {\n            isstart = true;\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]=='I' && isi) { sum += 1; }\n        if (S[i]==' ' && isstart) { isi = true; }\n        else { isi = false; }\n        if (S[i]!=' ') { isstart = false; }\n        if (S[i]=='.' || S[i]=='?' || S[i]=='!') { isstart = true; }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]=='I' && isi) {isi=false; sum++;}\n        if (S[i]==' ' && isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' || S[i]=='?' || S[i]=='!') isstart=true;\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint is_bored(string S){\n\n    bool isstart=true;\n    bool isi=false;\n    int sum=0;\n    for (int i=0;i<S.length();i++)\n    {\n        if (S[i]=='I' && isi) {isi=false; sum+=1;}\n        if (S[i]==' ' && isstart) {isi=true;  }\n        else isi=false;   \n        if (S[i]!=' ') { isstart=false;}\n        if (S[i]=='.' || S[i]=='?' || S[i]=='!') isstart=true;\n    }\n    return sum;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a, float b, float c){\n\n    if (round(a) != a) return false;\n    if (round(b) != b) return false;\n    if (round(c) != c) return false;\n    if (a + b == c || b + c == a) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a, float b, float c) {\n    if (round(a) != a || round(b) != b || round(c) != c) return false;\n    if (a + b == c || b + c == a) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or b+c==a) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n\nif (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or b+c==a) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n\nif (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or b+c==a) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or b+c==a) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n\n    if (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or b+c==a) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a, float b, float c) {\n    if (round(a) != a) return false;\n    if (round(b) != b) return false;\n    if (round(c) != c) return false;\n    if (a + b == c || b + c == a) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n\nif (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or b+c==a) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool any_int(float a,float b,float c){\n\nif (round(a)!=a) return false;\n    if (round(b)!=b) return false;\n    if (round(c)!=c) return false;\n    if (a+b==c or b+c==a) return true;\n    return false;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n\n    string vowels=\"aeiou\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n    string vowels=\"aeiou\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n\n    string vowels=\"aeiou\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n\n    string vowels=\"aeiou\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n\nstring vowels=\"aeiou\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n\n    string vowels=\"aeiou\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}",
        "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nstring encode(string message) {\n    string vowels = \"aeiou\";\n    string out = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char w = message[i];\n        if (w >= 97 && w <= 122) {\n            w = w - 32;\n        } else if (w >= 65 && w <= 90) {\n            w = w + 32;\n        }\n        if (find(vowels.begin(), vowels.end(), w) != vowels.end()) {\n            w = w + 2;\n        }\n        out = out + w;\n    }\n    return out;\n}",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring encode(string message) {\n    string vowels = \"aeiou\";\n    string out = \"\";\n    for (int i = 0; i < message.length(); i++) {\n        char w = message[i];\n        if (w >= 97 && w <= 122) {\n            w = w - 32;\n        } else if (w >= 65 && w <= 90) {\n            w = w + 32;\n        }\n        if (find(vowels.begin(), vowels.end(), w) != vowels.end()) {\n            w = w + 2;\n        }\n        out = out + w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n\n    string vowels=\"aeiou\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring encode(string message){\n\nstring vowels=\"aeiou\";\n    string out=\"\";\n    for (int i=0;i<message.length();i++)\n    {\n        char w=message[i];\n        if (w>=97 and w<=122){w=w-32;}\n        else if (w>=65 and w<=90) w=w+32;\n        if (find(vowels.begin(),vowels.end(),w)!=vowels.end()) w=w+2;\n        out=out+w;\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n\nint largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            int prime=0; // Corrected to use int instead of bool\n            for (int j=2;j*j<=",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n\n    int largest=0;\n    for (int i=0;i<lst.size();i++) {\n        if (lst[i]>largest) {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++) {\n                if (lst[i]%j==0) {\n                    prime=false;\n                    break;\n                }\n            }\n            if (prime) {\n                largest=lst[i];\n                break;\n            }\n        }\n    }\n    \n    int sum=0;",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n\n    int largest = 0;\n    for (int i = 0; i < lst.size(); i++)\n        if (lst[i] > largest)\n        {\n            bool prime = false;\n            for (int j = 2; j * j <= lst[i]; j++)\n                if (lst[i] % j == 0)\n                    prime = true;\n            if (prime)\n                largest = lst[i];\n        }\n    int sum = 0;\n    string s;\n    s = to_string(largest);\n    for (int i = 0; i < s.length(); i++)\n        sum += s[i] - 48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n\nint largest=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]>largest)\n        {\n            bool prime=true;\n            for (int j=2;j*j<=lst[i];j++)\n                if (lst[i]%j==0) prime=false;\n            if (prime) largest=lst[i];\n        }\n    int sum=0;\n    string s;\n    s=to_string(largest);\n    for (int i=0;i<s.length();i++)\n        sum+=s[i]-48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>\n",
        "#include <cassert>\n#include <cmath>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nint skjkasdkd(vector<int> lst) {\n    int largest = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest) {\n            bool prime = false;\n            for (int j = 2; j * j <= lst[i]; j++) {\n                if (lst[i] % j ==",
        "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nint skjkasdkd(vector<int> lst) {\n    int largest = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest) {\n            bool prime = false;\n            for (int j = 2; j * j <= lst[i]; j++) {\n                if (lst[i] % j == 0)\n                    prime = true;\n            }\n            if (",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n\n    int largest=0;\n    for (int i=0;i<lst.size();i++) {\n        if (lst[i]>larg",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint largest_prime_sum(vector<int> lst){\n\n    int largest = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest) {\n            bool prime = false;\n            for (int j = 2; j * j <= lst[i]; j++) {\n                if (lst[i] % j == 0) prime = true;\n            }\n            if (prime) largest = lst[i];\n        }\n    }\n\n    int sum = 0;\n    string s;\n    s = to_string(largest);\n    for (int i = 0; i < s.length(); i++) {\n        sum += s[i] - 48;\n    }\n\n    return sum;\n}",
        "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nint largestPrimeSum(vector<int> lst) {\n    int largest = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] > largest) {\n            bool prime = true;\n            for (int j = 2; j * j <= lst[i]; j++) {\n                if (lst[i] % j == 0) {\n                    prime = false;\n                    break;\n                }\n            }\n            if (prime) {\n                largest = lst[i];\n            }\n        }\n    }\n    int sum = 0;\n    string s;\n    s = to_string(largest);\n    for (int i = 0; i < s.length(); i++) {\n        sum += s[i] - '0';\n    }\n    return sum;\n}\n\nint main() {\n    vector<int> lst1 = {0, 3, 2,",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint skjkasdkd(vector<int> lst){\n\n    int largest = 0;\n    for (int i = 0; i < lst.size(); i++)\n        if (lst[i] > largest)\n        {\n            bool prime = false;\n            for (int j = 2; j * j <= lst[i]; j++)\n                if (lst[i] % j == 0) prime = true;\n            if (prime) largest = lst[i];\n        }\n    int sum = 0;\n    string s;\n    s = to_string(largest);\n    for (int i = 0; i < s.length(); i++)\n        sum += s[i] - 48;\n    return sum;\n}\n#undef NDEBUG\n#include<assert.h>"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (is",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n\n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n\nmap<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (is",
        "#include <iostream>\n#include <map>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool check_dict_case(map<string, string> dict) {\n    if (dict.empty()) return false;\n\n    bool all_lower = true;\n    bool all_upper = true;\n\n    for (const auto& [key, value] : dict) {\n        for (const char c : key) {\n            if (islower(c)) all_upper = false;\n            if (isupper(c)) all_lower = false;\n        }\n    }\n\n    return all_lower || all_upper;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_map_case(map<string,string> dict){\n\n    if (dict.size()==0) return false;\n\n    for (auto it = dict.begin(); it != dict.end(); ++it) {\n        string key = it->first;\n        for (int i = 0; i < key.length(); i++) {\n            if (key[i] < 65 || (key[i] > 90 && key[i] < 97) || key[i] > 122) return false;\n            if (key[i] >= 65 && key[i] <= 90) isupper = 1;\n            if (key[i] >= 97 && key[i] <= 122) islower = 1;\n            if (isupper - islower == 2) return false;\n        }",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (is",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n\n    map<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (is",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n\nmap<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool check_dict_case(map<string,string> dict){\n\nmap<string,string>::iterator it;\n    int islower=0,isupper=0;\n    if (dict.size()==0) return false;\n    for (it=dict.begin();it!=dict.end();it++)\n    {\n        string key=it->first;\n    \n        for (int i=0;i<key.length();i++)\n        {\n            if (key[i]<65 or (key[i]>90 and key[i]<97) or key[i]>122) return false;\n            if (key[i]>=65 and key[i]<=90) isupper=1;\n            if (key[i]>=97 and key[i]<=122) islower=1;\n            if (isupper"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n\nvector<int> out;\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%j==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n\nvector<int> out;\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%j==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n\nvector<int> count_up_to(int n) {\n    vector<int> out;\n    for (int i = 2; i < n; i++) {\n        bool isPrime = true;\n        for (int j = 2; j * j <= i; j++) {\n            if (i % j == 0) {\n                isPrime = false;\n                break;\n            }\n        }\n        if (isPrime) {\n            out.push_back(i);\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n\n    vector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%j==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n\n    vector<int> out;\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%j==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n\n    vector<int> out = {};\n    int i, j;\n    for (i = 2; i < n; i++) {\n        if (out.size() == 0) {\n            out.push_back(i);\n        } else {\n            bool isp = true;\n            for (j = 0; out[j] * out[j] <= i; j++) {\n                if (i % j == 0) {\n                    isp = false;\n                    break;\n                }\n            }\n            if (isp) {\n                out.push_back(i);\n            }\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n\nvector<int> out={};\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;j<out.size() && out[j]*out[j]<=i;j++)\n                if (i%out[j]==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n\nvector<int> out;\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%j==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> count_up_to(int n){\n\nvector<int> out;\n    int i,j;\n    for (i=2;i<n;i++)\n        if (out.size()==0) {out.push_back(i);}\n        else\n        {\n            bool isp=true;\n            for (j=0;out[j]*out[j]<=i;j++)\n                if (i%j==0) isp=false;\n            if (isp) out.push_back(i);\n        }\n    return out;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n\nreturn (abs(a)%10)*(abs(b)%10);\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a, int b) {\n    return abs(a) % 10 * abs(b) % 10 * a * b;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a, int b){\n\nreturn (abs(a)%10)*(abs(b)%10);\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a, int b){\n\nreturn abs(a) % 10 * abs(b) % 10;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a, int b){\n    int product = 0;\n    while (a != 0 && b != 0) {\n        product += (a % 10) * (b % 10);\n        a /= 10;\n        b /= 10;\n    }\n    return product;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n\nreturn (abs(a)%10)*(abs(b)%10);\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n\nreturn (abs(a)%10)*(abs(b)%10);\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a, int b){\n\n    return abs(a) % 10 * abs(b) % 10 * a * b;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n\nreturn (abs(a)%10)*(abs(b)%10);\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint multiply(int a,int b){\n\nreturn (abs(a)%10)*(abs(b)%10);\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n    string uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i++)\n        if (i%2==0 && find(uvowel.begin(),uvowel.end(),s[i])!=uvowel.end())\n            count++;\n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n\nstring uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count++;\n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n\nstring uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n\nstring uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i+=2)\n    if (find(uvowel.begin(),uvowel.end(),s[i])!=uvowel.end())\n        count++;\n    return count;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n\nstring uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=2;\n    return count;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n\nstring uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n\nstring uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count++;\n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n\nstring uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count++;\n    return count;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n\nstring uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i*2<s.length();i++)\n    if (find(uvowel.begin(),uvowel.end(),s[i*2])!=uvowel.end())\n        count+=1;\n    return count;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint count_upper(string s){\n\nstring uvowel=\"AEIOU\";\n    int count=0;\n    for (int i=0;i<s.length();i+=2)\n    if (find(uvowel.begin(),uvowel.end(),s[i])!=uvowel.end())\n        count++;\n    return count;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n\ndouble w;\n    w=atof(value.c_str());\n    if (w - floor(w) == 0.5) {\n        return ceil(w);\n    } else {\n        return floor(w);\n    }\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n\n    double w;\n    w=atof(value.c_str());\n    if (w > 0) {\n        return floor(w);\n    } else {\n        return ceil(w);\n    }\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n\n    double w;\n    w = atof(value.c_str());\n    if (fabs(w - round(w)) == 0.5) {\n        if (w >= 0) {\n            return (int)ceil(w);\n        } else {\n            return (int)floor(w);\n        }\n    } else {\n        return (int)round(w);\n    }\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n\n    double w;\n    w=atof(value.c_str());\n    if (w - floor(w) == 0.5) {\n        if (w > 0) {\n            return ceil(w);\n        } else {\n            return floor(w);\n        }\n    } else {\n        return floor(w);\n    }\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n    double w;\n    w = atof(value.c_str());\n    return floor(w + 0.5);\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n\ndouble w;\n    w=atof(value.c_str());\n    if(w > 0)\n        return floor(w);\n    else\n        return ceil(w);\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n\ndouble w;\n    w=atof(value.c_str());\n    return (w < 0) ? ceil(w) : floor(w);\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n\ndouble w;\n    w=atof(value.c_str());\n    if (fabs(w-floor(w))==0.5) return (w>0) ? (int)ceil(w) : (int)floor(w);\n    return (int)w;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n\n    double w;\n    w=atof(value.c_str());\n    return (w >= 0.0) ? floor(w) : ceil(w);\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint closest_integer(string value){\n\n    double w;\n    w = atof(value.c_str());\n    if (w - floor(w) == 0.5) {\n        if (w >= 0) {\n            return ceil(w);\n        } else {\n            return floor(w);\n        }\n    } else {\n        return floor(w);\n    }\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n\nvector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+(n&1?1:2)+i);\n    return out;\n}",
        "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> out;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            out.push_back(2 * i);\n        } else {\n            out.push_back(2 * i + 1);\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n\nvector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2+i);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n\nvector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back((n%2==0)?(out[out.size()-1]+2+i):(out[out.size()-1]+2+i+1));\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n\nvector<int> out;\n    for (int i=1;i<=n;i++)\n        out.push_back(n+((n+1)%2)*(i-1));\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n\nvector<int> out={n};\n    for (int i=1;i<n;i++)\n        out.push_back(out[out.size()-1]+2+i);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n\n    vector<int> out;\n    out.push_back(n);\n    for (int i=1;i<n;i++) {\n        out.push_back(out[out.size()-1] + 2 + i);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> make_a_pile(int n){\n\n    vector<int> out;\n    for (int i=0; i < n; i++) {\n        out.push_back(i % 2 == 0 ? i + 1 : i + 2);\n    }\n    return out;\n}\n",
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> out;\n    out.push_back(n);\n    for (int i = 1; i < n; i++) {\n        out.push_back(out.back() + (n % 2 == 0 ? 2 : 1) + i);\n    }\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> make_a_pile(int n) {\n    vector<int> out;\n    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            out.push_back(n);\n        } else {\n            out.push_back(n + 1);\n        }\n    }\n    return out;\n}"
    ],
    [
        "#include <iostream>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\nvector<string> words_string(string s) {\n    vector<string> out;\n    string current = \", \";\n\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current.length() > 0) {\n                out.push_back(current);\n                current = \", \";\n            }\n        } else {\n            current += s[i];\n        }\n    }\n\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n\nstring current=\",\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\",\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n\nstring current=\",\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\",\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n    vector<string> out;\n    string current;\n    bool space = false;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current.length() > 0) {\n                out.push_back(current);\n                current.clear();\n                space = true;\n            }\n        } else {\n            if (space) {\n                out.push_back(\"\");\n                space = false;\n            }\n            current += s[i];\n        }\n    }\n    if (current.length() > 0) {\n        out.push_back(current);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n\nstring current=\",\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\",\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n\nstring current=\",\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n     if (s[i]==' ' or s[i]==',')\n     {\n        if (current.length()>0)\n        {\n            out.push_back(current);\n            current=\",\";\n        }\n     }\n     else current=current+s[i];\n     return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n\n    string current=\",\";\n    vector<string> out;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    {\n        if (s[i]==' ' or s[i]==',')\n        {\n            if (current.length()>0)\n            {\n                out.push_back(current);\n                current=\",\";\n            }\n        }\n        else current=current+s[i];\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n\n    string current=\",\";\n    vector<string> out;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    {\n        if (s[i]==' ' or s[i]==',')\n        {\n            if (current.length()>0)\n            {\n                out.push_back(current);\n                current=\",\";\n            }\n        }\n        else current=current+s[i];\n    }\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nvector<string> words_string(string s) {\n    vector<string> out;\n    string current;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ' || s[i] == ',') {\n            if (current.length() > 0) {\n                out.push_back(current);\n                current = \"\";\n            }\n        } else {\n            current += s[i];\n        }\n    }\n    if (current.length() > 0) {\n        out.push_back(current);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> words_string(string s){\n\n    string current=\",\";\n    vector<string> out={};\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n    {\n        if (s[i]==' ' or s[i]==',')\n        {\n            if (current.length()>0)\n            {\n                out.push_back(current);\n                current=\",\";\n            }\n        }\n        else\n        {\n            current=current+s[i];\n        }\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    int mid = (x + y) / 2;\n    if (mid % 2 == 0) {\n        if (mid >= x && mid <= y) return mid;\n        else return choose_num(x, mid - 1);\n    } else {\n        if (mid + 1 >= x && mid + 1 <= y) return mid + 1;\n        else return choose_num(mid + 1, y);\n    }\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n\nif (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return x-1;\n    return y;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n\nif (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return x-1;\n    return y;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x, int y) {\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return x - 1;\n    return y;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n\nif (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return x-1;\n    return y;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x, int y){\n\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return x - 1;\n    return y;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x,int y){\n\nif (y<x) return -1;\n    if (y==x and y%2==1) return -1;\n    if (y%2==1) return x-1;\n    return y;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x, int y){\n\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return x - 1;\n    return y;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x, int y){\n\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return x - 1;\n    return y;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint choose_num(int x, int y) {\n\n    if (y < x) return -1;\n    if (y == x && y % 2 == 1) return -1;\n    if (y % 2 == 1) return x - 1;\n    return y;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n, int m) {\n\n    if (n > m) return \"-1\";\n\n    int num = (m + n + 1) / 2;\n    string out = \"\";\n    while (num > 0) {\n        out = to_string(num % 2) + out;\n        num = num / 2;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n\nif (n>m) return \"-1\";\n    int num=(n+m+1)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n>m) return \"-1\";\n    int num=(m+n+1)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n\nif (n>m) return \"-1\";\n    int num=(n+m+1)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n    if (n > m) return \"-1\";\n    int num = (m + n + 1) / 2;\n    string out = \"\";\n    while (num > 0) {\n        out = to_string(num % 2) + out;\n        num = num / 2;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n, int m){\n\nif (n > m) return \"-1\";\n    int num = (m + n + 1) / 2;\n    string out = \"\";\n    while (num > 0)\n    {\n        out = to_string(num % 2) + out;\n        num = num / 2;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n, int m){\n    if (n > m) return \"-1\";\n    int num = (m + n + 1) / 2;\n    string out = \"\";\n    while (num > 0) {\n        out = to_string(num % 2) + out;\n        num /= 2;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n, int m) {\n\n    if (n > m) return \"-1\";\n    int num = (m + n + 1) / 2;\n    string out = \"\";\n    while (num > 0) {\n        out = to_string(num % 2) + out;\n        num = num / 2;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n\nif (n>m) return \"-1\";\n    int num=(m+n+1)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring rounded_avg(int n,int m){\n\nif (n>m) return \"-1\";\n    int num=(m+n+1)/2;\n    string out=\"\";\n    while (num>0)\n    {\n        out=to_string(num%2)+out;\n        num=num/2;\n    }\n    return out;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n\n    vector<int> out = {};\n    for (int i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool u = true;\n        if (num == 0) u = false;\n        while (num > 0 and u) {\n            if (num % 2 == 0) u = false;\n            num = num / 10;\n        }\n        if (u) out.push_back(x[i]);\n    }\n    sort(out.begin(), out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n\n    vector<int> out;\n    for (int i=0;i<x.size();i++)\n    {\n        int num=x[i];\n        bool u=true;\n        if (num==0) u=false;\n        while (num>0 and u)\n        {\n            if (num%2==0) u=false;\n            num/=10;\n        }\n        if (u) out.push_back(x[i]);\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n\n    vector<int> out;\n    for (int i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool u = true;\n        if (num == 0) u = false;\n        while (num > 0 and u) {\n            if (num % 2 == 0) u = false;\n            num /= 10;\n        }\n        if (u) out.push_back(x[i]);\n    }\n    sort(out.begin(), out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n\nvector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(num);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n\nvector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n            if (u) out.push_back(num);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n\n    vector<int> out;\n    for (int i=0;i<x.size();i++)\n    {\n        int num=x[i];\n        bool u=true;\n        if (num==0) u=false;\n        while (num>0 and u)\n        {\n            if (num%2==0) u=false;\n            num=num/10;\n        }\n        if (u) out.push_back(x[i]);\n        if (u) out.push_back(num);\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n\nvector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n            if (u) out.push_back(num);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n\n    vector<int> out = {};\n    for (int i = 0; i < x.size(); i++) {\n        int num = x[i];\n        bool u = true;\n        if (num == 0) u = false;\n        while (num > 0 and u) {\n            if (num % 2 == 0) u = false;\n            num = num / 10;\n        }\n        if (u) out.push_back(x[i]);\n    }\n    sort(out.begin(), out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n\n    vector<int> out;\n    for (int i=0;i<x.size();i++)\n    {\n        int num=x[i];\n        bool u=true;\n        if (num==0) u=false;\n        while (num>0 and u)\n        {\n            if (num%2==0) u=false;\n            num=num/10;\n        }\n        if (u) out.push_back(x[i]);\n        if (u) out.push_back(num);\n    }\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> unique_digits(vector<int> x){\n\nvector<int> out={};\n    for (int i=0;i<x.size();i++)\n        {\n            int num=x[i];\n            bool u=true;\n            if (num==0) u=false;\n            while (num>0 and u)\n            {\n                if (num%2==0) u=false;\n                num=num/10;\n            }\n            if (u) out.push_back(x[i]);\n        }\n    sort(out.begin(),out.end());\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n\nmap<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n\nmap<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}\n",
        "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> by_length(vector<int> arr) {\n    map<int, string> numto = {{0, \"Zero\"}, {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n    vector<string> out;\n\n    for (int i = arr.size() - 1; i >= 0; i--) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            out.push_back(numto[arr[i]]);\n        }\n    }\n\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n            out.push_back(numto[arr[i]]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n            out.push_back(numto[arr[i]]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1)\n        if (arr[i]>=1 and arr[i]<=9)\n        out.push_back(numto[arr[i]]);\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> by_length(vector<int> arr){\n    map<int,string> numto={{0,\"Zero\"},{1,\"One\"},{2,\"Two\"},{3,\"Three\"},{4,\"Four\"},{5,\"Five\"},{6,\"Six\"},{7,\"Seven\"},{8,\"Eight\"},{9,\"Nine\"}};\n    vector<string> out={};\n    for (int i=arr.size()-1;i>=0;i-=1) {\n        if (arr[i]>=1 and arr[i]<=9) {\n            out.push_back(numto[arr[i]]);\n        }\n    }\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n#include <string>\n#include <map>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> by_length(vector<int> arr) {\n    map<int, string> numto = {{0, \"Zero\"}, {1, \"One\"}, {2, \"Two\"}, {3, \"Three\"}, {4, \"Four\"}, {5, \"Five\"}, {6, \"Six\"}, {7, \"Seven\"}, {8, \"Eight\"}, {9, \"Nine\"}};\n    vector<string> out;\n\n    // Sort the integers between 1 and 9 inclusive\n    sort(arr.begin(), arr.end());\n\n    // Reverse the sorted vector\n    reverse(arr.begin(), arr.end());\n\n    // Replace each digit by its corresponding name\n    for (int i = 0; i < arr.size(); i++) {\n        if (arr[i] >= 1 && arr[i] <= 9) {\n            out.push_back(numto[arr[i"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n\n    int sum=0,prod=1;\n    vector<int> out;\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (prod%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n\nint sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (prod%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}",
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> out;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            out.push_back(factorial(i));\n        } else {\n            out.push_back(sum(i));\n        }\n    }\n    return out;\n}\n\nint factorial(int n) {\n    int result = 1;\n    for (int i = 1; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nint sum(int n) {\n    int result = 0;\n    for (int i = 1; i <= n; i++) {\n        result += i;\n    }\n    return result;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n\nint sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (i%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n    vector<int> out;\n    for (int i=1;i<=n;i++)\n    {\n        if (i % 2 == 0) out.push_back(factorial(i));\n        else out.push_back(sum(i));\n    }\n    return out;\n}\n\nint factorial(int n){\n    int result = 1;\n    for (int i=1; i <= n; i++)\n        result *= i;\n    return result;\n}\n\nint sum(int n){\n    int result = 0;\n    for (int i=1; i <= n; i++)\n        result += i;\n    return result;\n}",
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n#include <algorithm>\n#include <stdlib.h>\nvector<int> f(int n) {\n    vector<int> out;\n    for (int i = 1; i <= n; i++) {\n        if (i % 2 == 0) {\n            out.push_back(factorial(i));\n        } else {\n            out.push_back(sum(1, i));\n        }\n    }\n    return out;\n}\n\nint factorial(int n) {\n    int result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nint sum(int a, int b) {\n    int result = 0;\n    for (int i = a; i <= b; i++) {\n        result += i;\n    }\n    return result;\n}",
        "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvector<int> f(int n) {\n    vector<int> out;\n    for (int i = 1; i <= n; i++) {\n        int sum = 0, prod = 1;\n        for (int j = 1; j <= i; j++) {\n            sum += j;\n            prod *= j;\n        }\n        if (prod % 2 == 0) {\n            out.push_back(prod);\n        } else {\n            out.push_back(sum);\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n\nint sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (prod%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n\nint sum=0,prod=1;\n    vector<int> out={};\n    for (int i=1;i<=n;i++)\n    {\n        sum+=i;\n        prod*=i;\n        if (prod%2==0) out.push_back(prod);\n        else out.push_back(sum);\n    } \n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> f(int n){\n\n    vector<int> out(n);\n    for (int i=1;i<=n;i++)\n    {\n        if (i%2==0) out[i-1] = factorial(i);\n        else out[i-1] = sum(1, i);\n    } \n    return out;\n}\n\nint factorial(int n) {\n    int result = 1;\n    for (int i = 2; i <= n; i++) {\n        result *= i;\n    }\n    return result;\n}\n\nint sum(int start, int end) {\n    int result = 0;\n    for (int i = start; i <= end; i++) {\n        result += i;\n    }\n    return result;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n\nint num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1++;\n        if (w==p and i%2==0) num2++;\n            \n    }\n    return {num2,num1};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n\n    int num1 = 0, num2 = 0;\n    for (int i = 1; i <= n; i++) {\n        string w = to_string(i);\n        string p(w.rbegin(), w.rend());\n        if (w == p && i % 2 == 1) num1++;\n        if (w == p && i % 2 == 0) num2++;\n    }\n    return {num2, num1};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n\n    int num1 = 0, num2 = 0;\n    for (int i = 1; i <= n; i++)\n    {\n        string w = to_string(i);\n        string p(w.rbegin(), w.rend());\n        if (w == p && i % 2 == 1) num1++;\n        if (w == p && i % 2 == 0) num2++;\n    }\n    return {num2, num1};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n\nint num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1++;\n        if (w==p and i%2==0) num2++;\n            \n    }\n    return {num2,num1};\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n\nint num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1++;\n        if (w==p and i%2==0) num2++;\n            \n    }\n    return {num2,num1};\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n\n    int num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1++;\n        if (w==p and i%2==0) num2++;\n    }\n    return {num2,num1};\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n\nint num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1++;\n        if (w==p and i%2==0) num2++;\n            \n    }\n    return {num2,num1};\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n\nint num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1++;\n        if (w==p and i%2==0) num2++;\n            \n    }\n    return {num2,num1};\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n\nint num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1++;\n        if (w==p and i%2==0) num2++;\n            \n    }\n    return {num2,num1};\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_palindrome(int n){\n\nint num1=0,num2=0;\n    for (int i=1;i<=n;i++)\n    {\n        string w=to_string(i);\n        string p(w.rbegin(),w.rend());\n        if (w==p and i%2==1) num1+=1;\n        if (w==p and i%2==0) num2+=1;\n            \n    }\n    return {num2,num1};\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n\n    int num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w*-1;\n            if (sum>0) num+=1;\n        }\n    return num;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n\nint num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w*-1;\n            if (sum>0) num+=1;\n        }\n    return num;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n\nint num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w*-1;\n            if (sum>0) num+=1;\n        }\n    return num;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n\n    int num=0;\n    for (int i=0;i<n.size();i++)\n    {\n        if (n[i] > 0) num += 1;\n        else\n        {\n            int sum=0;\n            int w;\n            w = abs(n[i]);\n            while (w >= 10)\n            {\n                sum += w % 10;\n                w = w / 10;\n            }\n            sum -= w * -1;\n            if (sum > 0) num += 1;\n        }\n    }\n    return num;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n\nint num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w*-1;\n            if (sum>0) num+=1;\n        }\n    return num;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n\nint num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w*-1;\n            if (sum>0) num+=1;\n        }\n    return num;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n\nint num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w*-1;\n            if (sum>0) num+=1;\n        }\n    return num;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n\nint num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w*-1;\n            if (sum>0) num+=1;\n        }\n    return num;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n\n    int num=0;\n    for (int i=0;i<n.size();i++)\n    {\n        if (n[i]>0) num++;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w*-1;\n            if (sum>0) num++;\n        }\n    }\n    return num;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint count_nums(vector<int> n){\n\nint num=0;\n    for (int i=0;i<n.size();i++)\n        if (n[i]>0) num+=1;\n        else\n        {\n            int sum=0;\n            int w;\n            w=abs(n[i]);\n            while (w>=10)\n            {\n                sum+=w%10;\n                w=w/10;\n            }\n            sum-=w*-1;\n            if (sum>0) num+=1;\n        }\n    return num;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[arr.size()-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[arr.size()-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[arr.size()-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[arr.size()-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[arr.size()-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n\n    if (arr.size()==0) return true;\n    int num=0;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[arr.size()-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[arr.size()-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[arr.size()-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n\n    int num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[arr.size()-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool move_one_ball(vector<int> arr){\n\nint num=0;\n    if (arr.size()==0) return true;\n    for (int i=1;i<arr.size();i++)\n        if (arr[i]<arr[arr.size()-1]) num+=1;\n    if (arr[arr.size()-1]>arr[0]) num+=1;\n    if (num<2) return true;\n    return false;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int num = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 == 0) num += 1;\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2[i] % 2 == 0) num += 1;\n    }\n    if (num >= lst1.size()) return \"YES\";\n    return \"NO\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1, vector<int> lst2){\n\n    int num = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 == 0) num += 1;\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2[i] % 2 == 0) num += 1;\n    }\n    if (num < lst1.size()) return \"YES\";\n    return \"NO\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1, vector<int> lst2) {\n\n    int num = 0;\n    for (int i = 0; i < lst1.size(); i++)\n        if (lst1[i] % 2 == 0)\n            num++;\n    for (int i = 0; i < lst2.size(); i++)\n        if (lst2[i] % 2 == 0)\n            num++;\n    if (num < lst1.size())\n        return \"YES\";\n    return \"NO\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1, vector<int> lst2) {\n\n    int num = 0;\n    for (int i = 0; i < lst1.size(); i++)\n        if (lst1[i] % 2 == 0)\n            num += 1;\n    for (int i = 0; i < lst2.size(); i++)\n        if (lst2[i] % 2 == 0)\n            num += 1;\n    if (num >= lst1.size())\n        return \"YES\";\n    return \"NO\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1, vector<int> lst2) {\n\n    int num = 0;\n    for (int i = 0; i < lst1.size(); i++)\n        if (lst1[i] % 2 == 0) num += 1;\n    for (int i = 0; i < lst2.size(); i++)\n        if (lst2[i] % 2 == 0) num += 1;\n    if (num < lst1.size()) return \"YES\";\n    return \"NO\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int num = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 == 0) num += 1;\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2[i] % 2 == 0) num += 1;\n    }\n    if (num < lst1.size()) return \"YES\";\n    return \"NO\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num<lst1.size()) return \"YES\";\n    return \"NO\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1, vector<int> lst2) {\n    int num = 0;\n    for (int i = 0; i < lst1.size(); i++) {\n        if (lst1[i] % 2 == 0) num += 1;\n    }\n    for (int i = 0; i < lst2.size(); i++) {\n        if (lst2[i] % 2 == 0) num += 1;\n    }\n    if (num < lst1.size()) return \"YES\";\n    return \"NO\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n\nint num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring exchange(vector<int> lst1,vector<int> lst2){\n\n    int num=0;\n    for (int i=0;i<lst1.size();i++)\n    if (lst1[i]%2==0) num+=1;\n    for (int i=0;i<lst2.size();i++)\n    if (lst2[i]%2==0) num+=1;\n    if (num>=lst1.size()) return \"YES\";\n    return \"NO\";\n}"
    ],
    [
        "#include <iostream>\n#include <string>\n#include <map>\n\nusing namespace std;\n\nmap<char, int> histogram(const string& test) {\n    map<char, int> count, out;\n    int max = 0;\n\n    for (int i = 1; i < test.length(); i++) {\n        if (test[i] != ' ') {\n            count[test[i]]++;\n            if (count[test[i]] > max) {\n                max = count[test[i]];\n            }\n        }\n    }\n\n    for (auto it = count.begin(); it != count.end(); it++) {\n        char w1 = it->first;\n        int w2 = it->second;\n        if (w2 == max) {\n            out[w1] = w2;\n        }\n    }\n\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=1;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n\n    map<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=1;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]++;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}\n\nThe bug in the original code is in the line where the count is incremented. It should be `count[test[",
        "#include <stdio.h>\n#include <math.h>\n#include <string>\n#include <map>\nusing namespace std;\n#include <algorithm>\n#include <stdlib.h>\nmap<char, int> histogram(string test) {\n\n    map<char, int> count = {}, out = {};\n    map<char, int>::iterator it;\n    int max = 0;\n    for (int i = 1; i < test.length(); i++) {\n        if (test[i] != ' ') {\n            count[test[i]] += 1;\n            if (count[test[i]] > max)\n                max = count[test[i]];\n        }\n    }\n    for (it = count.begin(); it != count.end(); it++) {\n        char w1 = it->first;\n        int w2 = it->second;\n        if (w2 == max)\n            out[w1] = w2;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n\nmap<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=1;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n\nmap<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=1;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]++; // Fixed the increment operator from += to ++\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}",
        "#include <iostream>\n#include <string>\n#include <map>\n#include <algorithm>\n#include <cctype>\n\nusing namespace std;\n\nmap<char, int> histogram(string test) {\n    map<char, int> count;\n    map<char, int> out;\n    int max = 0;\n\n    for (int i = 1; i < test.length(); i++) {\n        if (test[i] != ' ') {\n            count[tolower(test[i])]++;\n            if (count[tolower(test[i])] > max) max = count[tolower(test[i])];\n        }\n    }\n\n    for (auto it = count.begin(); it != count.end(); it++) {\n        char w1 = it->first;\n        int w2 = it->second;\n        if (w2 == max) out[w1] = w2;\n    }\n\n    return out;\n}",
        "#include <iostream>\n#include <string>\n#include <map>\n\nusing namespace std;\n\nmap<char, int> histogram(string test) {\n    map<char, int> count, out;\n    int max = 0;\n    for (int i = 1; i < test.length(); i++) {\n        if (test[i] != ' ') {\n            count[test[i]] += 1;\n            if (count[test[i]] > max) {\n                max = count[test[i]];\n            }\n        }\n    }\n    for (auto it = count.begin(); it != count.end(); it++) {\n        char w1 = it->first;\n        int w2 = it->second;\n        if (w2 == max) {\n            out[w1] = w2;\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n\n    map<char,int> count={}, out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=1;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nmap<char,int> histogram(string test){\n\nmap<char,int> count={},out={};\n    map <char,int>::iterator it;\n    int max=0;\n    for (int i=1;i<test.length();i++)\n        if (test[i]!=' ')\n        {\n            count[test[i]]+=1;\n            if (count[test[i]]>max) max=count[test[i]];\n        }\n    for (it=count.begin();it!=count.end();it++)\n    {\n        char w1=it->first;\n        int w2=it->second;\n        if (w2==max) out[w1]=w2;\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s, string c){\n    string n = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (find(c.begin(), c.end(), s[i]) == c.end()) {\n            n = n + s[i];\n        }\n    }\n    if (n.length() == 0) {\n        return { n, \"True\" };\n    }\n    string w(n.rbegin(), n.rend());\n    if (w == n) {\n        return { n, \"False\" };\n    }\n    return { n, \"True\" };\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s, string c){\n    string n = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (find(c.begin(), c.end(), s[i]) == c.end()) {\n            n = n + s[i];\n        }\n    }\n    if (n.length() == 0) {\n        return { n, \"True\" };\n    }\n    string w(n.rbegin(), n.rend());\n    if (w == n) {\n        return { n, \"False\" };\n    }\n    return { n, \"True\" };\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s, string c) {\n    string n = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (find(c.begin(), c.end(), s[i]) == c.end()) {\n            n = n + s[i];\n        }\n    }\n    if (n.length() == 0) return { n, \"True\" };\n    string w(n.rbegin(), n.rend());\n    if (w == n) return { n, \"False\" };\n    return { n, \"True\" };\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s, string c){\n\n    string n = \"\";\n    for (int i = 0; i < s.length(); i++)\n        if (find(c.begin(), c.end(), s[i]) == c.end())\n            n = n + s[i];\n    if (n.length() == 0) return {n, \"True\"};\n    string w(n.rbegin(), n.rend());\n    if (w == n) return {n, \"False\"};\n    return {n, \"True\"};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"False\"};\n    return {n,\"True\"};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n        if (find(c.begin(),c.end(),s[i])==c.end())\n            n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"False\"};\n    return {n,\"True\"};\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s, string c){\n\n    string n = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (find(c.begin(), c.end(), s[i]) == c.end()) {\n            n = n + s[i];\n        }\n    }\n    if (n.length() == 0) {\n        return { n, \"True\" };\n    }\n    string w(n.rbegin(), n.rend());\n    if (w == n) {\n        return { n, \"False\" };\n    }\n    return { n, \"True\" };\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n    string n=\"\";\n    for (int i=0;i<s.length();i++)\n        if (find(c.begin(),c.end(),s[i])==c.end())\n            n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"False\"};\n    return {n,\"True\"};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s,string c){\n\nstring n=\"\";\n    for (int i=0;i<s.length();i++)\n    if (find(c.begin(),c.end(),s[i])==c.end())\n        n=n+s[i]; \n    if (n.length()==0) return {n,\"True\"};\n    string w(n.rbegin(),n.rend());\n    if (w==n) return {n,\"False\"};\n    return {n,\"True\"};\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> reverse_delete(string s, string c) {\n    string n = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        if (find(c.begin(), c.end(), s[i]) == c.end()) {\n            n = n + s[i];\n        }\n    }\n    if (n.length() == 0) {\n        return { n, \"True\" };\n    }\n    string w(n.rbegin(), n.rend());\n    if (w == n) {\n        return { n, \"False\" };\n    }\n    return { n, \"True\" };\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n\nvector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n\n    vector<string> out;\n    for (int i=0;i<lst.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<lst[i].length();j++)\n            if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n        string s=\"the number of odd elements in the string i of i the input.\";\n        string s2=\"\";\n        for (int j=0;j<s.length();j++)\n            if (s[j]=='i') s2=s2+to_string(sum);\n            else s2=s2+s[j];\n        out.push_back",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n\nvector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of i the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n\nvector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of i the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n\n    vector<string> out;\n    for (int i=0;i<lst.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<lst[i].length();j++)\n        {\n            if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n        }\n        string s=\"the number of odd elements in the string i of i the input.\";\n        string s2=\"\";\n        for (int j=0;j<s.length();j++)\n        {\n            if (s[j]=='i') s2=s2+to_string(sum);\n            else s2=s2+s[",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n\nvector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of i the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n\nvector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n\nvector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back(",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n\nvector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of i the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<map>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<string> odd_count(vector<string> lst){\n\nvector<string> out={};\n    for (int i=0;i<lst.size();i++)\n        {\n            int sum=0;\n            for (int j=0;j<lst[i].length();j++)\n                if (lst[i][j]>=48 and lst[i][j]<=57 and lst[i][j]%2==1)\n                sum+=1;\n            string s=\"the number of odd elements in the string i of the input.\";\n            string s2=\"\";\n            for (int j=0;j<s.length();j++)\n                if (s[j]=='i') s2=s2+to_string(sum);\n                else s2=s2+s[j];\n            out.push_back("
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n\nlong long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums.size();\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n\n    long long current = 0;\n    long long min = nums[0];\n    for (int i = 0; i < nums.size(); i++) {\n        current += nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n\n    long long current, min;\n    current = nums[0];\n    min = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (current < 0) {\n            current += nums.size();\n        } else {\n            current += nums[i];\n        }\n        if (current < min) {\n            min = current;\n        }\n    }\n    return min;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n\n    long long current, min;\n    current = nums[0];\n    min = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (current < 0) current = current + nums.size();\n        else current = nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n\n    long long current, min;\n    current = nums[0];\n    min = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (current < 0) current += nums.size();\n        else current += nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n\nlong long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums.size();\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n\nlong long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums.size();\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n\n    long long current, min;\n    current = nums[0];\n    min = nums[0];\n    for (int i = 1; i < nums.size(); i++) {\n        if (current < 0) {\n            current = current + nums.size();\n        } else {\n            current = nums[i];\n        }\n        if (current < min) {\n            min = current;\n        }\n    }\n    return min;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n\nlong long current,min;\n    current=nums[0];\n    min=nums[0];\n    for (int i=1;i<nums.size();i++)\n    {\n       if (current<0) current=current+nums.size();\n       else current=nums[i];\n       if (current<min) min=current;\n    }\n    return min;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nlong long minSubArraySum(vector<long long> nums){\n\n    long long current = 0;\n    long long min = nums[0];\n    for (int i = 0; i < nums.size(); i++) {\n        current += nums[i];\n        if (current < min) min = current;\n    }\n    return min;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n\nint out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=sum/capacity+1;\n    }\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int out = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        int sum = 0;\n        for (int j = 0; j < grid[i].size(); j++)\n            sum += grid[i][j];\n        if (sum > 0)\n            out += sum / capacity + 1;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int out = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        int sum = 0;\n        for (int j = 0; j < grid[i].size(); j++)\n            sum += grid[i][j];\n        if (sum > 0)\n            out += sum / capacity + 1;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int out = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        int sum = 0;\n        for (int j = 0; j < grid[i].size(); j++)\n            sum += grid[i][j];\n        if (sum > 0)  out += sum / capacity + 1;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid, int capacity) {\n\n    int out = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        int sum = 0;\n        for (int j = 0; j < grid[i].size(); j++) {\n            sum += grid[i][j];\n        }\n        if (sum > 0)\n            out += sum / capacity + 1;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n\n    int out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=sum/capacity+1;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid,int capacity){\n\nint out=0;\n    for (int i=0;i<grid.size();i++)\n    {\n        int sum=0;\n        for (int j=0;j<grid[i].size();j++)\n            sum+=grid[i][j];\n        if (sum>0)  out+=sum/capacity+1;\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint max_fill(vector<vector<int>> grid, int capacity) {\n\n    int out = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        int sum = 0;\n        for (int j = 0; j < grid[i].size(); j++) {\n            sum += grid[i][j];\n        }\n        if (sum > 0) {\n            out += sum / capacity + 1;\n        }\n    }\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int out = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        int sum = 0;\n        for (int j = 0; j < grid[i].size(); j++) {\n            sum += grid[i][j];\n        }\n        if (sum > 0) {\n            out += sum / capacity + 1;\n        }\n    }\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint max_fill(vector<vector<int>> grid, int capacity) {\n    int out = 0;\n    for (int i = 0; i < grid.size(); i++) {\n        int sum = 0;\n        for (int j = 0; j < grid[i].size(); j++) {\n            sum += grid[i][j];\n        }\n        if (sum > 0) {\n            out += sum / capacity + 1;\n        }\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j] < bin[j-1] || (bin[j] == bin[j-1] && arr[j] < arr[j-1]))\n    {\n        m = arr[j]; arr[j] = arr[j-1]; arr[j-1] = m",
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n#include <stdlib.h>\n\nvector<int> sort_array(vector<int> arr) {\n    vector<int> bin;\n    int m;\n\n    for (int i = 0; i < arr.size(); i++) {\n        int b = 0, n = abs(arr[i]);\n        while (n > 0) {\n            b += n % 2;\n            n /= 2;\n        }\n        bin.push_back(b);\n    }\n\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = 1; j < arr.size(); j++) {\n            if (bin[j] < bin[j - 1] || (bin[j] == bin[j - 1] && arr[j] < arr[j - 1])) {\n                m = arr[j];\n                arr[j] = arr[j -",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n\nvector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n\nvector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n\nvector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j]<bin[j-1] or (bin[j]==bin[j-1] and arr[j]<arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n\nvector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j] < bin[j-1] || (bin[j] == bin[j-1] && arr[j] < arr[j-1]))\n    {\n        m = arr[j]; arr[j] = arr[j-1]; arr[j-1] = m;",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> sort_array(vector<int> arr) {\n    vector<int> bin;\n    int m;\n\n    for (int i = 0; i < arr.size(); i++) {\n        int b = 0, n = abs(arr[i]);\n        while (n > 0) {\n            b += n % 2;\n            n /= 2;\n        }\n        bin.push_back(b);\n    }\n\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = 1; j < arr.size(); j++) {\n            if (bin[j] < bin[j - 1] || (bin[j] == bin[j - 1] && arr[j] < arr[j - 1])) {\n                m = arr[j];\n                arr[j] = arr[j - 1];\n                arr[j - 1] = m;",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n\nvector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j] < bin[j-1] || (bin[j] == bin[j-1] && arr[j] < arr[j-1]))\n    {\n        m = arr[j];\n        arr[j] = arr[j-1];\n        arr[j-1",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> sort_array(vector<int> arr) {\n    vector<int> bin;\n    int m;\n\n    for (int i = 0; i < arr.size(); i++) {\n        int b = 0, n = abs(arr[i]);\n        while (n > 0) {\n            b += n % 2;\n            n /= 2;\n        }\n        bin.push_back(b);\n    }\n\n    for (int i = 0; i < arr.size(); i++) {\n        for (int j = 1; j < arr.size(); j++) {\n            if (bin[j] < bin[j - 1] || (bin[j] == bin[j - 1] && arr[j] < arr[j - 1])) {\n                m = arr[j];\n                arr[j] = arr[j - 1];\n                arr[j - 1] = m;",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> sort_array(vector<int> arr){\n\n    vector<int> bin={};\n    int m;\n\n    for (int i=0;i<arr.size();i++)\n    {\n        int b=0,n=abs(arr[i]);\n        while (n>0)\n        {\n            b+=n%2;n=n/2;\n        }\n        bin.push_back(b);\n    }\n    for (int i=0;i<arr.size();i++)\n    for (int j=1;j<arr.size();j++)\n    if (bin[j] < bin[j-1] || (bin[j] == bin[j-1] && arr[j] < arr[j-1]))\n    {\n        m=arr[j];arr[j]=arr[j-1];arr[j-1]=m;"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s, int n) {\n    string vowels = \"aeiouAEIOU\";\n    string current = \"\";\n    vector<string> out = {};\n    int numc = 0;\n    s = s + ' ';\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (numc == n) {\n                out.push_back(current);\n            }\n            current = \"\";\n            numc = 0;\n        } else {\n            current = current + s[i];\n            if ((s[i] >= 65 && s[i] <= 90) || (s[i] >= 97 && s[i] <= 122)) {\n                if (find(vowels.begin(), vowels.",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s, int n) {\n\n    string vowels = \"aeiouAEIOU\";\n    string current = \"\";\n    vector<string> out = {};\n    int numc = 0;\n    s = s + ' ';\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (numc == n)\n                out.push_back(current);\n            current = \"\";\n            numc = 0;\n        }\n        else {\n            current = current + s[i];\n            if ((s[i] >= 65 && s[i] <= 90) || (s[i] >= 97 && s[i] <= 122)) {\n                if (find(vowels.begin(), vowels.end",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s, int n) {\n\n    string vowels = \"aeiouAEIOU\";\n    string current = \"\";\n    vector<string> out = {};\n    int numc = 0;\n    s = s + ' ';\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (numc == n)\n                out.push_back(current);\n            current = \"\";\n            numc = 0;\n        } else {\n            current = current + s[i];\n            if ((s[i] >= 65 and s[i] <= 90) or (s[i] >= 97 and s[i] <= 122)) {\n                if (find(vowels.begin(), vowels.end(), s",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n\nstring vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s, int n) {\n    string vowels = \"aeiouAEIOU\";\n    string current = \"\";\n    vector<string> out = {};\n    int numc = 0;\n    s = s + ' ';\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (numc == n) {\n                out.push_back(current);\n            }\n            current = \"\";\n            numc = 0;\n        } else {\n            current = current + s[i];\n            if ((s[i] >= 65 and s[i] <= 90) or (s[i] >= 97 and s[i] <= 122)) {\n                if (find(vowels.begin(), vowels.",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n\nstring vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out={};\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s, int n) {\n\n    string vowels = \"aeiouAEIOU\";\n    string current = \"\";\n    vector<string> out = {};\n    int numc = 0;\n    s = s + ' ';\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (numc == n) out.push_back(current);\n            current = \"\";\n            numc = 0;\n        } else {\n            current = current + s[i];\n            if ((s[i] >= 65 and s[i] <= 90) or (s[i] >= 97 and s[i] <= 122)) {\n                if (find(vowels.begin(), vowels.end(), s[i",
        "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> select_words(string s, int n) {\n    vector<string> out;\n    string vowels = \"aeiouAEIOU\";\n    string current = \"\";\n    int numc = 0;\n\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (numc == n) {\n                out.push_back(current);\n            }\n            current = \"\";\n            numc = 0;\n        } else {\n            current += s[i];\n            if ((s[i] >= 65 && s[i] <= 90) || (s[i] >= 97 && s[i] <= 122)) {\n                if (find(vowels.begin(), vowels.end(), s[i]) != vowels.end()) {\n                    numc++;\n                }\n            }",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s, int n) {\n    string vowels = \"aeiouAEIOU\";\n    string current = \"\";\n    vector<string> out{};\n    int numc = 0;\n    s = s + ' ';\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == ' ') {\n            if (numc == n) {\n                out.push_back(current);\n            }\n            current = \"\";\n            numc = 0;\n        } else {\n            current = current + s[i];\n            if ((s[i] >= 65 and s[i] <= 90) or (s[i] >= 97 and s[i] <= 122)) {\n                if (find(vowels.begin(), vowels.",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> select_words(string s,int n){\n\n    string vowels=\"aeiouAEIOU\";\n    string current=\"\";\n    vector<string> out;\n    int numc=0;\n    s=s+' ';\n    for (int i=0;i<s.length();i++)\n        if (s[i]==' ')\n        {\n            if (numc==n) out.push_back(current);\n            current=\"\";\n            numc=0;\n        }\n        else\n        {\n            current=current+s[i];\n            if ((s[i]>=65 and s[i]<=90) or (s[i]>=97 and s[i]<=122))\n            if (find(vowels.begin(),vowels.end(),s[i])!=vowels.end"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n\nstring out=\" \";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n    string out=\" \";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return word[i];\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n\n    string out=\" \";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return word[i];\n    return \"\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n\n    string out=\" \";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n\nstring out=\"\";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n\nstring out=\" \";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n\nstring out=\" \";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n\n    string out=\" \";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring get_closest_vowel(string word){\n\n    string out=\" \";\n    string vowels=\"AEIOUaeiou\";\n    for (int i=word.length()-2;i>=1;i-=1)\n        if (find(vowels.begin(),vowels.end(),word[i])!=vowels.end())\n            if (find(vowels.begin(),vowels.end(),word[i+1])==vowels.end())\n                if (find(vowels.begin(),vowels.end(),word[i-1])==vowels.end())\n                    return out+word[i];\n    return out;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n    {\n        if (l1[i]=='(') count+=1;\n        if (l1[i]==')') count-=1;\n        if (count<0) can=false;\n    }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n    {\n        if (l1[i]=='(') count+=1;\n        if (l1[i]==')')",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n\nstring l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n    {\n        if (l1[i]=='(') count+=1;\n        if (l1[i]==')') count-=1;\n        if (count<0) can=false;\n    }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n    {\n        if (l1[i]=='(') count+=1;\n        if (l1[i]==')')",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++) {\n        if (l1[i]=='(') count+=1;\n        if (l1[i]==')') count-=1;\n        if (count<0) can=false;\n    }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++) {\n        if (l1[i]=='(') count+=1;\n        if (l1[i]==')') count-=1;",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')')",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n    {\n        if (l1[i]=='(') count+=1;\n        if (l1[i]==')') count-=1;\n        if (count<0) can=false;\n    }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n    {\n        if (l1[i]=='(') count+=1;\n        if (l1[i]==')')",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n\nstring l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    string l1 = lst[0] + lst[1];\n    int i, count = 0;\n    bool can = true;\n    for (i = 0; i < l1.length(); i++) {\n        if (l1[i] == '(') count += 1;\n        if (l1[i] == ')') count -= 1;\n        if (count < 0) can = false;\n    }\n    if (count != 0) return \"No\";\n    if (can == true) return \"Yes\";\n    l1 = lst[1] + lst[0];\n    can = true;\n    for (i = 0; i < l1.length(); i++) {\n        if (l1[i] == '(') count += 1;\n        if (l1[i",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')')",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nstring match_parens(vector<string> lst){\n\n    string l1=lst[0]+lst[1];\n    int i,count=0;\n    bool can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')') count-=1;\n            if (count<0) can=false;\n        }\n    if (count!=0) return \"No\";\n    if (can==true) return \"Yes\";\n    l1=lst[1]+lst[0];\n    can=true;\n    for (i=0;i<l1.length();i++)\n        {\n            if (l1[i]=='(') count+=1;\n            if (l1[i]==')')"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr, int k){\n\n    sort(arr.begin(), arr.end());\n    vector<int> out(arr.end() - k, arr.end());\n    sort(out.begin(), out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr, int k) {\n    sort(arr.begin(), arr.end());\n    vector<int> out(arr.end() - k, arr.end());\n    sort(out.begin(), out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr,int k){\n\n    sort(arr.begin(),arr.end());\n    vector<int> out(arr.end()-k,arr.end());\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr, int k) {\n\n    sort(arr.begin(), arr.end());\n    vector<int> out(arr.end() - k, arr.end());\n    sort(out.begin(), out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr, int k) {\n    vector<int> out(k);\n    copy(arr.begin(), arr.begin() + k, out.begin());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr, int k){\n\n    sort(arr.begin(), arr.end());\n    vector<int> out(arr.end() - k, arr.end());\n    sort(out.begin(), out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr, int k) {\n    vector<int> out;\n    int i = 0;\n    for (int j = 0; j < k; j++) {\n        if (i < arr.size() && (out.size() == 0 || out.back() < arr[i])) {\n            out.push_back(arr[i]);\n            i++;\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr, int k) {\n    vector<int> out;\n    for (int i = 0; i < k; i++) {\n        out.push_back(arr[i]);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> maximum(vector<int> arr, int k){\n    vector<int> out(k);\n    copy(arr.begin(), arr.begin() + k, out.begin());\n    sort(out.begin(), out.end(), greater<int>());\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n\n    int sum=0;\n    for (int i=0; i*2<lst.size(); i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\nusing namespace std;\n#include <algorithm>\n#include <stdlib.h>\n\nint solutions(vector<int> lst) {\n    int sum = 1;\n    for (int i = 0; i * 2 < lst.size(); i++) {\n        if (lst[i * 2] % 2 == 1) {\n            sum += lst[i * 2];\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n\n    int sum = 0;\n    for (int i = 0; i * 2 < lst.size(); i++)\n        if (lst[i * 2] % 2 == 1)\n            sum += lst[i * 2];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n\n    int sum = 0;\n    for (int i = 0; i * 2 < lst.size(); i++)\n        if (lst[i * 2] % 2 == 1)\n            sum += lst[i * 2];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n\n    int sum = 1;\n    for (int i = 0; i < lst.size(); i++)\n        if (lst[i] % 2 == 1)\n            sum += lst[i];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n\nint sum=0;\n    for (int i=0;i*2<lst.size();i++)\n        if (lst[i*2]%2==1) sum+=lst[i*2];\n    return sum;\n}\n",
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint solution(vector<int> lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 2 == 0 && lst[i] % 2 == 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint solutions(vector<int> lst){\n\n    int sum = 1;\n    for (int i = 0; i < lst.size(); i++)\n        if (i % 2 == 0 && lst[i] % 2 == 1)\n            sum += lst[i];\n    return sum;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr, int k){\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= -99 and arr[i] <= 99)\n            sum += arr[i];\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n\nint sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n\nint sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr, int k){\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= -99 and arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n\nint sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n\n    int sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr, int k){\n    int sum = 0;\n    for (int i = 0; i < k; i++) {\n        if (arr[i] >= -99 and arr[i] <= 99) {\n            sum += arr[i];\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint add_elements(vector<int> arr,int k){\n\nint sum=0;\n    for (int i=0;i<k;i++)\n        if( arr[i]>=-99 and arr[i]<=99)\n            sum+=arr[i];\n    return sum;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n\nvector<int> out;\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*2+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n\nvector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*2+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n\nvector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*2+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*2+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n\n    vector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*2+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n\n    vector<int> out;\n    while (n != 1)\n    {\n        if (n % 2 == 1) {\n            out.push_back(n);\n            n = n * 2 + 1;\n        }\n        else {\n            n = n / 2;\n        }\n    }\n    sort(out.begin(), out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n\nvector<int> out;\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*2+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n\n    vector<int> out;\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*2+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n\nvector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*2+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> get_odd_collatz(int n){\n\nvector<int> out={1};\n    while (n!=1)\n    {\n        if (n%2==1) {out.push_back(n); n=n*2+1;}\n        else n=n/2;\n    }\n    sort(out.begin(),out.end());\n    return out;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n\n    int dd, mm, yy, i;\n    if (date.length() != 10) return false;\n    for (int i = 0; i < 10; i++)\n        if (i == 2 || i == 5)\n        {\n            if (date[i] != '-') return false;\n        }\n        else\n            if (date[i] < 48 || date[i] > 57) return false;\n\n    dd = atoi(date.substr(0, 2).c_str());\n    mm = atoi(date.substr(3, 2).c_str());\n    yy = atoi(date.substr(6, 4).c_str());\n    if (mm < 1 || mm > 12) return false;\n    if (dd < 1 || dd > 3",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n\nint dd,mm,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    dd=atoi(date.substr(0,2).c_str());\n    mm=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n\nint dd,mm,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    dd=atoi(date.substr(0,2).c_str());\n    mm=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and (",
        "#include <iostream>\n#include <string>\n#include <sstream>\n#include <algorithm>\n#include <cstdlib>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    int dd, mm, yy, i;\n    if (date.length() != 10) return false;\n\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return false;\n        } else if (date[i] < '0' || date[i] > '9') return false;\n    }\n\n    stringstream ss(date);\n    ss >> mm >> dd >> yy;\n\n    if (mm < 1 || mm > 12) return false;\n    if (dd < 1 || dd > 31) return false;\n    if (dd == 31 && (mm == 4 || mm == 6 || mm == 9 || mm == 11 || mm == 2)) return false;",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    int dd, mm, yy, i;\n    if (date.length() != 10) return false;\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 or i == 5) {\n            if (date[i] != '-') return false;\n        } else {\n            if (date[i] < 48 or date[i] > 57) return false;\n        }\n    }\n\n    dd = atoi(date.substr(0, 2).c_str());\n    mm = atoi(date.substr(3, 2).c_str());\n    yy = atoi(date.substr(6, 4).c_str());\n    if (mm < 1 or mm > 12) return false;\n    if (dd < 1 or dd > 31) return false;\n    if (dd == 31 and (mm ==",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n\n    int dd, mm, yy, i;\n    if (date.length() != 10) return false;\n    for (int i = 0; i < 10; i++)\n        if (i == 2 or i == 5)\n        {\n            if (date[i] != '-') return false;\n        }\n        else\n            if (date[i] < 48 or date[i] > 57) return false;\n\n    dd = atoi(date.substr(0, 2).c_str());\n    mm = atoi(date.substr(3, 2).c_str());\n    yy = atoi(date.substr(6, 4).c_str());\n    if (mm < 1 or mm > 12) return false;\n    if (dd < 1 or dd > 3",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n\n    int dd,mm,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    dd=atoi(date.substr(0,2).c_str());\n    mm=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nbool valid_date(string date) {\n    int dd, mm, yy, i;\n    if (date.length() != 10) return false;\n\n    for (int i = 0; i < 10; i++) {\n        if (i == 2 || i == 5) {\n            if (date[i] != '-') return false;\n        } else if (date[i] < '0' || date[i] > '9') {\n            return false;\n        }\n    }\n\n    dd = stoi(date.substr(0, 2));\n    mm = stoi(date.substr(3, 2));\n    yy = stoi(date.substr(6, 4));\n\n    if (mm < 1 || mm > 12) return false;\n    if (dd < 1 || dd > 31) return false;\n    if (dd == 31 && (mm == 4 || mm == 6 || mm == 9",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n\n    int dd,mm,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    dd=atoi(date.substr(0,2).c_str());\n    mm=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool valid_date(string date){\n\n    int dd,mm,yy,i;\n    if (date.length()!=10) return false;\n    for (int i=0;i<10;i++)\n        if (i==2 or i==5)\n        {\n            if (date[i]!='-') return false;\n        }\n        else\n            if (date[i]<48 or date[i]>57) return false;\n\n    dd=atoi(date.substr(0,2).c_str());\n    mm=atoi(date.substr(3,2).c_str());\n    yy=atoi(date.substr(6,4).c_str());\n    if (mm<1 or mm>12) return false;\n    if (dd<1 or dd>31) return false;\n    if (dd==31 and"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(), txt.end(), ' ') != txt.end())\n    {\n        txt = txt + ',';\n        for (i = 0; i < txt.length(); i++)\n            if (txt[i] == ' ')\n            {\n                if (current.length() > 0)\n                    out.push_back(current);\n                current = \"\";\n            }\n            else\n                current = current + txt[i];\n        return out;\n    }\n    if (find(txt.begin(), txt.end(), ',') != txt.end())\n    {\n        txt = txt + ',';\n        for (i = 0; i < txt.length(); i++)\n            if (txt[i]",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(), txt.end(), ' ') != txt.end()) {\n        txt = txt + ',';\n        for (i = 0; i < txt.length(); i++)\n            if (txt[i] == ' ') {\n                if (current.length() > 0) out.push_back(current);\n                current = \"\";\n            }\n            else current = current + txt[i];\n        return out;\n    }\n    if (find(txt.begin(), txt.end(), ',') != txt.end()) {\n        txt = txt + ',';\n        for (i = 0; i < txt.length(); i++)\n            if (txt[i] == ',') {\n                if (current.length",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',')",
        "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    int i;\n    string current = \"\";\n    vector<string> out{};\n    if (find(txt.begin(), txt.end(), ' ') != txt.end()) {\n        txt = txt + ',';\n        for (i = 0; i < txt.length(); i++) {\n            if (txt[i] == ' ') {\n                if (current.length() > 0) out.push_back(current);\n                current = \"\";\n            } else {\n                current = current + txt[i];\n            }\n        }\n        return out;\n    }\n    if (find(txt.begin(), txt.end(), ',') != txt.end()) {\n        txt = txt + ',';\n        for (i = 0; i < txt.length(); i++) {\n            if (txt[i] == ',') {\n                if (current.length() > 0) out.push_",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n\n    int i;\n    string current = \"\";\n    vector<string> out = {};\n    if (find(txt.begin(), txt.end(), ' ') != txt.end()) {\n        txt = txt + ',';\n        for (i = 0; i < txt.length(); i++) {\n            if (txt[i] == ' ') {\n                if (current.length() > 0) out.push_back(current);\n                current = \"\";\n            } else {\n                current = current + txt[i];\n            }\n        }\n        return out;\n    }\n    if (find(txt.begin(), txt.end(), ',') != txt.end()) {\n        txt = txt + ',';\n        for (i = 0; i < txt.length(); i++) {\n            if (txt[i] == ',",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',')",
        "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    int i;\n    string current = \"\";\n    vector<string> out;\n\n    if (find(txt.begin(), txt.end(), ' ') != txt.end()) {\n        txt = txt + ',';\n        for (i = 0; i < txt.length(); i++) {\n            if (txt[i] == ' ') {\n                if (current.length() > 0)\n                    out.push_back(current);\n                current = \"\";\n            } else {\n                current = current + txt[i];\n            }\n        }\n        return out;\n    }\n\n    if (find(txt.begin(), txt.end(), ',') != txt.end()) {\n        txt = txt + ',';\n        for (i = 0; i < txt.length(); i++) {\n            if (txt[i] == ',') {\n                if (current.length() > 0",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',')",
        "#include <iostream>\n#include <string>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> split_words(string txt) {\n    int i;\n    string current = \"\";\n    vector<string> out;\n\n    if (find(txt.begin(), txt.end(), ' ') != txt.end()) {\n        for (i = 0; i < txt.length(); i++) {\n            if (txt[i] == ' ') {\n                if (current.length() > 0) {\n                    out.push_back(current);\n                    current = \"\";\n                }\n            } else {\n                current = current + txt[i];\n            }\n        }\n        return out;\n    }\n\n    if (find(txt.begin(), txt.end(), ',') != txt.end()) {\n        for (i = 0; i < txt.length(); i++) {\n            if (txt[i] == ',') {\n                if (current.length() > 0) {\n                    out.push_back(",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> split_words(string txt){\n\n    int i;\n    string current=\"\";\n    vector<string> out={};\n    if (find(txt.begin(),txt.end(),' ')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==' ') \n            {\n                if (current.length()>0)out.push_back(current); \n                current=\"\";\n            }\n            else current=current+txt[i];\n        return out;\n    }\n    if (find(txt.begin(),txt.end(),',')!=txt.end())\n    {\n        txt=txt+',';\n        for (i=0;i<txt.length();i++)\n            if (txt[i]==',')"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1]) return false;\n    }\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n\nfor (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1]) return false;\n    }\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1]) return false;\n    }\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i] < lst[i-1]) return false;\n        if (i >= 2 && lst[i] == lst[i-1]) return false;\n    }\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1]) return false;\n    }\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n\nfor (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1]) return false;\n    }\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n\n    int count = 0;\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i] < lst[i-1]) return false;\n        if (lst[i] == lst[i-1]) count++;\n        if (count > 1) return false;\n    }\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n\nfor (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1]) return false;\n    }\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n    if (lst.size() == 0) return true;\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1]) return false;\n    }\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_sorted(vector<int> lst){\n\n    for (int i=1;i<lst.size();i++)\n    {\n        if (lst[i]<lst[i-1]) return false;\n        if (i>=2 and lst[i]==lst[i-1]) return false;\n    }\n    return true;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection(vector<int> interval1, vector<int> interval2) {\n\n    int inter1, inter2, l, i;\n    inter1 = max(interval1[0], interval2[0]);\n    inter2 = min(interval1[1], interval2[1]);\n    l = inter2;\n    if (l < 2) return \"NO\";\n    if (isprime(l)) return \"YES\";\n    else return \"NO\";\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n\nint inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2;\n    if (l<2) return \"NO\";\n    \n    bool isPrime = true;\n    for (int i = 2; i <= sqrt(l); i++) {\n        if (l % i == 0) {\n            isPrime = false;\n            break;\n        }\n    }\n    \n    return isPrime ? \"YES\" : \"NO\";\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n\nint inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2;\n    if (l<2) return \"NO\";\n    if (isPrime(l)) return \"YES\";\n    else return \"NO\";\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection(vector<int> interval1, vector<int> interval2){\n    int inter1, inter2, l, i;\n    inter1 = max(interval1[0], interval2[0]);\n    inter2 = min(interval1[1], interval2[1]);\n    l = inter2;\n    if (l < 2) return \"NO\";\n    if (l == 2) return \"YES\";\n    for (i = 2; i <= sqrt(l); i++) {\n        if (l % i == 0) return \"NO\";\n    }\n    return \"YES\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n\n    int inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2;\n    if (l<2) return \"NO\";\n    \n    if (l==2) return \"YES\";\n    \n    for (i=2; i<l; i++) {\n        if (l%i==0) break;\n    }\n    \n    if (i==l) return \"YES\";\n    \n    return \"NO\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n\nint inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2;\n    if (l<2) return \"NO\";\n    if (isPrime(l)) return \"YES\";\n    return \"NO\";\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection(vector<int> interval1, vector<int> interval2){\n\n    int inter1, inter2, l, i;\n    inter1 = max(interval1[0], interval2[0]);\n    inter2 = min(interval1[1], interval2[1]);\n    l = inter2;\n    if (l < 2) return \"NO\";\n    if (l == 2) return \"YES\";\n    for (i = 2; i <= sqrt(l); i++) {\n        if (l % i == 0) return \"NO\";\n    }\n    return \"YES\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection(vector<int> interval1, vector<int> interval2) {\n    int inter1, inter2, l, i;\n    inter1 = max(interval1[0], interval2[0]);\n    inter2 = min(interval1[1], interval2[1]);\n    l = inter2;\n    if (l < 2) return \"NO\";\n    for (i = 2; i <= l; i++) {\n        if (l % i == 0) break;\n    }\n    if (i == l + 1) return \"YES\";\n    return \"NO\";\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n\nint inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2;\n    if (l<2) return \"NO\";\n    return \"YES\";\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring intersection( vector<int> interval1,vector<int> interval2){\n\nint inter1,inter2,l,i;\n    inter1=max(interval1[0],interval2[0]);\n    inter2=min(interval1[1],interval2[1]);\n    l=inter2;\n    if (l<2) return \"NO\";\n    if (l==2) return \"YES\";\n    for (i=2;i<=sqrt(l);i++) {\n        if (l%i==0) return \"NO\";\n    }\n    return \"YES\";\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n\nif (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i])*2;\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n    }\n    return sum*prods;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i])*2;\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n    }\n    return sum*prods;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n\nif (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n    }\n    return sum*prods;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n\nif (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n    }\n    return sum*prods;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i])*2;\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n    }\n    return sum*prods;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i])*2;\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n    }\n    return sum*prods;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n\n    if (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i])*2;\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n    }\n    return sum*prods;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n\nif (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i])*2;\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n   }\n   return sum*prods;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint prod_signs(vector<int> arr){\n\nif (arr.size()==0) return -32768;\n    int i,sum=0,prods=1;\n    for (i=0;i<arr.size();i++)\n    {\n        sum+=abs(arr[i]);\n        if (arr[i]==0) prods=0;\n        if (arr[i]<0) prods=-prods;\n    }\n    return sum*prods;\n}\n"
    ],
    [
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int i, j, x, y, min;\n    for (i = 0; i < grid.size(); i++) {\n        for (j = 0; j < grid[i].size(); j++) {\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n        }\n    }\n\n    min = grid.size() * grid.size();\n    if (x > 0 && grid[x - 1][y] < min) {\n        min = grid[x - 1][y];\n    }\n    if (x < grid.size() - 1 && grid[x + 1][y] < min) {\n        min = grid[x + 1][y];\n    }\n    if (y > 0 && grid[x][y - 1] < min) {\n        min = grid[x][y -",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n\nint i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y];\n    if (y<grid.size()-1 and grid[x][",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n\n    int i, j, x, y, min;\n    for (i = 0; i < grid.size(); i++)\n        for (j = 0; j < grid[i].size(); j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = grid.size() * grid.size();\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < grid.size() - 1 && grid[x + 1][y] < min) min = grid[x][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y];\n    if (",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n\n    int i, j, x, y, min;\n    for (i = 0; i < grid.size(); i++)\n        for (j = 0; j < grid[i].size(); j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = grid.size() * grid.size();\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < grid.size() - 1 && grid[x + 1][y] < min) min = grid[x][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y];\n    if (",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n\nint i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y];\n    if (y<grid.size()-1 and grid[x][",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n\nint i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y];\n    if (y<grid.size()-1 and grid[x][",
        "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nvector<int> minPath(vector<vector<int>> grid, int k) {\n    int x, y, min;\n    for (int i = 0; i < grid.size(); i++)\n        for (int j = 0; j < grid[i].size(); j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = grid.size() * grid.size();\n    if (x > 0 && grid[x - 1][y] < min) min = grid[x - 1][y];\n    if (x < grid.size() - 1 && grid[x + 1][y] < min) min = grid[x + 1][y];\n    if (y > 0 && grid[x][y - 1] < min) min = grid[x][y - 1];\n    if (y < grid.size() - 1 && grid[x",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n\nint i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y];\n    if (y<grid.size()-1 and grid[x][",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n\n    int i, j, x, y, min;\n    for (i = 0; i < grid.size(); i++)\n        for (j = 0; j < grid[i].size(); j++)\n            if (grid[i][j] == 1) {\n                x = i;\n                y = j;\n            }\n    min = grid.size() * grid.size();\n    if (x > 0 and grid[x - 1][y] < min)\n        min = grid[x - 1][y];\n    if (x < grid.size() - 1 and grid[x + 1][y] < min)\n        min = grid[x][y];\n    if (y > 0 and grid[x][y - 1] < min)\n        min = grid[x][",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> minPath(vector<vector<int>> grid, int k){\n\nint i,j,x,y,min;\n    for (i=0;i<grid.size();i++)\n        for (j=0;j<grid[i].size();j++)\n            if (grid[i][j]==1) {\n                x=i;y=j;\n            }\n    min=grid.size()*grid.size();\n    if (x>0 and grid[x-1][y]<min) min=grid[x-1][y];\n    if (x<grid.size()-1 and grid[x+1][y]<min) min=grid[x][y];\n    if (y>0 and grid[x][y-1]<min) min=grid[x][y];\n    if (y<grid.size()-1 and grid[x]["
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n\nvector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+i+(i+1)/2);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n\nvector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+i+(i+1)/2);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n\nvector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+i+(i+1)/2);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+i+(i+1)/2);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n\nvector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+i+(i+1)/2);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+i+(i+1)/2);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n\nvector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+i+(i+1)/2);\n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n\nvector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+i+(i+1)/2);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n\nvector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+i+(i+1)/2);\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> tri(int n){\n\n    vector<int> out={1,3};\n    if (n==0) return {1};\n    for (int i=2;i<=n;i++)\n    {\n        if (i%2==0) out.push_back(1+i/2);\n        else out.push_back(out[i-1]+out[i-2]+1+i+(i+1)/2);\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n\nint prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=48*prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n\n    int prod=1, has=0;\n    string s = to_string(n);\n    for (int i = 0; i < s.length(); i++)\n        if (s[i] % 2 == 1) \n        {\n            has = 1;\n            prod = 48 * prod * (s[i] - 48);\n        }\n    if (has == 0) return 0;\n    return prod;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n\nint prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=48*prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n\n    int prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=48*prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n\nint prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=48*prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n\nint prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=48*prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n\nint prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=48*prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n\n    int prod=1, has=0;\n    string s = to_string(n);\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i] % 2 == 1) {\n            has = 1;\n            prod = 48 * prod * (s[i] - 48);\n        }\n    }\n    if (has == 0) return 0;\n    return prod;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n\nint prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod=48*prod*(s[i]-48);\n        }\n    if (has==0) return 0;\n    return prod;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint digits(int n){\n\nint prod=1,has=0;\n    string s=to_string(n);\n    for (int i=0;i<s.length();i++)\n        if (s[i]%2==1) \n        {\n            has=1;\n            prod*=s[i]-48;\n        }\n    if (has==0) return 0;\n    return prod;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n\nint count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n\nint count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count <= maxcount-2) return true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n\nint count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n\nint count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count <= maxcount - 2) return  true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n\nint count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n\nint count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n\n    int count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n\nint count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count<=maxcount-2) return  true;\n    }\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_nested(string str){\n\nint count=0,maxcount=0;\n    for (int i=0;i<str.length();i++)\n    {\n        if (str[i]=='[') count+=1;\n        if (str[i]==']') count-=1;\n        if (count<0) count=0;\n        if (count>maxcount) maxcount=count;\n        if (count <= maxcount-2) return true;\n    }\n    return false;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*2;\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        sum += ceil(lst[i]) * 2;\n    }\n    return sum;\n}",
        "#include <iostream>\n#include <vector>\n#include <cmath>\n\nint sum_squares(const std::vector<float>& lst) {\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        sum += ceil(lst[i]) * 2;\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*2;\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*2;\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++)\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        sum += ceil(lst[i]) * 2;\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n\nint sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*ceil(lst[i]);\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        sum+=ceil(lst[i])*2;\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<float> lst){\n\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++)\n        sum += ceil(lst[i]) * ceil(lst[i]);\n    return sum;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<10 or (chr>50 and chr<57) or chr>200) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=30 and chr<=37) or (chr>=21 and chr<=42)) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n\nif (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<10 or (chr>50 and chr<57) or chr>200) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=30 and chr<=37) or (chr>=21 and chr<=42)) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n\nif (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<10 or (chr>50 and chr<57) or chr>200) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=30 and chr<=37) or (chr>=21 and chr<=42)) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n\nif (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<10 or (chr>50 and chr<57) or chr>200) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=30 and chr<=37) or (chr>=21 and chr<=42)) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n\nif (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<10 or (chr>50 and chr<57) or chr>200) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=30 and chr<=37) or (chr>=21 and chr<=42)) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n\nif (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<10 or (chr>50 and chr<57) or chr>200) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=30 and chr<=37) or (chr>=21 and chr<=42)) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<10 or (chr>50 and chr<57) or chr>200) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=30 and chr<=37) or (chr>=21 and chr<=42)) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n\nif (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<10 or (chr>50 and chr<57) or chr>200) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=30 and chr<=37) or (chr>=21 and chr<=42)) return false;\n    return true;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<10 or (chr>50 and chr<57) or chr>200) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=30 and chr<=37) or (chr>=21 and chr<=42)) return false;\n    return true;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool check_if_last_char_is_a_letter(string txt){\n    if (txt.length()==0) return false;\n    char chr=txt[txt.length()-1];\n    if (chr<10 or (chr>50 and chr<57) or chr>200) return false;\n    if (txt.length()==1) return true;\n    chr=txt[txt.length()-2];\n    if ((chr>=30 and chr<=37) or (chr>=21 and chr<=42)) return false;\n    return true;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i+arr[i];\n    return max;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n        if (arr[i]<=i) max=i+arr[i];\n    return max;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i && (max==-1 || arr[i]>arr[max])) max=i;\n    return max;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n\nint max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i+arr[i];\n    return max;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n\nint max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i+arr[i];\n    return max;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n        if (arr[i]<=i) max=i+arr[i];\n    return max;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n\nint max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i+arr[i];\n    return max;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n\nint max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i && max<i+arr[i]) max=i+arr[i];\n    return max;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n\nint max=-1;\n    for (int i=0;i<arr.size();i++)\n    if (arr[i]<=i) max=i+arr[i];\n    return max;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint can_arrange(vector<int> arr){\n\n    int max=-1;\n    for (int i=0;i<arr.size();i++)\n        if (arr[i]<=i) max=i+arr[i];\n    return max;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n\n    int maxneg = 0, minpos = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg))\n            maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos))\n            minpos = lst[i];\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 && (minpos == 0 || lst[i] > minpos))\n            maxneg = lst[i];\n        if (lst[i] > 0 && (maxneg == 0 || lst[i] < maxneg))",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n\n    int maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n\nint maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (minpos==0 or lst[i]>minpos)) maxneg=lst[i];\n        if (lst[i]>0 and (maxneg==0 or lst[i]<maxneg)) minpos=lst[i];\n    }\n    return {max",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n\n    int maxneg = 0, minpos = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) {\n            maxneg = lst[i];\n        } else if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) {\n            minpos = lst[i];\n        }\n    }\n\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 && (minpos == 0 || lst[i] > minpos)) {\n            maxneg = lst[i];\n        } else if (lst[i] > 0 && (maxneg ==",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n\n    int maxneg = 0, minpos = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 and (maxneg == 0 or lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 and (minpos == 0 or lst[i] < minpos)) minpos = lst[i];\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 and (minpos == 0 or lst[i] > minpos)) maxneg = lst[i];\n        if (lst[i] > 0 and (maxneg == 0 or lst[i] < maxneg)) minpos = lst[i",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n\n    int maxneg = 0, minpos = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    return {maxneg, minpos};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n\n    int maxneg = 0, minpos = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n    return {maxneg, minpos};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n\n    int maxneg = 0, minpos = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 && (maxneg == 0 || lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 && (minpos == 0 || lst[i] < minpos)) minpos = lst[i];\n    }\n\n    return {maxneg, minpos};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n\nint maxneg=0,minpos=0;\n    for (int i=0;i<lst.size();i++)\n    {\n        if (lst[i]<0 and (maxneg==0 or lst[i]>maxneg)) maxneg=lst[i];\n        if (lst[i]>0 and (minpos==0 or lst[i]<minpos)) minpos=lst[i];\n    }\n    return {maxneg,minpos};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> largest_smallest_integers(vector<int> lst){\n\n    int maxneg = 0, minpos = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 and (maxneg == 0 or lst[i] > maxneg)) maxneg = lst[i];\n        if (lst[i] > 0 and (minpos == 0 or lst[i] < minpos)) minpos = lst[i];\n    }\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 0 and (minpos == 0 or lst[i] > minpos)) maxneg = lst[i];\n        if (lst[i] > 0 and (maxneg == 0 or lst[i] < maxneg)) minpos = lst[i"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a, boost::any b) {\n\n    double numa, numb;\n    boost::any out;\n\n    if (a.type() == typeid(string)) {\n        string s;\n        s = boost::any_cast<string>(a);\n        if (find(s.begin(), s.end(), ',') != s.end()) {\n            for (int i = 0; i < s.length(); i++)\n                if (s[i] == ',') s = s.substr(0, i) + '.' + s.substr(i + 1);\n        }\n        numa = atof(s.c_str());\n\n    } else {\n        if (a.type() == typeid(int)) numa = boost::any_cast<int>(a);\n        if (a.",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n\ndouble  numa,numb;\n    boost::any out;\n   \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a.",
        "#include <iostream>\n#include <string>\n#include <cmath>\n#include <boost/any.hpp>\n\nboost::any compare_one(boost::any a, boost::any b) {\n    double numa, numb;\n    boost::any out;\n\n    if (a.type() == typeid(string)) {\n        std::string s = boost::any_cast<std::string>(a);\n        if (s.find(',') != std::string::npos) {\n            for (int i = 0; i < s.length(); i++) {\n                if (s[i] == ',') s = s.substr(0, i) + '.' + s.substr(i + 1);\n            }\n        }\n        numa = std::stod(s);\n    } else {\n        if (a.type() == typeid(int)) numa = boost::any_cast<int>(a);\n        if (a.type() == typeid(double)) numa = boost::any_cast<double>(a);\n    }",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n\n    double  numa,numb;\n    boost::any out;\n    \n    if (a.type()==typeid(string))\n    {\n        string s;\n        s=boost::any_cast<string>(a);\n        if (find(s.begin(),s.end(),',')!=s.end())\n            for (int i=0;i<s.length();i++)\n                if (s[i]==',') s=s.substr(0,i)+'.'+s.substr(i+1);\n        numa=atof(s.c_str());\n        \n    }\n    else \n    {\n        if (a.type()==typeid(int)) numa=boost::any_cast<int>(a);\n        if (a",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n\n    double  numa, numb;\n    boost::any out;\n    \n    if (a.type() == typeid(string)) {\n        string s;\n        s = boost::any_cast<string>(a);\n        if (find(s.begin(), s.end(), ',') != s.end()) {\n            for (int i = 0; i < s.length(); i++) {\n                if (s[i] == ',') s = s.substr(0, i) + '.' + s.substr(i + 1);\n            }\n        }\n        numa = atof(s.c_str());\n        \n    } else {\n        if (a.type() == typeid(int)) numa = boost::any_cast<int>(a);",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n\n    double numa, numb;\n    boost::any out;\n\n    if (a.type() == typeid(string)) {\n        string s;\n        s = boost::any_cast<string>(a);\n        if (find(s.begin(), s.end(), ',') != s.end()) {\n            for (int i = 0; i < s.length(); i++) {\n                if (s[i] == ',') s = s.substr(0, i) + '.' + s.substr(i + 1",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a, boost::any b) {\n    double numa, numb;\n    boost::any out;\n\n    if (a.type() == typeid(string)) {\n        string s = boost::any_cast<string>(a);\n        if (find(s.begin(), s.end(), ',') != s.end()) {\n            for (int i = 0; i < s.length(); i++)\n                if (s[i] == ',')\n                    s = s.substr(0, i) + '.' + s.substr(i + 1);\n        }\n        numa = atof(s.c_str());\n    }\n    else {\n        if (a.type() == typeid(int)) numa = boost::any_cast<int>(a);\n        if (a.type",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n    double numa, numb;\n    boost::any out;\n    \n    if (a.type() == typeid(string)) {\n        string s = boost::any_cast<string>(a);\n        if (find(s.begin(), s.end(), ',') != s.end()) {\n            for (int i = 0; i < s.length(); i++) {\n                if (s[i] == ',') s = s.substr(0, i) + '.' + s.substr(i + 1);\n            }\n            numa = atof(s.c_str());\n        }\n    } else {\n        if (a.type() == typeid(int)) numa = boost::any_cast<int>(a);\n        if (a.type()",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a,boost::any b){\n\n    double numa, numb;\n    boost::any out;\n    \n    if (a.type() == typeid(string)) {\n        string s = boost::any_cast<string>(a);\n        if (find(s.begin(), s.end(), ',') != s.end()) {\n            for (int i = 0; i < s.length(); i++) {\n                if (s[i] == ',') s = s.substr(0, i) + '.' + s.substr(i + 1);\n            }\n            numa = atof(s.c_str());\n        }\n    } else {\n        if (a.type() == typeid(int)) numa = boost::any_cast<int>(a);\n        if (a.type",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<algorithm>\n#include<boost/any.hpp>\nusing namespace std;\n#include<stdlib.h>\nboost::any compare_one(boost::any a, boost::any b) {\n    double numa, numb;\n    boost::any out;\n\n    if (a.type() == typeid(string)) {\n        string s = boost::any_cast<string>(a);\n        if (find(s.begin(), s.end(), ',') != s.end()) {\n            for (int i = 0; i < s.length(); i++) {\n                if (s[i] == ',') s = s.substr(0, i) + '.' + s.substr(i + 1);\n            }\n        }\n        numa = atof(s.c_str());\n    } else {\n        if (a.type() == typeid(int)) numa = boost::any_cast<int>(a);\n        if (a.type()"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n\n    if (n%2==0 and n>=8 and n <=8) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n\n    if (n%2==0 and n>=8 and n <=8) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n\nif (n%2==0 and n>=8 and n <=8) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n\nif (n%2==0 and n>=8 and n <=8) return true;\n\nint sum = 0;\n\nfor (int i = 2; i <= n; i+=2) {\n    sum += i;\n}\n\nreturn sum == n;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n\nif (n%2==0 and n>=8 and n <=8) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n\nif (n%2==0 and n>=8 and n <=8) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n    if (n%2==0 and n >= 8 and n <= 8) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n\nif (n%2==0 and n>=8 and n <=8) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n\nif (n%2==0 and n>=8 and n <=8) return true;\n\nint x = n;\nint count = 0;\n\nwhile (x > 0) {\n    if (x % 2 == 0) {\n        count++;\n    }\n    x /= 2;\n}\n\nif (count == 4) return true;\nreturn false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nbool is_equal_to_sum_even(int n){\n\nif (n%2==0 and n>=8 and n <=8) return true;\n    return false;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        i=i*n;\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n\nlong long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        i=i*n;\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n\nlong long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        i=i*n;\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        i=i*n;\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n\nlong long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        i=i*n;\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        i=i*n;\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n\n    long long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n\nlong long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long special_factorial(int n){\n\nlong long fact=1,bfact=1;\n    for (int i=1;i<=n;i++)\n    {\n        fact=fact*i;\n        bfact=bfact*fact;\n    }\n    return bfact;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n\nstring out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==2) out=out+'_';\n        if (spacelen==3) out=out+\"_\";\n        if (spacelen>3) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"_\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n\nstring out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==2) out=out+'_';\n        if (spacelen==3) out=out+\"_\";\n        if (spacelen>3) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"_\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    {\n        if (text[i]==' ')\n        {\n            spacelen+=1;\n            if (spacelen==2) out=out+'_';\n            if (spacelen==3) out=out+\"_\";\n            if (spacelen>3) out=out+'-';\n        }\n        else\n        {\n            spacelen=0;\n            out=out+text[i];\n        }\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"_\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==2) out=out+'_';\n        if (spacelen==3) out=out+\"_\";\n        if (spacelen>3) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"_\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n\nThe bug in the original code was that it did not properly handle cases where a string had more than 2 consecutive",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n\nstring out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==2) out=out+'_';\n        if (spacelen==3) out=out+\"_\";\n        if (spacelen>3) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"_\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    {\n        if (text[i]==' ')\n        {\n            spacelen++;\n            if (spacelen==2) out=out+'_';\n            if (spacelen==3) out=out+\"_\";\n            if (spacelen>3) out=out+'-';\n        }\n        else\n        {\n            out=out+text[i];\n        }\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"_\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    {\n        if (text[i]==' ') spacelen+=1;\n        else\n        {\n            if (spacelen==2) out=out+'_';\n            if (spacelen==3) out=out+\"_\";\n            if (spacelen>3) out=out+'-';\n            spacelen=0;\n            out=out+text[i];\n        }\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"_\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n\n    string out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    {\n        if (text[i]==' ') spacelen+=1;\n        else\n        {\n            if (spacelen==2) out=out+'_';\n            if (spacelen==3) out=out+\"_\";\n            if (spacelen>3) out=out+'-';\n            spacelen=0;\n            out=out+text[i];\n        }\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"_\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring fix_spaces(string text){\n\nstring out=\"\";\n    int spacelen=0;\n    for (int i=0;i<text.length();i++)\n    if (text[i]==' ') spacelen+=1;\n    else\n    {\n        if (spacelen==2) out=out+'_';\n        if (spacelen==3) out=out+\"_\";\n        if (spacelen>3) out=out+'-';\n        spacelen=0;\n        out=out+text[i];\n    }\n    if (spacelen==1) out=out+'_';\n    if (spacelen==2) out=out+\"_\";\n    if (spacelen>2) out=out+'-';\n    return out;\n}\n",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring fix_spaces(string text) {\n    string out = \"\";\n    int spacelen = 0;\n    for (int i = 0; i < text.length(); i++) {\n        if (text[i] == ' ') {\n            spacelen++;\n        } else {\n            if (spacelen == 2) {\n                out = out + '_';\n            } else if (spacelen == 3) {\n                out = out + '_';\n            } else if (spacelen > 3) {\n                out = out + '-';\n            }\n            spacelen = 0;\n            out = out + text[i];\n        }\n    }\n    if (spacelen == 1) {\n        out = out + '_';\n    } else if (spacelen == 2) {\n        out = out + '_';\n    } else if (spacelen > 2) {\n        out = out + '-';\n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\";",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\";",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\";",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n\nint numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\";",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\";",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring file_name_check(string file_name) {\n    int numdigit = 0, numdot = 0;\n    if (file_name.length() < 5) return \"No\";\n    char w = file_name[0];\n    if (w < 65 || (w > 90 && w < 97) || w > 122) return \"No\";\n    string last = file_name.substr(file_name.length() - 4, 4);\n    if (last != \".txt\" && last != \".exe\" && last != \".dll\") return \"No\";\n    for (int i = 0; i < file_name.length(); i++) {\n        if (file_name[i] >= 48 && file_name[i] <= 57) numdigit += 1;\n    }\n    if (numdigit > 3 || numdot != 1) return \"No\";\n    return \"Yes\";\n}",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\";",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n\nint numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\";",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\";",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring file_name_check(string file_name){\n    int numdigit=0,numdot=0;\n    if (file_name.length()<5) return \"No\";\n    char w=file_name[0];\n    if (w<65 or (w>90 and w<97) or w>122) return \"No\";\n    string last=file_name.substr(file_name.length()-4,4);\n    if (last!=\".txt\" and last!=\".exe\" and last!=\".dll\") return \"No\";\n    for (int i=0;i<file_name.length();i++)\n    {\n        if (file_name[i]>=48 and file_name[i]<=57) numdigit+=1;\n    }\n    if (numdigit>3 or numdot!=1) return \"No\";\n    return \"Yes\";"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0 && i%4==0) sum+=pow(lst[i],3);\n        else if (i%4==0) sum+=pow(lst[i],2);\n        else sum+=lst[i];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0) {\n            sum += pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n\nint sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0 && i%4!=0) sum+=lst[i]*lst[i];\n        else if (i%4==0 && i%3!=0) sum+=pow(lst[i],3);\n        else sum+=lst[i];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=pow(lst[i], 2);\n        else if (i%4==0) sum+=pow(lst[i], 3);\n        else sum+=lst[i];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n    int sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (i % 3 == 0) {\n            sum += lst[i] * lst[i];\n        } else if (i % 4 == 0 && i % 3 != 0) {\n            sum += pow(lst[i], 3);\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=lst[i]*lst[i];\n        else if (i%4==0 && i%3!=0) sum+=pow(lst[i],3);\n        else sum+=lst[i];\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i<lst.size();i++) {\n        if (i%3==0) {\n            sum += lst[i]*lst[i];\n        } else if (i%4==0 && i%3!=0) {\n            sum += lst[i]*lst[i]*lst[i];\n        } else {\n            sum += lst[i];\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i<lst.size();i++) {\n        if (i%3==0 && i%4!=0) sum+=lst[i]*lst[i];\n        else if (i%4==0 && i%3!=0) sum+=pow(lst[i], 3);\n        else sum+=lst[i];\n    }\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0 && i%4!=0) sum+=lst[i]*lst[i];\n        else if (i%4==0) sum+=lst[i]*lst[i]*lst[i];\n        else sum+=lst[i];\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint sum_squares(vector<int> lst){\n\n    int sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (i%3==0) sum+=pow(lst[i], 2);\n        else if (i%4==0 && i%3!=0) sum+=pow(lst[i], 3);\n        else sum+=lst[i];\n    return sum;\n}"
    ],
    [
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n\nstring out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    return out;\n}\n\nThe bug in the original code is that it does not handle the case where the length of the current word is less than 2, which could cause issues when checking for prime numbers. The fix",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    return out;\n}\n",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n\nstring out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n\nstring out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring words_in_sentence(string sentence){\n\n    string out=\"\";\n    string current=\"\";\n    sentence=sentence+' ';\n\n    for (int i=0;i<sentence.size();i++)\n    if (sentence[i]!=' ') current=current+sentence[i];\n    else\n    {\n        bool isp=true;\n        int l=current.length();\n        if (l<2) isp=false;\n        for (int j=2;j*j<=l;j++)\n            if (l%j==0) isp=false;\n        if (isp) out=out+current+' ';\n        current=\"\";        \n    }\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n\n    int a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}",
        "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool simplify(string x, string n) {\n    int a, b, c, d, i;\n    for (i = 0; i < x.size(); i++)\n        if (x[i] == '/') {\n            a = atoi(x.substr(0, i).c_str());\n            b = atoi(x.substr(i + 1).c_str());\n        }\n    for (i = 0; i < n.size(); i++)\n        if (n[i] == '/') {\n            c = atoi(n.substr(0, i).c_str());\n            d = atoi(n.substr(i + 1).c_str());\n        }\n    if ((a * c) % (b * d) == 0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x, string n) {\n    int a, b, c, d, i;\n    for (i = 0; i < x.size(); i++)\n        if (x[i] == '/') {\n            a = atoi(x.substr(0, i).c_str());\n            b = atoi(x.substr(i + 1).c_str());\n        }\n    for (i = 0; i < n.size(); i++)\n        if (n[i] == '/') {\n            c = atoi(n.substr(0, i).c_str());\n            d = atoi(n.substr(i + 1).c_str());\n        }\n    if ((a * c) % (b * d) == 0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int a, b, c, d, i;\n    for (i = 0; i < x.size(); i++) {\n        if (x[i] == '/') {\n            a = atoi(x.substr(0, i).c_str());\n            b = atoi(x.substr(i + 1).c_str());\n        }\n    }\n    for (i = 0; i < n.size(); i++) {\n        if (n[i] == '/') {\n            c = atoi(n.substr(0, i).c_str());\n            d = atoi(n.substr(i + 1).c_str());\n        }\n    }\n    if ((a * c) % (b * d) == 0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n\nint a,b,c,d,i;\n    for (i=0;i<x.size();i++)\n        if (x[i]=='/') \n        {\n            a=atoi(x.substr(0,i).c_str());\n            b=atoi(x.substr(i+1).c_str());\n        }\n    for (i=0;i<n.size();i++)\n        if (n[i]=='/') \n        {\n            c=atoi(n.substr(0,i).c_str());\n            d=atoi(n.substr(i+1).c_str());\n        }\n    if ((a*c)%(b*d)==0) return true;\n    return false;\n}\n",
        "#include <stdio.h>\n#include <string>\n#include <algorithm>\nusing namespace std;\n#include <math.h>\n#include <stdlib.h>\n\nbool simplify(string x, string n) {\n    int a, b, c, d, i;\n    for (i = 0; i < x.size(); i++) {\n        if (x[i] == '/') {\n            a = atoi(x.substr(0, i).c_str());\n            b = atoi(x.substr(i + 1).c_str());\n        }\n    }\n    for (i = 0; i < n.size(); i++) {\n        if (n[i] == '/') {\n            c = atoi(n.substr(0, i).c_str());\n            d = atoi(n.substr(i + 1).c_str());\n        }\n    }\n    if ((a * c) % (b * d) == 0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x, string n){\n    int a, b, c, d, i;\n    for (i = 0; i < x.size(); i++)\n        if (x[i] == '/') {\n            a = atoi(x.substr(0, i).c_str());\n            b = atoi(x.substr(i + 1).c_str());\n        }\n    for (i = 0; i < n.size(); i++)\n        if (n[i] == '/') {\n            c = atoi(n.substr(0, i).c_str());\n            d = atoi(n.substr(i + 1).c_str());\n        }\n    if ((a * c) % (b * d) == 0) return true;\n    return false;\n}",
        "#include <iostream>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nbool simplify(string x, string n) {\n    int a, b, c, d, i;\n    for (i = 0; i < x.size(); i++) {\n        if (x[i] == '/') {\n            a = atoi(x.substr(0, i).c_str());\n            b = atoi(x.substr(i + 1).c_str());\n        }\n    }\n    for (i = 0; i < n.size(); i++) {\n        if (n[i] == '/') {\n            c = atoi(n.substr(0, i).c_str());\n            d = atoi(n.substr(i + 1).c_str());\n        }\n    }\n    if ((a * c) % (b * d) == 0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x, string n){\n\n    int a, b, c, d, i;\n    for (i = 0; i < x.size(); i++)\n        if (x[i] == '/') {\n            a = atoi(x.substr(0, i).c_str());\n            b = atoi(x.substr(i + 1).c_str());\n        }\n    for (i = 0; i < n.size(); i++)\n        if (n[i] == '/') {\n            c = atoi(n.substr(0, i).c_str());\n            d = atoi(n.substr(i + 1).c_str());\n        }\n    if ((a * c) % (b * d) == 0) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nbool simplify(string x,string n){\n    int a, b, c, d, i;\n    for (i = 0; i < x.size(); i++)\n        if (x[i] == '/')\n        {\n            a = atoi(x.substr(0, i).c_str());\n            b = atoi(x.substr(i + 1).c_str());\n        }\n    for (i = 0; i < n.size(); i++)\n        if (n[i] == '/')\n        {\n            c = atoi(n.substr(0, i).c_str());\n            d = atoi(n.substr(i + 1).c_str());\n        }\n    if ((a * c) % (b * d) == 0) return true;\n    return false;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n\n    vector<int> sumdigit(nums.size());\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit[i] = sum;\n    }\n\n    for (int i=0;i<nums.size();i++)\n    for (int j=i+1;j<nums.size();j++)\n    if (sumdigit[j-1",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n    vector<int> sumdigit;\n    for (int i = 0; i < nums.size(); i++) {\n        string w = to_string(abs(nums[i]));\n        int sum = 0;\n        for (int j = 1; j < w.length(); j++)\n            sum += w[j] - 48;\n        if (nums[i] > 0)\n            sum += w[0] - 48;\n        else\n            sum -= w[0] - 48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i = 0; i < nums.size(); i++)\n        for (int j = 1; j < nums.size(); j++)\n            if",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n\n    vector<int> sumdigit;\n    for (int i = 0; i < nums.size(); i++) {\n        string w = to_string(abs(nums[i]));\n        int sum = 0;\n        for (int j = 1; j < w.length(); j++) {\n            sum += w[j] - 48;\n        }\n        if (nums[i] > 0) {\n            sum += w[0] - 48;\n        } else {\n            sum -= w[0] - 48;\n        }\n        sumdigit.push_back(sum);\n    }\n\n    int m;\n    for (int i = 0; i < nums.size(); i++) {\n        for (int j =",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n\nvector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n\nvector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=i+1;j<nums.size();j++)\n    if (sumdigit[j-",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n\nvector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n\n    vector<int> sumdigit;\n    for (int i = 0; i < nums.size(); i++) {\n        string w = to_string(abs(nums[i]));\n        int sum = 0;\n        for (int j = 1; j < w.length(); j++)\n            sum += w[j] - 48;\n        if (nums[i] > 0)\n            sum += w[0] - 48;\n        else\n            sum -= w[0] - 48;\n        sumdigit.push_back(sum);\n    }\n\n    int m;\n    for (int i = 0; i < nums.size(); i++)\n        for (int j = 1; j < nums.size(); j++)",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n\n    vector<int> sumdigit;\n    for (int i=0;i<nums.size();i++) {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>sumdigit",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n\n    vector<int> sumdigit;\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<int> order_by_points(vector<int> nums){\n\nvector<int> sumdigit={};\n    for (int i=0;i<nums.size();i++)\n    {\n        string w=to_string(abs(nums[i]));\n        int sum=0;\n        for (int j=1;j<w.length();j++)\n            sum+=w[j]-48;\n        if (nums[i]>0) sum+=w[0]-48;\n        else sum-=w[0]-48;\n        sumdigit.push_back(sum);\n    }\n    int m;\n    for (int i=0;i<nums.size();i++)\n    for (int j=1;j<nums.size();j++)\n    if (sumdigit[j-1]>"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n\nint num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n\n    int num = 0;\n    for (int i = 0; i < nums.size(); i++)\n        if (nums[i] > 10)\n        {\n            string w = to_string(nums[i]);\n            if (w[0] % 2 == 1 and w[w.length() - 1] % 2 == 1) num += 1;\n        }\n    return num;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n\n    int num = 0;\n    for (int i = 0; i < nums.size(); i++)\n        if (nums[i] > 10) {\n            string w = to_string(nums[i]);\n            if (w[0] % 2 == 1 && w[w.length() - 1] % 2 == 1) num++;\n        }\n    return num;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n\nint num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n\nint num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n\n    int num = 0;\n    for (int i = 0; i < nums.size(); i++)\n        if (nums[i] > 10)\n        {\n            string w = to_string(nums[i]);\n            if (w[0] % 2 == 1 && w[w.length() - 1] % 2 == 1) num++;\n        }\n    return num;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n\n    int num = 0;\n    for (int i = 0; i < nums.size(); i++)\n    {\n        if (nums[i] > 10)\n        {\n            string w = to_string(nums[i]);\n            if (w[0] % 2 == 1 && w[w.length() - 1] % 2 == 1) num++;\n        }\n    }\n    return num;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n\nint num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n\nint num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint specialFilter(vector<int> nums){\n\nint num=0;\n    for (int i=0;i<nums.size();i++)\n    if (nums[i]>10)\n    {\n        string w=to_string(nums[i]);\n        if (w[0]%2==1 and w[w.length()-1]%2==1) num+=1;\n    }\n    return num;\n}\n"
    ],
    [
        "#include <stdio.h>\n#include <vector>\nusing namespace std;\n#include <algorithm>\n#include <math.h>\n#include <stdlib.h>\n\nint get_matrix_triples(int n) {\n    vector<int> a;\n    vector<vector<int>> sum = {{0, 0, 0}};\n    vector<vector<int>> sum2 = {{0, 0, 0}};\n\n    for (int i = 1; i <= n; i++) {\n        a.push_back((i * i) % 3);\n        sum.push_back(sum[sum.size() - 1]);\n        sum[i][a[i - 1]] += 1;\n    }\n\n    for (int times = 1; times < 3; times++) {\n        for (int i = 1; i <= n; i++) {\n            sum2.push_back(sum2[sum2.size() - 1]);\n            if (i >= 1)\n                for (int j = 0;",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n        for (int i=1;i<=n;i++)\n        {\n            sum2.push_back(sum2[sum2.size()-1]);\n            if (i>=1)\n                for (int j=0;j<=2;j++)\n                    sum2[i][",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n\nvector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n        for (int i=1;i<=n;i++)\n        {\n            sum2.push_back(sum2[sum2.size()-1]);\n            if (i>=1)\n            for (int j=0;j<=2;j++)\n                sum2[i][(",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n\nvector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n        for (int i=1;i<=n;i++)\n        {\n            sum2.push_back(sum2[sum2.size()-1]);\n            if (i>=1)\n            for (int j=0;j<=2;j++)\n                sum2[i][(",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n        for (int i=1;i<=n;i++)\n        {\n            sum2.push_back(sum2[sum2.size()-1]);\n            if (i>=1)\n                for (int j=0;j<=2;j++)\n                    sum2[i][",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n\n    vector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n        for (int i=1;i<=n;i++)\n        {\n            sum2.push_back(sum2[sum2.size()-1]);\n            if (i>=1)\n            for (int j=0;j<=2;j++)\n                sum2[i][(",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nint get_matrix_triples(int n){\n\nvector<int> a;\n    vector<vector<int>> sum={{0,0,0}};\n    vector<vector<int>> sum2={{0,0,0}};\n    for (int i=1;i<=n;i++)\n    {\n        a.push_back((i*i)%3);\n        sum.push_back(sum[sum.size()-1]);\n        sum[i][a[i-1]]+=1;\n    }\n    for (int times=1;times<3;times++)\n    {\n    for (int i=1;i<=n;i++)\n    {\n        sum2.push_back(sum2[sum2.size()-1]);\n        if (i>=1)\n        for (int j=0;j<=2;j++)\n            sum2[i][(a"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupyter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n        if (planets[m]==planet1) pos1=m;\n        if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1, string planet2) {\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupyter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < planets.size(); m++) {\n        if (planets[m] == planet1) pos1 = m;\n        if (planets[m] == planet2) pos2 = m;\n    }\n    if (pos1 == -1 or pos2 == -1) return {};\n    if (pos1 > pos2) {\n        m = pos1;\n        pos1 = pos2;\n        pos2 = m;\n    }\n    vector<string> out = {};",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n\nvector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupyter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1, string planet2) {\n\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupyter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < planets.size(); m++) {\n        if (planets[m] == planet1)\n            pos1 = m;\n        if (planets[m] == planet2)\n            pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1)\n        return {};\n    if (pos1 > pos2) {\n        m = pos1;\n        pos1 = pos2;\n        pos2 = m;\n    }\n    vector<",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1, string planet2) {\n\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupyter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < planets.size(); m++) {\n        if (planets[m] == planet1) pos1 = m;\n        if (planets[m] == planet2) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1) return {};\n    if (pos1 > pos2) {\n        m = pos1;\n        pos1 = pos2;\n        pos2 = m;\n    }\n    vector<string> out = {};",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1, string planet2) {\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupyter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < planets.size(); m++) {\n        if (planets[m] == planet1) pos1 = m;\n        if (planets[m] == planet2) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1) return {};\n    if (pos1 > pos2) {\n        m = pos1;\n        pos1 = pos2;\n        pos2 = m;\n    }\n    vector<string> out = {};",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1, string planet2){\n\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupyter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < planets.size(); m++) {\n        if (planets[m] == planet1) pos1 = m;\n        if (planets[m] == planet2) pos2 = m;\n    }\n    if (pos1 == -1 or pos2 == -1) return {};\n    if (pos1 > pos2) {\n        m = pos1;\n        pos1 = pos2;\n        pos2 = m;\n    }\n    vector<string> out;\n    for",
        "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> bf(string planet1, string planet2) {\n    vector<string> planets = { \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupyter\", \"Saturn\", \"Uranus\", \"Neptune\" };\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < planets.size(); m++) {\n        if (planets[m] == planet1) pos1 = m;\n        if (planets[m] == planet2) pos2 = m;\n    }\n    if (pos1 == -1 || pos2 == -1) return {};\n    if (pos1 > pos2) {\n        m = pos1;\n        pos1 = pos2;\n        pos2 = m;\n    }\n    vector<string> out = {};\n    for (m = pos1 + 1; m < pos2; m",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n\nvector<string> planets={\"Mercury\",\"Venus\",\"Earth\",\"Mars\",\"Jupyter\",\"Saturn\",\"Uranus\",\"Neptune\"};\n    int pos1=-1,pos2=-1,m;\n    for (m=0;m<planets.size();m++)\n    {\n    if (planets[m]==planet1) pos1=m;\n    if (planets[m]==planet2) pos2=m;\n    }\n    if (pos1==-1 or pos2==-1) return {};\n    if (pos1>pos2) {m=pos1;pos1=pos2;pos2=m;}\n    vector<string> out={};\n    for (m=pos1+1;m<pos2;m++)",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nvector<string> bf(string planet1,string planet2){\n    vector<string> planets = {\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupyter\", \"Saturn\", \"Uranus\", \"Neptune\"};\n    int pos1 = -1, pos2 = -1, m;\n    for (m = 0; m < planets.size(); m++) {\n        if (planets[m] == planet1) pos1 = m;\n        if (planets[m] == planet2) pos2 = m;\n    }\n    if (pos1 == -1 or pos2 == -1) return {};\n    if (pos1 > pos2) {\n        m = pos1;\n        pos1 = pos2;\n        pos2 = m;\n    }\n    vector<string> out = {};\n    for"
    ],
    [
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n\n    vector<string> out;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i].length()%2==0) out.push_back(lst[i]);\n    \n    sort(out.begin(), out.end(), [](const string& s1, const string& s2) {\n        if (s1.length() == s2.length()) {\n            return s1 < s2;\n        }\n        return s1.length() < s2.length();\n    });\n    \n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n    vector<string> out;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 == 0) {\n            out.push_back(lst[i]);\n        }\n    }\n    sort(out.begin(), out.end(), [](string a, string b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> vector_sort(vector<string> lst){\n    vector<string> out;\n    for (int i=0; i<lst.size(); i++) {\n        if (lst[i].length() % 2 == 0) out.push_back(lst[i]);\n    }\n    for (int i=0; i<out.size(); i++) {\n        for (int j=1; j<out.size(); j++) {\n            if (out[j].length() < out[j-1].length()) {\n                string mid = out[j];\n                out[j] = out[j-1];\n                out[j-1] = mid;\n            }\n        }\n    }\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nvector<string> vector_sort(vector<string> vec) {\n    vector<string> out;\n    for (int i = 0; i < vec.size(); i++) {\n        if (vec[i].length() % 2 == 0) {\n            out.push_back(vec[i]);\n        }\n    }\n\n    sort(out.begin(), out.end(), [](string a, string b) {\n        return a.length() < b.length();\n    });\n\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> sorted_list_sum(vector<string> lst){\n\n    vector<string> out = {};\n    for (int i = 0; i < lst.size(); i++)\n        if (lst[i].length() % 2 == 0)\n            out.push_back(lst[i]);\n\n    string mid;\n    for (int i = 0; i < out.size(); i++)\n        for (int j = 1; j < out.size(); j++)\n            if (out[j].length() < out[j - 1].length()) {\n                mid = out[j];\n                out[j] = out[j - 1];\n                out[j - 1] = mid;\n            }\n\n    sort(out.begin(), out.end(), [](const string &a, const string &b) {\n        if (a",
        "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nvector<string> sorted_list_sum(vector<string> lst) {\n    vector<string> out;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 == 0) out.push_back(lst[i]);\n    }\n    string mid;\n    for (int i = 0; i < out.size(); i++) {\n        for (int j = 1; j < out.size(); j++) {\n            if (out[j].length() < out[j - 1].length()) {\n                mid = out[j];\n                out[j] = out[j - 1];\n                out[j - 1] = mid;\n            }\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> vector_sort(vector<string> lst){\n    vector<string> out;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i].length()%2==0) out.push_back(lst[i]);\n    sort(out.begin(), out.end(), [](const string& a, const string& b) {\n        return a.length() < b.length() || (a.length() == b.length() && a < b);\n    });\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> vector_sort(vector<string> lst) {\n\n    vector<string> out;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 == 0) {\n            out.push_back(lst[i]);\n        }\n    }\n    sort(out.begin(), out.end(), [](const string& a, const string& b) {\n        if (a.length() == b.length()) {\n            return a < b;\n        }\n        return a.length() < b.length();\n    });\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> vector_sort(vector<string> lst){\n\n    vector<string> out;\n    for (int i = 0; i < lst.size(); i++)\n        if (lst[i].length() % 2 == 0)\n            out.push_back(lst[i]);\n\n    for (int i = 0; i < out.size(); i++)\n        for (int j = 1; j < out.size(); j++)\n            if (out[j].length() < out[j - 1].length())\n            {\n                string mid = out[j];\n                out[j] = out[j - 1];\n                out[j - 1] = mid;\n            }\n\n    sort(out.begin(), out.end(), [](const string &s1, const string &s2) {\n        if (s1.length",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nvector<string> vector_sort(vector<string> lst){\n    vector<string> out;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i].length() % 2 == 0) {\n            out.push_back(lst[i]);\n        }\n    }\n    sort(out.begin(), out.end(), [](string a, string b) {\n        return a.length() < b.length();\n    });\n    return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n, int x, int y) {\n    bool isp = true;\n    if (n < 2) isp = false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i - 1 == 0) isp = false;\n    if (isp) return x;\n    return y;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n, int x, int y) {\n    bool isp = true;\n    if (n < 2) isp = false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i - 1 == 0) isp = false;\n    if (isp) return x;\n    return y;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n\n    bool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i-1==0) isp=false;\n    if (isp) return x;\n    return y;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n, int x, int y){\n    if (n < 2) return y;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) return y;\n    return x;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n\n    if (n<2) return y;\n    for (int i=2;i*i<=n;i++)\n        if (n%i-1==0) return y;\n    return x;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n\nbool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i-1==0) isp=false;\n    if (isp) return x;\n    return y;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n, int x, int y) {\n\n    bool isp = true;\n    if (n < 2) isp = false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) isp = false;\n    if (isp) return x;\n    return y;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n    bool isp = true;\n    if (n < 2) isp = false;\n    for (int i = 2; i * i <= n; i++)\n        if (n % i == 0) isp = false;\n    if (isp) return x;\n    return y;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n\nbool isp=true;\n    if (n<2) isp=false;\n    for (int i=2;i*i<=n;i++)\n    if (n%i-1==0) isp=false;\n    if (isp) return x;\n    return y;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nint x_or_y(int n,int x,int y){\n\n    if (n < 2) {\n        return x;\n    }\n\n    for (int i = 2; i * i <= n; i++) {\n        if (n % i == 0) {\n            return y;\n        }\n    }\n\n    return x;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n\n    long long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 1e-4) continue; // Skip numbers less than 1e-4\n        if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n\n    long long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] >= 0 && (int)(round(lst[i])) % 2 == 1) {\n            sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n\n    long long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 1e-4) {\n            continue;\n        }\n        if (lst[i] > 0 && (int)(round(lst[i])) % 2 == 1) {\n            sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]<1e-4)\n    if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n\n    long long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] >= 0 && (int)(round(lst[i])) % 2 == 1) {\n            sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n\n    long long sum = 0;\n    for (int i = 0; i < lst.size(); i++) {\n        if (lst[i] < 1e-4) continue;\n        if (lst[i] > 0 and (int)(round(lst[i])) % 2 == 1) sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n    }\n    return sum;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n\n    long long sum=0;\n    for (int i=0;i<lst.size();i++)\n        if (lst[i]<1e-4)\n        if (lst[i]>0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n\nlong long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]>=0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n\n    long long sum=0;\n    for (int i=0;i<lst.size();i++) {\n        if (lst[i] >= 0 && (int)(round(lst[i])) % 2 == 1) {\n            sum += (int)(round(lst[i])) * (int)(round(lst[i]));\n        }\n    }\n    return sum;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nlong long double_the_difference(vector<float> lst){\n\nlong long sum=0;\n    for (int i=0;i<lst.size();i++)\n    if (lst[i]>=0 and (int)(round(lst[i]))%2==1) sum+=(int)(round(lst[i]))*(int)(round(lst[i]));\n    return sum;\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> out;\n    for (int i = 0; i < game.size(); i++) {\n        out.push_back(abs(game[i] - guess[i]));\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n\nvector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> out;\n    for (int i = 0; i < game.size(); i++) {\n        int diff = abs(game[i] - guess[i]);\n        out.push_back(diff + abs(guess[i] - game[i]));\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n\n    vector<int> out;\n    for (int i=0;i<game.size();i++) {\n        if (game[i] == guess[i]) {\n            out.push_back(0);\n        } else {\n            out.push_back(abs(game[i]-guess[i])+abs(guess[i]-game[i]));\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n\nvector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> out;\n    for (int i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i]) {\n            out.push_back(0);\n        } else {\n            out.push_back(abs(game[i] - guess[i]) + abs(guess[i] - game[i]));\n        }\n    }\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> out;\n    for (int i = 0; i < game.size(); i++) {\n        if (game[i] == guess[i]) {\n            out.push_back(0);\n        } else {\n            out.push_back(abs(game[i] - guess[i]) + abs(guess[i] - game[i]));\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> out;\n    for (int i = 0; i < game.size(); i++)\n        out.push_back(abs(game[i] - guess[i]));\n    return out;\n}",
        "#include <iostream>\n#include <vector>\n#include <cmath>\n\nusing namespace std;\n\nvector<int> compare(vector<int> game, vector<int> guess) {\n    vector<int> out;\n    for (int i = 0; i < game.size(); i++) {\n        int diff = abs(game[i] - guess[i]);\n        if (diff == 0) {\n            out.push_back(0);\n        } else {\n            out.push_back(diff);\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> compare(vector<int> game,vector<int> guess){\n\nvector<int> out;\n    for (int i=0;i<game.size();i++)\n    out.push_back(abs(game[i]-guess[i]));\n    return out;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest = \"\";\n    int max = -1000;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].length(); j++) {\n            char chr = extensions[i][j];\n            if (chr >= 65 && chr <= 90) strength += 1;\n            if (chr >= 97 && chr <= 122) strength -= 1;\n        }\n        if (strength > max) {\n            max = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + strongest;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest = \"\";\n    int max = -1000;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].length(); j++) {\n            char chr = extensions[i][j];\n            if (chr >= 65 and chr <= 90) strength += 1;\n            if (chr >= 97 and chr <= 122) strength -= 1;\n        }\n        if (strength > max) {\n            max = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + strongest;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest = \"\";\n    int max = -1000;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].length(); j++) {\n            char chr = extensions[i][j];\n            if (chr >= 65 and chr <= 90) strength += 1;\n            if (chr >= 97 and chr <= 122) strength -= 1;\n        }\n        if (strength > max) {\n            max = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + strongest;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name,vector<string> extensions){\n\n    string strongest;\n    int max=-1000;\n    for (int i=0;i<extensions.size();i++)\n    {\n        int strength=0;\n        for (int j=0;j<extensions[i].length();j++)\n        {\n            char chr=extensions[i][j];\n            if (chr>=65 and chr<=90) strength+=1;\n            if (chr>=97 and chr<=122) strength-=1;\n        }\n        if (strength>max) \n        {\n            max=strength;\n            strongest=extensions[i];\n        }\n    }\n    return class_name+strongest;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest = \"\";\n    int max = -1000;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].length(); j++) {\n            char chr = extensions[i][j];\n            if (chr >= 65 and chr <= 90) strength += 1;\n            if (chr >= 97 and chr <= 122) strength -= 1;\n        }\n        if (strength > max) {\n            max = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + strongest;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest = \"\";\n    int max = -1000;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].length(); j++) {\n            char chr = extensions[i][j];\n            if (chr >= 65 && chr <= 90) strength += 1;\n            if (chr >= 97 && chr <= 122) strength -= 1;\n        }\n        if (strength > max) {\n            max = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + strongest;\n}",
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n#include <stdlib.h>\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest = \"\";\n    int max = -1000;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].length(); j++) {\n            char chr = extensions[i][j];\n            if (chr >= 65 && chr <= 90) strength += 1;\n            if (chr >= 97 && chr <= 122) strength -= 1;\n        }\n        if (strength > max) {\n            max = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + strongest;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest = \"\";\n    int max = -1000;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].length(); j++) {\n            char chr = extensions[i][j];\n            if (chr >= 65 && chr <= 90) strength += 1;\n            if (chr >= 97 && chr <= 122) strength -= 1;\n        }\n        if (strength > max) {\n            max = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + strongest;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest = \"\";\n    int max = -1000;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].length(); j++) {\n            char chr = extensions[i][j];\n            if (chr >= 65 && chr <= 90) strength += 1;\n            if (chr >= 97 && chr <= 122) strength -= 1;\n        }\n        if (strength > max) {\n            max = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + strongest;\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<stdlib.h>\nstring Strongest_Extension(string class_name, vector<string> extensions) {\n    string strongest = \"\";\n    int max = -1000;\n    for (int i = 0; i < extensions.size(); i++) {\n        int strength = 0;\n        for (int j = 0; j < extensions[i].length(); j++) {\n            char chr = extensions[i][j];\n            if (chr >= 65 and chr <= 90) strength += 1;\n            if (chr >= 97 and chr <= 122) strength -= 1;\n        }\n        if (strength > max) {\n            max = strength;\n            strongest = extensions[i];\n        }\n    }\n    return class_name + strongest;\n}"
    ],
    [
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n\nfor (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n\nfor (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n\n    for (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a, string b) {\n    int i = 0;\n    while (i < b.size()) {\n        string rotate = b.substr(i) + b.substr(0, i);\n        if (a.find(rotate) != string::npos) return true;\n        i++;\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n\nfor (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a,string b){\n\nfor (int i=0;i<b.size();i++)\n    {\n        string rotate=b.substr(i)+b.substr(0);\n        if (a.find(rotate)!=string::npos) return true;\n    }\n    return false;\n\n}\n",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a, string b){\n\n    for (int i = 0; i < b.size(); i++) {\n        string rotate = b.substr(i) + b.substr(0);\n        if (a.find(rotate) != string::npos) return true;\n    }\n    return false;\n\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a, string b){\n\n    for (int i=0; i<b.size(); i++)\n    {\n        string rotate = b.substr(i) + b.substr(0);\n        if (a.find(rotate) != string::npos) return true;\n    }\n    return false;\n\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nbool cycpattern_check(string a, string b) {\n\n    for (int i = 0; i < b.size(); i++) {\n        string rotate = b.substr(i) + b.substr(0);\n        if (a.find(rotate) != string::npos) return true;\n    }\n    return false;\n\n}"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n        if (w[i]%2==1) n1+=1;\n    return {n2,n1};\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    return {n1,n2};\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n\nstring w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    return {n1,n2};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n\nstring w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    return {n1,n2};\n}\n",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n\nstring w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    return {n1, n2};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1++;\n    else n2++;\n    return {n2,n1};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n\nstring w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    else n2+=1;\n    return {n2,n1};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    return {n1,n2};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n\nstring w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n    if (w[i]%2==1) n1+=1;\n    return {n1,n2};\n}",
        "#include<stdio.h>\n#include<math.h>\n#include<string>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nvector<int> even_odd_count(int num){\n    string w=to_string(abs(num));\n    int n1=0,n2=0;\n    for (int i=0;i<w.length();i++)\n        if (w[i]%2==1) n1++;\n        else n2++;\n    return {n2,n1};\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_roman(int number){\n\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_roman(int number){\n\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_roman(int number){\n\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_roman(int number){\n\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_roman(int number){\n\nstring current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_roman(int number){\n\nstring current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_roman(int number){\n\nstring current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_roman(int number){\n\n    string current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_roman(int number){\n\nstring current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n",
        "#include<stdio.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring int_to_mini_roman(int number){\n\nstring current=\"\";\n    vector<string> rep={\"m\",\"cm\",\"d\",\"cd\",\"c\",\"xc\",\"l\",\"xl\",\"x\",\"ix\",\"v\",\"iv\",\"i\"};\n    vector<int> num={1000,900,500,400,100,90,50,40,10,9,5,4,1};\n    int pos=0;\n    while(number>0)\n    {\n        while (number>=num[pos])\n        {\n            current=current+rep[pos];\n        }\n        if (number>0) pos+=1;\n    }\n    return current;\n}\n"
    ],
    [
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a, float b, float c) {\n    if (abs(a*a + b*b - c*c) < 1e-4) return true;\n    if (abs(a*a + c*c - b*b) < 1e-4) return true;\n    if (abs(b*b + c*c - a*a) < 1e-4) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n\nif (abs(a*a+b*b-c*c)<1e-4 && (a*a+b*b==c*c)) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n\nif (abs(a*a+b*b-c*c)<1e-4) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n    if (a*a+b*b-c*c<1e-4) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n\nif (abs(a*a+b*b-c*c)<1e-4) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a, float b, float c){\n    if (a*a + b*b == c*c) return true;\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n\n    if (abs(a*a+b*b-c*c)<1e-4) return true;\n    else if (abs(a*a+c*c-b*b)<1e-4) return true;\n    else if (abs(b*b+c*c-a*a)<1e-4) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a, float b, float c) {\n    if (abs(a*a + b*b - c*c) < 1e-4) {\n        if (abs(a - b) < 1e-4) {\n            if (abs(b - c) < 1e-4) {\n                return true;\n            }\n        }\n    }\n    return false;\n}",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a,float b,float c){\n\nif (abs(a*a+b*b-c*c)<1e-4 && a*a+b*b==c*c) return true;\n    return false;\n}\n",
        "#include<stdio.h>\n#include<math.h>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nbool right_angle_triangle(float a, float b, float c) {\n    if (abs(a*a + b*b - c*c) < 1e-4) {\n        if (a*a + b*b == c*c) {\n            return true;\n        }\n    }\n    return false;\n}"
    ],
    [
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n\n    string max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < words.size(); i++)\n    {\n        string unique = \"\";\n        for (int j = 0; j < words[i].length(); j++)\n        {\n            if (find(unique.begin(), unique.end(), words[i][j]) == unique.end())\n                unique = unique + words[i][j];\n        }\n        if (unique.length() > maxu || (unique.length() == maxu && words[i] < max))\n        {\n            max = words[i];\n            maxu = unique.length();\n        }\n    }\n    return max;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n\n    string max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < words.size(); i++) {\n        string unique = \"\";\n        for (int j = 0; j < words[i].length(); j++) {\n            if (find(unique.begin(), unique.end(), words[i][j]) == unique.end()) {\n                unique = unique + words[i][j];\n            }\n        }\n        if (unique.length() > maxu or unique.length() == maxu) {\n            max = words[i];\n            maxu = unique.length();\n        }\n    }\n    return max;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i] < max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n\nstring max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or unique.length()==maxu)\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or unique.length()==maxu)\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or (unique.length()==maxu and words[i]<max))\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n\n    string max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < words.size(); i++) {\n        string unique = \"\";\n        for (int j = 0; j < words[i].length(); j++) {\n            if (find(unique.begin(), unique.end(), words[i][j]) == unique.end()) {\n                unique = unique + words[i][j];\n            }\n        }\n        if (unique.length() > maxu || unique.length() == maxu) {\n            max = words[i];\n            maxu = unique.length();\n        }\n    }\n    return max;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or unique.length()==maxu)\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n\n    string max = \"\";\n    int maxu = 0;\n    for (int i = 0; i < words.size(); i++) {\n        string unique = \"\";\n        for (int j = 0; j < words[i].length(); j++) {\n            if (find(unique.begin(), unique.end(), words[i][j]) == unique.end()) {\n                unique = unique + words[i][j];\n            }\n        }\n        if (unique.length() > maxu or unique.length() == maxu) {\n            max = words[i];\n            maxu = unique.length();\n        }\n    }\n    return max;\n}",
        "#include<stdio.h>\n#include<vector>\n#include<string>\n#include<algorithm>\nusing namespace std;\n#include<math.h>\n#include<stdlib.h>\nstring find_max(vector<string> words){\n\n    string max=\"\";\n    int maxu=0;\n    for (int i=0;i<words.size();i++)\n    {\n        string unique=\"\";\n        for (int j=0;j<words[i].length();j++)\n            if (find(unique.begin(),unique.end(),words[i][j])==unique.end())\n                unique=unique+words[i][j];\n        if (unique.length()>maxu or unique.length()==maxu)\n        {\n            max=words[i];\n            maxu=unique.length();\n        }\n    }\n    return max;\n}"
    ],
    [
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n\nif (need>remaining) return {number+need+remaining, 0};\n    return {number+need,remaining};\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need>remaining) {\n        return {number+need+remaining, 0};\n    }\n    return {number+need,number+remaining-need};\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number, int need, int remaining) {\n    if (need > remaining) {\n        return { number + need + remaining, 0 };\n    } else {\n        return { number + need, number + remaining - need };\n    }\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number,int need,int remaining){\n    if (need > remaining) {\n        return {number + need + remaining, 0};\n    }\n    return {number + need, number + remaining - need};\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number, int need, int remaining) {\n    if (need > remaining) {\n        return {number + need + remaining, 0};\n    }\n    return {number + need, number + remaining - need};\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number, int need, int remaining) {\n    if (need > remaining) {\n        return {number + need + remaining, 0};\n    }\n    return {number + need, number + remaining - need};\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number, int need, int remaining) {\n    if (need > remaining) {\n        return {number + need + remaining, 0};\n    }\n    return {number + need, number + remaining - need};\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number, int need, int remaining) {\n    if (need > remaining) {\n        return { number + need + remaining, 0 };\n    }\n    return { number + need, number + remaining - need };\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number, int need, int remaining) {\n    if (need > remaining) {\n        return {number + need + remaining, 0};\n    }\n    return {number + need, number + remaining - need};\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> eat(int number, int need, int remaining) {\n    if (need > remaining) {\n        return {number + need + remaining, 0};\n    }\n    return {number + need, number + remaining - need};\n}"
    ],
    [
        "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nint do_algebra(vector<string> operato, vector<int> operand) {\n    vector<int> num = {};\n    vector<int> posto = {};\n    for (int i = 0; i < operand.size(); i++)\n        posto.push_back(i);\n    for (int i = 0; i < operato.size(); i++)\n        if (operato[i] == \"**\") {\n            while (posto[posto[i]] != posto[i])\n                posto[i] = posto[posto[i]];",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i+1]],operand[posto[i+1]]);",
        "The bug in the original code is related to the incorrect handling of the exponentiation operation. The fix code snippet addresses this issue by properly handling the exponentiation operation by using the pow function to calculate the power of two numbers. Additionally, the fix code snippet includes proper handling of the multiplication and floor division operations, ensuring that the calculations are performed correctly based on the given operators and operands.",
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <string>\nusing namespace std;\n#include <algorithm>\n#include <stdlib.h>\n\nint do_algebra(vector<string> operato, vector<int> operand) {\n    vector<int> num = {};\n    vector<int> posto = {};\n\n    for (int i = 0; i < operand.size(); i++)\n        posto.push_back(i);\n\n    for (int i = 0; i < operato.size(); i++) {\n        if (operato[i] == \"**\") {\n            while (posto[posto[i]] != posto[i])\n                posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1])\n                posto[i + 1] = posto[posto[i + 1]];\n            operand[posto[i]] = pow",
        "#include <stdio.h>\n#include <math.h>\n#include <vector>\n#include <string>\nusing namespace std;\n#include <algorithm>\n#include <stdlib.h>\n\nint do_algebra(vector<string> operato, vector<int> operand) {\n    vector<int> num;\n    vector<int> posto;\n    for (int i = 0; i < operand.size(); i++)\n        posto.push_back(i);\n    for (int i = 0; i < operato.size(); i++)\n        if (operato[i] == \"**\") {\n            while (posto[posto[i]] != posto[i]) posto[i] = posto[posto[i]];\n            while (posto[posto[i + 1]] != posto[i + 1]) posto[i + 1] = posto[posto[",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i+1]],operand[posto[i+1]]);",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i+1]],operand[posto[i+1]]);",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto[i+1]];\n        operand[posto[i]]=pow(operand[posto[i+1]],operand[posto[i+1]]);",
        "The bug in the original code is in the handling of exponentiation operation. The correct way to handle exponentiation is to use the `pow()` function from `<cmath>` library. The fixed code snippet below addresses this issue by replacing the incorrect `operand[posto[i]]=operand[posto[i]]^operand[posto[i+1]];` with `operand[posto[i]]=pow(operand[posto[i]],operand[posto[i+1]]);`. This change ensures that the exponentiation operation is correctly computed.",
        "#include<stdio.h>\n#include<math.h>\n#include<vector>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<stdlib.h>\nint do_algebra(vector<string> operato, vector<int> operand){\n\n    vector<int> num={};\n    vector<int> posto={};\n    for (int i=0;i<operand.size();i++)\n        posto.push_back(i);\n    for (int i=0;i<operato.size();i++)\n        if (operato[i]==\"**\") \n        {\n        while (posto[posto[i]]!=posto[i]) posto[i]=posto[posto[i]];\n        while (posto[posto[i+1]]!=posto[i+1]) posto[i+1]=posto[posto"
    ],
    [
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (isalpha(w)) {\n            if (islower(w)) w=toupper(w);\n            else w=tolower(w);\n        }\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n",
        "#include <iostream>\n#include <string>\n\nusing namespace std;\n\nstring solve(string s) {\n    int nletter = 0;\n    string out = \"\";\n    for (int i = 0; i < s.length(); i++) {\n        char w = s[i];\n        if (w >= 'A' && w <= 'Z') w = w - 32;\n        else if (w >= 'a' && w <= 'z') w = w + 32;\n        else nletter += 1;\n        out += w;\n    }\n    if (nletter == s.length()) {\n        string p(s.rbegin(), s.rend());\n        return p;\n    }\n    else return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (isalpha(w)) w=toupper(w);\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n\nint nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}\n",
        "#include<stdio.h>\n#include<string>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring solve(string s){\n\n    int nletter=0;\n    string out=\"\";\n    for (int i=0;i<s.length();i++)\n    {\n        char w=s[i];\n        if (w>=65 and w<=90) w=w+32;\n        else nletter+=1;\n        out=out+w;\n    }\n    if (nletter==s.length())\n    {\n        string p(s.rbegin(),s.rend());\n        return p;\n    }\n    else return out;\n}"
    ],
    [
        "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n    MD5_Init(&c);\n    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n    {\n        char w;\n        if (md[i]<160) w=48+md[i]/16;\n        else w=87+md[i]/16;\n        out_str=out_str+w;\n        if (md[i]%16<87) w=48+",
        "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n    MD5_Init(&c);\n    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n    {\n        char w;\n        if (md[i]<160) w=48+md[i]/16;\n        else w=87+md[i]/16;\n        out_str=out_str+w;\n        if (md[i]%16<87) w=48+",
        "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n\nunsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<87) w=48+md",
        "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n\nunsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<87) w=48+md",
        "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n\nunsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<87) w=48+md",
        "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n\nunsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<87) w=48+md",
        "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n\nunsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<87) w=48+md",
        "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n\n    unsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n    MD5_Init(&c);\n    MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n    {\n        char w;\n        if (md[i]<160) w=48+md[i]/16;\n        else w=87+md[i]/16;\n        out_str=out_str+w;\n        if (md[i]%16<87) w=48+",
        "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n\nunsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<87) w=48+md",
        "#include<stdio.h>\n#include<string>\n#include<openssl/md5.h>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nstring string_to_md5(string text){\n\nunsigned char md[16];\n    if (text.length()==0) return \"None\";\n    MD5_CTX c;\n    int i;\n   MD5_Init(&c);\n   MD5_Update(&c, (unsigned char*)text.c_str(), text.length());\n    MD5_Final(md, &c);\n    string out_str=\"\";\n    for (int i=0;i<16;i++)\n        {\n            char w;\n            if (md[i]<160) w=48+md[i]/16;\n            else w=87+md[i]/16;\n            out_str=out_str+w;\n            if (md[i]%16<87) w=48+md"
    ],
    [
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n\nint m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<b;i++)\n    if (i>10 and i%2==0) out.push_back(i);\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a, int b){\n\n    int m;\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    vector<int> out;\n    for (int i = a; i < b; i++) {\n        if (i > 10 and i % 2 == 0) {\n            out.push_back(i);\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n\nint m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<b;i++)\n    if (i>10 and i%2==0) out.push_back(i);\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<b;i++)\n    if (i>10 and i%2==0) out.push_back(i);\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n\nint m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<b;i++)\n    if (i>10 and i%2==0) out.push_back(i);\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a, int b) {\n    int m;\n    if (b < a) {\n        m = a;\n        a = b;\n        b = m;\n    }\n\n    vector<int> out;\n    for (int i = a; i < b; i++) {\n        if (i > 10 and i % 2 == 0) {\n            out.push_back(i);\n        }\n    }\n    return out;\n}",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<b;i++)\n    if (i>10 and i%2==0) out.push_back(i);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n\nint m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<b;i++)\n    if (i>10 and i%2==0) out.push_back(i);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n\n    int m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<b;i++)\n    if (i>10 and i%2==0) out.push_back(i);\n    return out;\n}\n",
        "#include<stdio.h>\n#include<vector>\nusing namespace std;\n#include<algorithm>\n#include<math.h>\n#include<stdlib.h>\nvector<int> generate_integers(int a,int b){\n\nint m;\n    if (b<a)\n    {\n        m=a;a=b;b=m;\n    }\n\n    vector<int> out={};\n    for (int i=a;i<b;i++)\n    if (i>10 and i%2==0) out.push_back(i);\n    return out;\n}\n"
    ]
]